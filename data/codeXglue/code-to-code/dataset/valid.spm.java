<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁D V Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ option _ flags ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ prompt Title ▁= <invocation_expression,left> ▁read Unicode String <argument_list,left> ▁( ▁in ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ error Title ▁= <invocation_expression,left> ▁read Unicode String <argument_list,left> ▁( ▁in ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ prompt Text ▁= <invocation_expression,left> ▁read Unicode String <argument_list,left> ▁( ▁in ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ error Text ▁= <invocation_expression,left> ▁read Unicode String <argument_list,left> ▁( ▁in ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁field _ size _ first _ formula <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ not _ used _1 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ formula 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁Formula ▁. ▁read <member_access_expression,right> <argument_list,left> ▁( ▁field _ size _ first _ formula ▁, <argument,left> ▁in  <argument,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁field _ size _ sec _ formula <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ not _ used _2 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ formula 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁Formula ▁. ▁read <member_access_expression,right> <argument_list,left> ▁( ▁field _ size _ sec _ formula ▁, <argument,left> ▁in  <argument,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ regions ▁= <object_creation_expression,left> ▁new ▁Cell Range Address List <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁pattern <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Insert Instance Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁contains <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁indexOf <argument_list,left> ▁( ▁o ▁) <argument_list,right> <invocation_expression,right> ▁!= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁ByteBuffer ▁encode <parameter_list,left> ▁( <parameter,left> ▁String ▁s <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁encode <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁CharBuffer ▁. ▁wrap <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁requires Commit Body <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getKey <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Raw Parse Utils ▁. ▁decode <member_access_expression,right> <argument_list,left> ▁( ▁enc ▁, ▁buffer ▁, ▁key Start ▁, ▁key End ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 1 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 2 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 3 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 4 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double ▁result <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁d 0 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁single Operand Evaluate <member_access_expression,right> <argument_list,left> ▁( ▁arg 0 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁d 1 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁single Operand Evaluate <member_access_expression,right> <argument_list,left> ▁( ▁arg 1 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁d 2 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁single Operand Evaluate <member_access_expression,right> <argument_list,left> ▁( ▁arg 2 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁d 3 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁single Operand Evaluate <member_access_expression,right> <argument_list,left> ▁( ▁arg 3 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁d 4 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁single Operand Evaluate <member_access_expression,right> <argument_list,left> ▁( ▁arg 4 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁result ▁= <invocation_expression,left> ▁evaluate <argument_list,left> ▁( ▁d 0 ▁, ▁d 1 ▁, ▁d 2 ▁, ▁d 3 ▁, <binary_expression,left> ▁d 4 ▁!= ▁0.0 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Numeric Function ▁. ▁check Value <member_access_expression,right> <argument_list,left> ▁( ▁result ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( ▁result ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Client V pn Endpoint Result ▁delete Client V pn Endpoint <parameter_list,left> ▁( <parameter,left> ▁Delete Client V pn Endpoint Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Client V pn Endpoint <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁Object ▁get <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁key <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁T ernary TreeNode ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁list <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁autocomplete ▁. ▁prefix Completion <member_access_expression,right> <argument_list,left> ▁( ▁root ▁, ▁key ▁, ▁0 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁list ▁== ▁null <binary_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> ▁list ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁T ernary TreeNode ▁n <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> ▁if <argument_list,left> ▁( <invocation_expression,left> ▁char Seq Equals <argument_list,left> ▁( <member_access_expression,left> ▁n ▁. ▁token <member_access_expression,right> ▁, ▁key ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right>  ▁{ <member_access_expression,left> ▁return ▁n ▁. ▁val <member_access_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁} ▁return <ERROR,right> ▁null ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Start F leet Actions Result ▁start F leet Actions <parameter_list,left> ▁( <parameter,left> ▁Start F leet Actions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start F leet Actions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cell Range Address ▁getCell Range Address <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Document ▁load XML <parameter_list,left> ▁( <parameter,left> ▁Reader ▁is <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Document BuilderFactory <variable_declarator,left> ▁dbf <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Document BuilderFactory ▁. ▁newInstance <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁DocumentBuilder <variable_declarator,left> ▁db <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁db ▁= <invocation_expression,left> <member_access_expression,left> ▁dbf ▁. ▁new DocumentBuilder <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Exception ▁se ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁se ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁w 3 c <qualified_name,right> ▁. ▁dom <qualified_name,right> ▁. ▁Document <qualified_name,right> <variable_declarator,left> ▁doc <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁doc ▁= <invocation_expression,left> <member_access_expression,left> ▁db ▁. ▁parse <member_access_expression,right> <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁InputSource <argument_list,left> ▁( ▁is ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Exception ▁se ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁se <binary_expression,right> ▁, ▁se ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <return_statement,left> ▁return ▁doc ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁double ▁get <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁, <parameter,left> ▁double ▁df lt <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁vals <bracketed_argument_list,left> ▁[  ▁] <bracketed_argument_list,right> <equals_value_clause,left> ▁= <cast_expression,left> ▁( <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁vals ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁s val <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁props ▁. ▁getProperty <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁df lt <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Double ▁. ▁parseDouble <member_access_expression,right> <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁colName <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁k ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁s val ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁k ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁col For Val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁colName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁vals ▁= <invocation_expression,left> ▁prop To Double Array <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁vals ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getBackground Image Id <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁E sch er Simple Property <variable_declarator,left> ▁property <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁get Opt Record <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁lookup <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁E sch er Property Types ▁. ▁FILL __ P ATTER NT EXT URE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <conditional_expression,left> <binary_expression,left> ▁property ▁== ▁null <binary_expression,right> ▁? ▁0 ▁: <invocation_expression,left> <member_access_expression,left> ▁property ▁. ▁getProperty Value <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Tree Filter ▁getTree Filter <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁tree Filter ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Member Result ▁getMember <parameter_list,left> ▁( <parameter,left> ▁Get Member Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Member <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁can Encode <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Replace Route Result ▁replace Route <parameter_list,left> ▁( <parameter,left> ▁Replace Route Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Replace Route <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ObjectId ▁getResult Tree Id <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁result Tree ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁null ▁: <invocation_expression,left> <member_access_expression,left> ▁result Tree ▁. ▁to ObjectId <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁final ▁Object <parameter,right> ▁o ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁rval <equals_value_clause,left> ▁= <binary_expression,left> ▁this ▁== ▁o <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <prefix_unary_expression,left> ▁! ▁rval <prefix_unary_expression,right> ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> ▁o ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁o ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <invocation_expression,left> <member_access_expression,left> ▁this ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Int List <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Int List ▁) ▁o <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁other ▁. ▁_ limit <member_access_expression,right> ▁== ▁_ limit <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁rval ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> ▁j ▁< ▁_ limit <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁j ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= <binary_expression,left> <element_access_expression,left> ▁_ array <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <element_access_expression,left> <member_access_expression,left> ▁other ▁. ▁_ array <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁rval ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Re usable Del egation Sets Result ▁list Re usable Del egation Sets <parameter_list,left> ▁( <parameter,left> ▁List Re usable Del egation Sets Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Re usable Del egation Sets <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁a ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Init iate Layer Upload Result ▁initiate Layer Upload <parameter_list,left> ▁( <parameter,left> ▁Init iate Layer Upload Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Init iate Layer Upload <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Update Repo Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ph on etic FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁inject ▁= <invocation_expression,left> ▁getBoolean <argument_list,left> ▁( ▁args ▁, ▁IN JECT ▁, ▁true ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁name ▁= <invocation_expression,left> ▁require <argument_list,left> ▁( ▁args ▁, ▁EN CO DER ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁v <equals_value_clause,left> ▁= <invocation_expression,left> ▁get <argument_list,left> ▁( ▁args ▁, ▁MAX _ CODE _ LENGTH ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁v ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁max Code Length ▁= <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁v ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁max Code Length ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Fetch Command ▁fetch <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Fetch Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Query Phrase Map ▁search Phrase <parameter_list,left> ▁( <parameter,left> ▁String ▁fieldName <parameter,right> ▁, <parameter,left> ▁final ▁List <parameter,right> <ERROR,left> ▁< ▁> <ERROR,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Query Phrase Map <variable_declarator,left> ▁root <equals_value_clause,left> ▁= <invocation_expression,left> ▁getRoot Map <argument_list,left> ▁( ▁fieldName ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁root ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁null ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁root ▁. ▁search Phrase <member_access_expression,right> <argument_list,left> ▁( ▁phrase Candidate ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< <qualified_name,left> ▁Mult iset ▁. <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁K ▁> <type_argument_list,right> <generic_name,right> <qualified_name,right> ▁> <type_argument_list,right> <generic_name,right> ▁iterator <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Mult iset Entry Iterator <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁DB Snapshot ▁delete DB Snapshot <parameter_list,left> ▁( <parameter,left> ▁Delete DB Snapshot Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete DB Snapshot <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setOutput <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁output ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁compact <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁XmlPullParser ▁new PullParser <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁XmlPullParser Exception <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁parser Classes ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁XmlPullParser Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁class Names Location <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁parser Classes ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁XmlPullParser Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁class Names Location <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁issues <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁parser Classes ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁Class ▁pp Class <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Class ▁) <invocation_expression,left> <member_access_expression,left> ▁parser Classes ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁XmlPullParser ▁pp <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁XmlPullParser ▁) <invocation_expression,left> <member_access_expression,left> ▁pp Class ▁. ▁newInstance <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁Iterator <variable_declarator,left> ▁iter <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁features ▁. ▁keySet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁iter ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁String ▁key <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁String ▁) <invocation_expression,left> <member_access_expression,left> ▁iter ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁Boolean ▁value <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Boolean ▁) <invocation_expression,left> <member_access_expression,left> ▁features ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁key ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁value ▁!= ▁null <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁booleanValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁pp ▁. ▁set Feature <member_access_expression,right> <argument_list,left> ▁( ▁key ▁, ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁pp ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Exception ▁ex ▁) <catch_declaration,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁issues ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁pp Class ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁ex ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <for_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁XmlPullParser Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁issues <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Analysis Scheme Result ▁delete Analysis Scheme <parameter_list,left> ▁( <parameter,left> ▁Delete Analysis Scheme Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Analysis Scheme <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Excel Extractor <tuple_pattern,left> ▁( ▁H SSF Workbook ▁wb ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁wb ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ wb ▁= ▁wb <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ formatter ▁= <object_creation_expression,left> ▁new ▁H SSF Data Formatter <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁IntBuffer ▁put <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁int ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁putInt <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁index ▁* <member_access_expression,left> ▁Size Of ▁. ▁INT <member_access_expression,right> <binary_expression,right> ▁, ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁byte ▁getParameter Class <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁index ▁>= <member_access_expression,left> ▁param Class ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁param Class <bracketed_argument_list,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁param Class ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁param Class <bracketed_argument_list,left> ▁[ ▁index ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Endpoints Result ▁list Endpoints <parameter_list,left> ▁( <parameter,left> ▁List Endpoints Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Endpoints <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Ch ars Ref ▁join <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁words <parameter,right> ▁, <parameter,left> ▁Ch ars Ref Builder ▁reuse <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁upto <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁reuse ▁. ▁chars <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁String ▁word <variable_declaration,right> ▁: ▁) ▁{ <ERROR,right> <variable_declaration,left> ▁int <variable_declarator,left> ▁word Len <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁word ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <predefined_type,left> <predefined_type,right> <assignment_expression,left> ▁needed ▁= <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> ▁0 ▁== ▁upto <binary_expression,right> ▁? ▁word Len ▁: <binary_expression,left> <binary_expression,left> ▁1 ▁+ ▁upto <binary_expression,right> ▁+ ▁word Len <binary_expression,right> <conditional_expression,right> ▁) <parenthesized_expression,right> <assignment_expression,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <assignment_expression,left> <invocation_expression,left> <member_access_expression,left> <assignment_expression,left> <element_access_expression,left> <invocation_expression,left> <assignment_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁needed ▁> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁grow <member_access_expression,right> <argument_list,left> ▁( ▁needed ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁reuse ▁. ▁chars <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁} ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> ▁upto ▁> ▁0 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁upto ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <member_access_expression,left> ▁Syn onym Map ▁. ▁WORD _ SEPARATOR <member_access_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁. ▁get Chars <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁word Len ▁, ▁buffer ▁, ▁upto ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁+= ▁word Len <assignment_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁. ▁setLength <member_access_expression,right> <argument_list,left> ▁( ▁upto ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁return <ERROR,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuffer ▁insert <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁float ▁f <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁insert <argument_list,left> ▁( ▁index ▁, <invocation_expression,left> <member_access_expression,left> ▁Float ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁f ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Short Buffer ▁put <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁short <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁src Offset <parameter,right> ▁, <parameter,left> ▁int ▁short Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁short Count ▁> <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Overflow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁src Offset ▁, ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁, ▁short Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁position ▁+= ▁short Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dis associate Resolver Endpoint IpAddress Result ▁dis associate Resolver Endpoint IpAddress <parameter_list,left> ▁( <parameter,left> ▁Dis associate Resolver Endpoint IpAddress Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dis associate Resolver Endpoint IpAddress <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Accept Direct Connect Gateway Association Proposal Result ▁accept Direct Connect Gateway Association Proposal <parameter_list,left> ▁( <parameter,left> ▁Accept Direct Connect Gateway Association Proposal Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Accept Direct Connect Gateway Association Proposal <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Stack Set Operation Result ▁stop Stack Set Operation <parameter_list,left> ▁( <parameter,left> ▁Stop Stack Set Operation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Stack Set Operation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cache Subnet Group ▁create Cache Subnet Group <parameter_list,left> ▁( <parameter,left> ▁Create Cache Subnet Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Cache Subnet Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Cached Or ds <variable_declarator,left> <tuple_pattern,left> ▁( ▁Ord inal s Segment Reader ▁source ▁, ▁int ▁max Doc ▁) <tuple_pattern,right> <{,left> <{,right> <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ <binary_expression,left> ▁max Doc ▁+ ▁1 <binary_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁or ds <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁max Doc ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁tot Or ds <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁Int s Ref ▁values <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Int s Ref <argument_list,left> ▁( ▁32 ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁doc ID <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁doc ID ▁< ▁max Doc <binary_expression,right> ▁; <postfix_unary_expression,left> ▁doc ID ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁offsets <bracketed_argument_list,left> ▁[ ▁doc ID ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁int ▁) ▁tot Or ds <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁source ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁doc ID ▁, ▁values ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁next Length <equals_value_clause,left> ▁= <binary_expression,left> ▁tot Or ds ▁+ <member_access_expression,left> ▁values ▁. ▁length <member_access_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁next Length ▁> <member_access_expression,left> ▁or ds ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁next Length ▁> <member_access_expression,left> ▁ArrayUtil ▁. ▁MAX _ ARRAY _ LENGTH <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁next Length <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁or ds ▁= <invocation_expression,left> <member_access_expression,left> ▁ArrayUtil ▁. ▁grow <member_access_expression,right> <argument_list,left> ▁( ▁or ds ▁, <cast_expression,left> ▁( ▁int ▁) ▁next Length <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁values ▁. ▁ints <member_access_expression,right> ▁, ▁0 ▁, ▁or ds ▁, <cast_expression,left> ▁( ▁int ▁) ▁tot Or ds <cast_expression,right> ▁, <member_access_expression,left> ▁values ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tot Or ds ▁= ▁next Length <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁offsets <bracketed_argument_list,left> ▁[ ▁max Doc ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁int ▁) ▁tot Or ds <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <cast_expression,left> ▁( ▁double ▁) ▁tot Or ds <cast_expression,right> ▁/ <member_access_expression,left> ▁or ds ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁< ▁0.9 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ordinal s <member_access_expression,right> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ <cast_expression,left> ▁( ▁int ▁) ▁tot Or ds <cast_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁or ds ▁, ▁0 ▁, <member_access_expression,left> ▁this ▁. ▁ordinal s <member_access_expression,right> ▁, ▁0 ▁, <cast_expression,left> ▁( ▁int ▁) ▁tot Or ds <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ordinal s <member_access_expression,right> ▁= ▁or ds <assignment_expression,right> ▁; <expression_statement,right> ▁} ▁} <block,right> <if_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁getRaw UserInfo <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁userInfo ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁toArray <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Object Arrays ▁. ▁toArray Impl <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Compilation Job Result ▁describe Compilation Job <parameter_list,left> ▁( <parameter,left> ▁Describe Compilation Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Compilation Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getQuery <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁decode <argument_list,left> ▁( ▁query ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Environment Result ▁create Environment <parameter_list,left> ▁( <parameter,left> ▁Create Environment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Environment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ParseTree Match ▁match <parameter_list,left> ▁( <parameter,left> ▁ParseTree ▁tree <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁matcher ▁. ▁match <member_access_expression,right> <argument_list,left> ▁( ▁tree ▁, ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁contains <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁cs <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁map ▁. ▁containsKey <member_access_expression,right> <argument_list,left> ▁( ▁cs ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Query Request <tuple_pattern,left> ▁( ▁String ▁tableName ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set TableName <argument_list,left> ▁( ▁tableName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Row Group Hidden By Parent <parameter_list,left> ▁( <parameter,left> ▁int ▁row <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int ▁end Level <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean ▁end Hidden <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁endOf Outline Group Idx <equals_value_clause,left> ▁= <invocation_expression,left> ▁find EndOf Row Outline Group <argument_list,left> ▁( ▁row ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁endOf Outline Group Idx ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁end Level ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁end Hidden ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁end Level ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁endOf Outline Group Idx ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getOut line Level <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁end Hidden ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁endOf Outline Group Idx ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Zero Height <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁start Level <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean ▁start Hidden <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁start Of Outline Group Idx <equals_value_clause,left> ▁= <invocation_expression,left> ▁find Start Of Row Outline Group <argument_list,left> ▁( ▁row ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁start Of Outline Group Idx ▁- ▁1 <binary_expression,right> ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁start Of Outline Group Idx ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁start Level ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁start Hidden ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁start Level ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁start Of Outline Group Idx ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getOut line Level <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁start Hidden ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( <binary_expression,left> ▁start Of Outline Group Idx ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Zero Height <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁end Level ▁> ▁start Level <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁end Hidden ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁start Hidden ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁retry Failed Lock File Commit <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Validate Match m aking Rule Set Result ▁validate Match m aking Rule Set <parameter_list,left> ▁( <parameter,left> ▁Validate Match m aking Rule Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Validate Match m aking Rule Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁get <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁, <parameter,left> ▁boolean ▁df lt <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁vals <bracketed_argument_list,left> ▁[  ▁] <bracketed_argument_list,right> <equals_value_clause,left> ▁= <cast_expression,left> ▁( <array_type,left> ▁boolean <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁vals ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁s val <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁props ▁. ▁getProperty <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁df lt <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Boolean ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> ▁. ▁booleanValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁colName <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁k ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁s val ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁k ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁col For Val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁colName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁vals ▁= <invocation_expression,left> ▁prop To Boolean Array <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁vals ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Link Attributes Result ▁update Link Attributes <parameter_list,left> ▁( <parameter,left> ▁Update Link Attributes Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Link Attributes <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Numeric Payload Token Filter <tuple_pattern,left> ▁( ▁TokenStream ▁input ▁, ▁float ▁payload ▁, ▁String ▁type Match ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁input ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁type Match ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁the Payload ▁= <object_creation_expression,left> ▁new ▁BytesRef <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Payload Helper ▁. ▁encode Float <member_access_expression,right> <argument_list,left> ▁( ▁payload ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁type Match <member_access_expression,right> ▁= ▁type Match <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get Iterations <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁push <parameter_list,left> ▁( <parameter,left> ▁E ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁addElement <tuple_pattern,left> ▁( ▁object ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return ▁object ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁LinkedHashMap <tuple_pattern,left> ▁( ▁int ▁initialCapacity ▁, ▁float ▁load Factor ▁, ▁boolean ▁access Order ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁initialCapacity ▁, ▁load Factor ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁init <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁access Order <member_access_expression,right> ▁= ▁access Order <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁TreeSet <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁backing Map  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁TreeMap <type_argument_list,left> ▁< ▁E ▁, ▁Object ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁long ▁skip <parameter_list,left> ▁( <parameter,left> ▁long ▁char Count <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁char Count ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁char Count <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁skipped <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁to Read <equals_value_clause,left> ▁= <conditional_expression,left> <binary_expression,left> ▁char Count ▁< ▁512 <binary_expression,right> ▁? <cast_expression,left> ▁( ▁int ▁) ▁char Count <cast_expression,right> ▁: ▁512 <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁chars Sk ipped <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁to Read ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> ▁skipped ▁< ▁char Count <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁read <equals_value_clause,left> ▁= <invocation_expression,left> ▁read <argument_list,left> ▁( ▁chars Sk ipped ▁, ▁0 ▁, ▁to Read ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁read ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁skipped ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁skipped ▁+= ▁read <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁read ▁< ▁to Read <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁skipped ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁char Count ▁- ▁skipped <binary_expression,right> ▁< ▁to Read <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁to Read ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁char Count ▁- ▁skipped <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <while_statement,right> <return_statement,left> ▁return ▁skipped ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁getRef 3 DE val <parameter_list,left> ▁( <parameter,left> ▁Ref 3 DP x g ▁r pt g <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Sheet Range Evaluator <variable_declarator,left> ▁s re <equals_value_clause,left> ▁= <invocation_expression,left> ▁create Ex tern Sheet Ref Evaluator <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getSh eet Name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getLast Sheet Name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getExternal Workbook Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Lazy Ref Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getColumn <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁s re ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁New Analyzer Task <tuple_pattern,left> ▁( ▁Perf Run Data ▁run Data ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁run Data ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁analyzer Names ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁o  <return_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁instanceof ▁English St em mer <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁block <equals_value_clause,left> ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁values Offset ▁= <invocation_expression,left> ▁decode <argument_list,left> ▁( ▁block ▁, ▁values ▁, ▁values Offset ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁inc Ref <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁ensure Open <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁ref Count ▁. ▁incrementAndGet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Replication Group ▁test Failover <parameter_list,left> ▁( <parameter,left> ▁Test Failover Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Test Failover <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ref Writer <tuple_pattern,left> ▁( ▁Collection <ERROR,left> ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁refs <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁Ref Comparator ▁. ▁sort <member_access_expression,right> <argument_list,left> ▁( ▁refs ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Byte Vector <tuple_pattern,left> ▁( ▁int ▁capacity ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁capacity ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁blockSize ▁= ▁capacity <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁blockSize ▁= ▁DEFAULT _ BLOCK _ SIZE <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁array ▁= <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁blockSize ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁n ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁end Worker <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁workers ▁. ▁decrement AndGet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁process ▁. ▁release <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Volume Status Result ▁describe Volume Status <parameter_list,left> ▁( <parameter,left> ▁Describe Volume Status Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Volume Status <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Int Mapper <tuple_pattern,left> ▁( ▁final <predefined_type,left> <predefined_type,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁elements ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁initialCapacity ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁value Key Map ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashMap <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁initialCapacity ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ border Type ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _2_ options ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁void ▁copy Into <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁elements <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁element Data ▁, ▁0 ▁, ▁elements ▁, ▁0 ▁, ▁element Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 1 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double ▁s 0 <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String ▁s 1 <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s 0 ▁= <invocation_expression,left> ▁evaluate Double Arg <argument_list,left> ▁( ▁arg 0 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁s 1 ▁= <invocation_expression,left> ▁evaluate String Arg <argument_list,left> ▁( ▁arg 1 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁formatted Str <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁formatter ▁. ▁format Raw Cell Contents <member_access_expression,right> <argument_list,left> ▁( ▁s 0 ▁, <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁, ▁s 1 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁String Eval <argument_list,left> ▁( ▁formatted Str ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Custom View Settings Record Aggregate <variable_declarator,left> <tuple_pattern,left> ▁( ▁Record Stream ▁rs ▁) <tuple_pattern,right> <{,left> <{,right> <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁getNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁_ begin ▁. ▁getS id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <member_access_expression,left> ▁User S View Begin ▁. ▁sid <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Record Base ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁temp <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁peek Next Sid <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <member_access_expression,left> ▁User S View End ▁. ▁sid <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁Page Settings Block ▁. ▁is Component Record <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁peek Next Sid <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ ps Block ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁peek Next Sid <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <member_access_expression,left> ▁Header Footer Record ▁. ▁sid <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ ps Block ▁. ▁add L ate Header Footer <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁Header Footer Record ▁) <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁getNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁peek Next Sid <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ ps Block ▁= <object_creation_expression,left> ▁new ▁Page Settings Block <argument_list,left> ▁( ▁rs ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁temp ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁_ ps Block ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁temp ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁getNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ rec s ▁= ▁temp <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ end ▁= <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁getNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁_ end ▁. ▁getS id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <member_access_expression,left> ▁User S View End ▁. ▁sid <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} ▁} <block,right> <if_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete Signal ing Channel Result ▁delete Signal ing Channel <parameter_list,left> ▁( <parameter,left> ▁Delete Signal ing Channel Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Signal ing Channel <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁remove <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> ▁contains <argument_list,left> ▁( ▁o ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁entry <equals_value_clause,left> ▁= <cast_expression,left> ▁( <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> ▁) ▁o <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁AtomicInteger <variable_declarator,left> ▁frequency <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁backing Map ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getElement <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁number Removed <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁frequency ▁. ▁get AndSet <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁-= ▁number Removed <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Snapshot Deletion Policy <tuple_pattern,left> ▁( ▁Index Deletion Policy ▁primary ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁primary <member_access_expression,right> ▁= ▁primary <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁throwException <parameter_list,left> ▁( ▁) <parameter,left> ▁throws ▁Buffer Under flow Exception <parameter,right> ▁, ▁Buffer Overflow Exception ▁, ▁Un mapp able Character Exception ▁, ▁Malformed Input Exception ▁, <parameter,left> ▁Character Coding Exception <ERROR,left> ▁{ ▁switch ▁( <ERROR,right> ▁this <parameter,right> <ERROR,left> ▁. ▁type <ERROR,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁case ▁TYPE _ UN DER FLOW <variable_declaration,right> ▁: <ERROR,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Under flow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <ERROR,left> <variable_declaration,left> ▁case ▁TYPE _ OVER FLOW <variable_declaration,right> ▁: <ERROR,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Overflow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <ERROR,left> <variable_declaration,left> ▁case ▁TYPE _ UN M APP ABLE _ CHAR <variable_declaration,right> ▁: <ERROR,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Un mapp able Character Exception <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <ERROR,left> <variable_declaration,left> ▁case ▁TYPE _ M AL FOR MED _ INPUT <variable_declaration,right> ▁: <ERROR,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Malformed Input Exception <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <ERROR,left> ▁default ▁: <ERROR,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Character Coding Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁String Pt g <tuple_pattern,left> ▁( ▁L ittle Endian Input ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n Chars <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Byte <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <binary_expression,left> ▁_ is 16 bit Unicode <ERROR,left> ▁= ▁( <argument,left> ▁in ▁. <binary_expression,left> <invocation_expression,left> ▁readByte <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁& ▁0 x 01 <binary_expression,right> <argument,right> ▁) <ERROR,right> ▁!= ▁0 <binary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁_ is 16 bit Unicode ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _3_ string ▁= <invocation_expression,left> <member_access_expression,left> ▁StringUtil ▁. ▁read Unicode LE <member_access_expression,right> <argument_list,left> ▁( <argument,left> ▁in ▁, ▁n Chars <argument,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _3_ string ▁= <invocation_expression,left> <member_access_expression,left> ▁StringUtil ▁. ▁read Compressed Unicode <member_access_expression,right> <argument_list,left> ▁( <argument,left> ▁in ▁, ▁n Chars <argument,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Public Access Urls Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Clean Command ▁clean <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Clean Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁Pack File ▁> <type_argument_list,right> <generic_name,right> ▁getPack s <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Pack List <variable_declarator,left> ▁list <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁pack List ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁list ▁== ▁NO _ PACK S <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁list ▁= <invocation_expression,left> ▁scan Pack s <argument_list,left> ▁( ▁list ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Pack File <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁pack s <equals_value_clause,left> ▁= <member_access_expression,left> ▁list ▁. ▁pack s <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁unmodifiable Collection <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁asList <member_access_expression,right> <argument_list,left> ▁( ▁pack s ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Stack D rift Detection Status Result ▁describe Stack D rift Detection Status <parameter_list,left> ▁( <parameter,left> ▁Describe Stack D rift Detection Status Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Stack D rift Detection Status <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Cloud Front Origin Access Ident ities Result ▁list Cloud Front Origin Access Ident ities <parameter_list,left> ▁( <parameter,left> ▁List Cloud Front Origin Access Ident ities Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Cloud Front Origin Access Ident ities <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁S sh SessionFactory ▁getInstance <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁INSTANCE ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Con ference Providers Result ▁list Con ference Providers <parameter_list,left> ▁( <parameter,left> ▁List Con ference Providers Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Con ference Providers <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Receipt Rule Result ▁update Receipt Rule <parameter_list,left> ▁( <parameter,left> ▁Update Receipt Rule Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Receipt Rule <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁sub filters ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁> ▁0 <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁sub filters <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁sid ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁flags ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Health Check Result ▁update Health Check <parameter_list,left> ▁( <parameter,left> ▁Update Health Check Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Health Check <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁synchronized ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁bytes <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Cached Or ds ▁or ds <variable_declaration,right> <ERROR,left> ▁: ▁. ▁( ▁) <ERROR,right> ▁) ▁{ <assignment_expression,left> ▁bytes ▁+= <invocation_expression,left> <member_access_expression,left> ▁or ds ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁bytes ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Update Work force Result ▁update Work force <parameter_list,left> ▁( <parameter,left> ▁Update Work force Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Work force <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setObject Id <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁id ▁. ▁copy Raw To <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁id Buffer <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> ▁id Offset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁byte Offset <parameter,right> ▁, <parameter,left> ▁int ▁byteCount <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Io Bridge ▁. ▁write <member_access_expression,right> <argument_list,left> ▁( ▁fd ▁, ▁buffer ▁, ▁byte Offset ▁, ▁byteCount ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁sync Metadata ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁fd ▁. ▁sync <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Block Result ▁getBlock <parameter_list,left> ▁( <parameter,left> ▁Get Block Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Block <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁export Directory <parameter_list,left> ▁( <parameter,left> ▁File ▁dir <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁export Base ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁dir ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Reserved Instances Listing Result ▁create Reserved Instances Listing <parameter_list,left> ▁( <parameter,left> ▁Create Reserved Instances Listing Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Reserved Instances Listing <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁put <parameter_list,left> ▁( <parameter,left> ▁byte ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁int ▁src Cell Row <parameter,right> ▁, <parameter,left> ▁int ▁src Cell Col <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double ▁result <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Double ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁temp <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Value Eval ▁arg <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> ▁collect Values <argument_list,left> ▁( ▁arg ▁, ▁temp ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <ERROR,right> ▁} <block,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁values <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁double <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁temp ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁values ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁temp ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁. ▁doubleValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁result ▁= <invocation_expression,left> ▁evaluate <argument_list,left> ▁( ▁values ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> <expression_statement,left> <invocation_expression,left> ▁catch <argument_list,left> ▁( <declaration_expression,left> ▁Evaluation Exception ▁e <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( ▁result ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Stop Jump server Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Directory Config Result ▁create Directory Config <parameter_list,left> ▁( <parameter,left> ▁Create Directory Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Directory Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Export Tasks Result ▁describe Export Tasks <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Export Tasks <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Export Tasks Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Export Client V pn Client Certificate Rev ocation List Result ▁export Client V pn Client Certificate Rev ocation List <parameter_list,left> ▁( <parameter,left> ▁Export Client V pn Client Certificate Rev ocation List Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Export Client V pn Client Certificate Rev ocation List <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Complete Multipart Upload Result ▁complete Multipart Upload <parameter_list,left> ▁( <parameter,left> ▁Complete Multipart Upload Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Complete Multipart Upload <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁size InBytes <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁size InBytes ▁+= <invocation_expression,left> <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁sizeOf <member_access_expression,right> <argument_list,left> ▁( ▁min Values ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size InBytes ▁+= <invocation_expression,left> <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁sizeOf <member_access_expression,right> <argument_list,left> ▁( ▁aver ages ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> <qualified_name,left> ▁Pack ed Ints ▁. ▁Reader <qualified_name,right> ▁reader <variable_declaration,right> ▁: ▁) ▁{ <assignment_expression,left> ▁size InBytes ▁+= <invocation_expression,left> <member_access_expression,left> ▁reader ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁size InBytes ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁fill <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁Object ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁array <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁put Double <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁double ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Adjustment Types Result ▁describe Adjustment Types <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Adjustment Types <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Adjustment Types Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Person Ident ▁getSource Committer <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Rev Commit <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> ▁getSource Commit <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <conditional_expression,left> <binary_expression,left> ▁c ▁!= ▁null <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁c ▁. ▁get Committer Ident <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁null <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁toArray <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁contents <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁size ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁link <equals_value_clause,left> ▁= <member_access_expression,left> ▁void Link ▁. ▁next <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> ▁link ▁!= ▁void Link <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁contents <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁index ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <member_access_expression,left> ▁link ▁. ▁data <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁link ▁= <member_access_expression,left> ▁link ▁. ▁next <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <return_statement,left> ▁return ▁contents ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> ▁name ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁version <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Push Command ▁set Ref Specs <parameter_list,left> ▁( <parameter,left> <qualified_name,left> ▁Ref Spec ▁. ▁.. ▁specs <qualified_name,right>  <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Callable <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁ref Specs <member_access_expression,right> ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁addAll <member_access_expression,right> <argument_list,left> ▁( ▁ref Specs ▁, ▁specs ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( <parameter,left> ▁String ▁field <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁match ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁field ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁end ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁X 509 Certificate <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getAccept ed Iss u ers <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁read <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁pos ▁< ▁size <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( <postfix_unary_expression,left> ▁pos ▁++ <postfix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Person Ident ▁getRef Log Ident <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁destination ▁. ▁getRef Log Ident <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public <predefined_type,left> <predefined_type,right> <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁size ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Request Valid ators Result ▁getRequest Valid ators <parameter_list,left> ▁( <parameter,left> ▁Get Request Valid ators Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Request Valid ators <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <return_statement,left> ▁return ▁true ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁obj ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁obj ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁S eg Token <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁S eg Token ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁char Array ▁, <member_access_expression,left> ▁other ▁. ▁char Array <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁endOffset ▁!= <member_access_expression,left> ▁other ▁. ▁endOffset <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁index ▁!= <member_access_expression,left> ▁other ▁. ▁index <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁startOffset ▁!= <member_access_expression,left> ▁other ▁. ▁startOffset <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁weight ▁!= <member_access_expression,left> ▁other ▁. ▁weight <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁word Type ▁!= <member_access_expression,left> ▁other ▁. ▁word Type <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁fill Fields <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁E sch er Record Factory ▁record Factory <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁read Header <argument_list,left> ▁( ▁data ▁, ▁offset ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁pos <equals_value_clause,left> ▁= <binary_expression,left> ▁offset ▁+ ▁8 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁size <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _1_ shape Id ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ flags ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁getRecord Size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getSign er Name <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁AL G OR ITH M _ NAME ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁void ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁size ▁!= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁fill <member_access_expression,right> <argument_list,left> ▁( ▁table ▁, ▁null ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁mod Count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cancel Capacity Reservation Result ▁cancel Capacity Reservation <parameter_list,left> ▁( <parameter,left> ▁Cancel Capacity Reservation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Cancel Capacity Reservation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Import Documentation Parts Result ▁import Documentation Parts <parameter_list,left> ▁( <parameter,left> ▁Import Documentation Parts Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Import Documentation Parts <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Suggest Result ▁suggest <parameter_list,left> ▁( <parameter,left> ▁Suggest Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Sugg est <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Explanation ▁explain <parameter_list,left> ▁( <parameter,left> ▁int ▁docId <parameter,right> ▁, <parameter,left> ▁String ▁field <parameter,right> ▁, <parameter,left> ▁int ▁num Payload s Seen <parameter,right> ▁, <parameter,left> ▁float ▁payload Score <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Explanation ▁. ▁match <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁doc Score <argument_list,left> ▁( ▁docId ▁, ▁field ▁, ▁num Payload s Seen ▁, ▁payload Score ▁) <argument_list,right> <invocation_expression,right> ▁, <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getSimpleName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁int ▁serialize <parameter_list,left> ▁( <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁apache <qualified_name,right> ▁. ▁poi <qualified_name,right> ▁. ▁h ss f <qualified_name,right> ▁. ▁record <qualified_name,right> ▁. ▁Record <qualified_name,right> ▁rec <variable_declaration,right> ▁: ▁) ▁{ <assignment_expression,left> ▁result ▁+= <invocation_expression,left> <member_access_expression,left> ▁rec ▁. ▁serialize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁offset ▁+ ▁result <binary_expression,right> ▁, ▁data ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁result ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ string ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁copyOf Range <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁original <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁start ▁> ▁end <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁original Length <equals_value_clause,left> ▁= <member_access_expression,left> ▁original ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁start ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁start ▁> ▁original Length <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Array IndexOutOfBounds Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result Length <equals_value_clause,left> ▁= <binary_expression,left> ▁end ▁- ▁start <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁copy Length <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁result Length ▁, <binary_expression,left> ▁original Length ▁- ▁start <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁result Length ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁original ▁, ▁start ▁, ▁result ▁, ▁0 ▁, ▁copy Length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁toByteArray <parameter_list,left> ▁( <parameter,left> ▁ByteBuffer ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁has Array <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁&& <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁array Offset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁array <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁check Byte Size Limit <argument_list,left> ▁( ▁length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁data <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁length ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁data ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁data ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁void ▁setProgress <parameter_list,left> ▁( <parameter,left> ▁int ▁progress <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setProgress <argument_list,left> ▁( ▁progress ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Cell <parameter_list,left> ▁( <parameter,left> ▁Cell Value Record Interface ▁cell <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁cell ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁row <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁cell ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁row ▁>= <member_access_expression,left> ▁records ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Cell Value Record Interface <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁row Cells <equals_value_clause,left> ▁= <element_access_expression,left> ▁records <bracketed_argument_list,left> ▁[ ▁row ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁row Cells ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁short <variable_declarator,left> ▁column <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁cell ▁. ▁getColumn <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁column ▁>= <member_access_expression,left> ▁row Cells ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁row Cells <bracketed_argument_list,left> ▁[ ▁column ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁canonical ize Path <parameter_list,left> ▁( <parameter,left> ▁String ▁path <parameter,right> ▁, <parameter,left> ▁boolean ▁discard Relative Prefix <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁segment Start <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁del etable Segments <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁<= <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int ▁next Segment Start <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁== <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁next Segment Start ▁= ▁i <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁next Segment Start ▁= <binary_expression,left> ▁i ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁i ▁== <binary_expression,left> ▁segment Start ▁+ ▁1 <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁region Matches <member_access_expression,right> <argument_list,left> ▁( ▁segment Start ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁0 ▁, ▁1 ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁path ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁segment Start ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁next Segment Start ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i ▁= ▁segment Start <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁i ▁== <binary_expression,left> ▁segment Start ▁+ ▁2 <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁region Matches <member_access_expression,right> <argument_list,left> ▁( ▁segment Start ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁0 ▁, ▁2 ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁del etable Segments ▁> ▁0 <binary_expression,right> ▁|| ▁discard Relative Prefix <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁del etable Segments ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁prev Segment Start <equals_value_clause,left> ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁lastIndexOf <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁, <binary_expression,left> ▁segment Start ▁- ▁2 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁+ ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁path ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁prev Segment Start ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁next Segment Start ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i ▁= <assignment_expression,left> ▁segment Start ▁= ▁prev Segment Start <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁segment Start ▁= ▁i <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁del etable Segments ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁segment Start ▁= ▁i <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁path ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁A post roph e FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁String ▁, ▁Ref ▁> <type_argument_list,right> <generic_name,right> ▁peek <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁packed Idx ▁< <invocation_expression,left> <member_access_expression,left> ▁packed ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁loose Idx ▁< <invocation_expression,left> <member_access_expression,left> ▁loose ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Ref <variable_declarator,left> ▁p <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁packed ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁packed Idx ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Ref <variable_declarator,left> ▁l <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁loose ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁loose Idx ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁cmp <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Ref Comparator ▁. ▁compareTo <member_access_expression,right> <argument_list,left> ▁( ▁p ▁, ▁l ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁packed Idx ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁to Entry <argument_list,left> ▁( ▁p ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁== ▁0 <binary_expression,right> ▁) <expression_statement,left> <postfix_unary_expression,left> ▁packed Idx ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁loose Idx ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁to Entry <argument_list,left> ▁( <invocation_expression,left> ▁resolve L oose <argument_list,left> ▁( ▁l ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁loose Idx ▁< <invocation_expression,left> <member_access_expression,left> ▁loose ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> ▁to Entry <argument_list,left> ▁( <invocation_expression,left> ▁resolve L oose <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁loose ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <postfix_unary_expression,left> ▁loose Idx ▁++ <postfix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁packed Idx ▁< <invocation_expression,left> <member_access_expression,left> ▁packed ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> ▁to Entry <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁packed ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <postfix_unary_expression,left> ▁packed Idx ▁++ <postfix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Environment Result ▁delete Environment <parameter_list,left> ▁( <parameter,left> ▁Delete Environment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Environment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁stem <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char ▁s <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁len <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <switch_statement,left> ▁switch ▁( <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁: <character_literal,right>  <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁[ <bracketed_argument_list,left> ▁i ▁]  <bracketed_argument_list,right> <element_access_expression,right>  <character_literal,left> ▁a ▁; <character_literal,right> <assignment_expression,right>  <expression_statement,right> <break_statement,left> ▁re ak ; ▁c <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁a se <character_literal,left> ▁ ë ▁c <character_literal,right> ▁a <case_switch_label,right> <case_switch_label,left> ▁se ▁' <character_literal,left> ▁' ▁s <character_literal,right> ▁[ <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁] <bracketed_argument_list,left>  ▁=  <bracketed_argument_list,right> <element_access_expression,right> ▁e <character_literal,left> ▁; ▁b <character_literal,right> <assignment_expression,right> ▁r <expression_statement,right> <break_statement,left> ▁ak ; ca ▁s <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁e ▁' í <character_literal,left> ▁: ▁[ <character_literal,right> ▁i <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left>  <bracketed_argument_list,left> ▁=  ▁' <bracketed_argument_list,right> <element_access_expression,right> ▁' <character_literal,left>  ▁r <character_literal,right> <assignment_expression,right> ▁e <expression_statement,right> <break_statement,left> ▁k ; cas ▁e <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁' ó ' <character_literal,left> ▁c ▁e <character_literal,right>  <case_switch_label,right> <case_switch_label,left> ▁' ő ': <character_literal,left> ▁a  <character_literal,right> ▁' <case_switch_label,right> <case_switch_label,left> ▁ õ ': c <character_literal,left> ▁s ▁' <character_literal,right> ▁ ö <case_switch_label,right> <case_switch_label,left> ▁': ▁s <character_literal,left> ▁i ▁= <character_literal,right>  <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁o <bracketed_argument_list,left> ▁' ▁;  <bracketed_argument_list,right> <element_access_expression,right> ▁r <character_literal,left> ▁a ▁; <character_literal,right> <assignment_expression,right> ▁c <expression_statement,right> <break_statement,left> ▁se ▁' ú ▁' <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁: cas <character_literal,left>  ▁' <character_literal,right> ▁: <case_switch_label,right> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁: <character_literal,right> ▁c <case_switch_label,right> <case_switch_label,left> ▁a se <character_literal,left> ▁ û ▁c <character_literal,right> ▁a <case_switch_label,right> <case_switch_label,left> ▁se ▁' <character_literal,left> ▁' ▁s <character_literal,right> ▁[ <case_switch_label,right> <case_switch_label,left> ▁i ] ▁= <character_literal,left> ▁' ▁; <character_literal,right>  <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁r <bracketed_argument_list,left> ▁e ▁a ▁k <bracketed_argument_list,right> <element_access_expression,right> ▁} <character_literal,left> ▁e  <character_literal,right> <assignment_expression,right> ▁= <expression_statement,right> <break_statement,left> ▁rem ov ▁e <break_statement,right> <switch_section,right> ▁C <switch_body,right> <switch_statement,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁a se ▁s <invocation_expression,left> ▁len ); len <argument_list,left> ▁=  ▁r ▁mov ▁e <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁P <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁o ss ▁s <invocation_expression,left> ▁i ve ( s , ▁len ); len <argument_list,left> ▁=  ▁r ▁mov ▁e <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁P <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁l ur ▁l <invocation_expression,left> ▁s , ▁len ); ret u <argument_list,left> ▁r ▁n  ▁orm ▁a <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁l <expression_statement,right> <return_statement,left> ▁i ze ( s , <invocation_expression,left> ▁len ); } <argument_list,left>      <argument_list,right> <invocation_expression,right>  <return_statement,right>  <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁addChild Before <parameter_list,left> ▁( <parameter,left> ▁E sch er Record ▁record <parameter,right> ▁, <parameter,left> ▁int ▁insertBefore Record Id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁idx <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁E sch er Record ▁rec <variable_declaration,right> ▁: ▁this ▁) ▁{ <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁rec ▁. ▁getRecord Id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <cast_expression,left> ▁( ▁short ▁) ▁insertBefore Record Id <cast_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  ▁{ ▁break <ERROR,right> ▁; ▁} <postfix_unary_expression,left> ▁idx ▁++ <postfix_unary_expression,right> ▁; ▁} <invocation_expression,left> <member_access_expression,left> ▁_ child Records ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁idx ▁, ▁record ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁List Album s Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Save Task For Upd ating Reg istr ant Info ById entity Credential Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( <ERROR,left> ▁" ▁- <ERROR,right> ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int ▁result <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁arg 0 ▁instanceof ▁Two DE val ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁result ▁= <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Two DE val ▁) ▁arg 0 <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁getHeight <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( ▁arg 0 ▁instanceof ▁Ref Eval ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁result ▁= ▁1 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( ▁result ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Reserved Instances Result ▁describe Reserved Instances <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Reserved Instances <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Reserved Instances Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Packed Git MM AP <parameter_list,left> ▁( <parameter,left> ▁boolean ▁use m map <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁packed Git MM AP ▁= ▁use m map <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁POI FS Document Path ▁( ▁) <ERROR,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁components <member_access_expression,right> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> ▁key ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁value <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁byte 0 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁byte 1 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁byte 2 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 0 ▁<< ▁12 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁<< ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 2 ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁byte 3 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁byte 4 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 2 ▁& ▁15 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁16 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 3 ▁<< ▁8 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁| ▁byte 4 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁_ ext Book Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁_ first Sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁_ last Sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Pattern Parser <tuple_pattern,left> ▁( ▁Pattern Consumer ▁consumer ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁consumer <member_access_expression,right> ▁= ▁consumer <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<ERROR,left> ▁public ▁final ▁String ▁[ <ERROR,left> ▁] <invocation_expression,left> ▁getValues <argument_list,left> ▁( <declaration_expression,left> ▁String ▁name <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right> <invocation_expression,left> <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> <assignment_expression,left> <binary_expression,left> <binary_expression,left> ▁List ▁< ▁String <binary_expression,right> ▁> ▁result <binary_expression,right> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁for <ERROR,right> <argument_list,left> ▁( <declaration_expression,left> ▁Index able Field ▁field <declaration_expression,right> <:,left> <:,right> ▁) <argument_list,right> <invocation_expression,right>  <initializer_expression,left> ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁field ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁&& <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁field ▁. ▁stringValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁null <binary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁field ▁. ▁stringValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <assignment_expression,right> ▁} <initializer_expression,right> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <initializer_expression,left> ▁{ ▁return ▁NO _ STRING S ▁; ▁} <initializer_expression,right> ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁toArray <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁String <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁List Identity Pool Usage Result ▁list Identity Pool Usage <parameter_list,left> ▁( <parameter,left> ▁List Identity Pool Usage Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Identity Pool Usage <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁int ▁src Cell Row <parameter,right> ▁, <parameter,left> ▁int ▁src Cell Col <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁< ▁1 <binary_expression,right> ▁|| <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁> ▁5 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Base Ref <variable_declarator,left> ▁base Ref <equals_value_clause,left> ▁= <invocation_expression,left> ▁evaluate Base Ref <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁row Offset <equals_value_clause,left> ▁= <ERROR,left> <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁args <array_rank_specifier,left> ▁[ ▁1 ▁] <array_rank_specifier,right> <array_type,right> ▁instanceof <parameter,right> ▁Missing Arg Eval ▁) <parameter_list,right> ▁? ▁0 ▁: <ERROR,right> <invocation_expression,left> ▁evaluate Int Arg <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁src Cell Row ▁, ▁src Cell Col ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁column Offset <equals_value_clause,left> ▁= <ERROR,left> <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁args <array_rank_specifier,left> ▁[ ▁2 ▁] <array_rank_specifier,right> <array_type,right> ▁instanceof <parameter,right> ▁Missing Arg Eval ▁) <parameter_list,right> ▁? ▁0 ▁: <ERROR,right> <invocation_expression,left> ▁evaluate Int Arg <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁2 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁src Cell Row ▁, ▁src Cell Col ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁height <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁base Ref ▁. ▁getHeight <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁width <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁base Ref ▁. ▁getWidth <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <switch_statement,left> ▁switch ▁( <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case ▁5 ▁: <case_switch_label,right> <ERROR,left> ▁if ▁( <prefix_unary_expression,left> ▁! <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁args <array_rank_specifier,left> ▁[ ▁4 ▁] <array_rank_specifier,right> <array_type,right> ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ <assignment_expression,left> ▁width ▁= <invocation_expression,left> ▁evaluate Int Arg <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁4 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁src Cell Row ▁, ▁src Cell Col ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> <prefix_unary_expression,right> <ERROR,right> <case_switch_label,left> ▁case ▁4 ▁: <case_switch_label,right> <ERROR,left> ▁if ▁( <prefix_unary_expression,left> ▁! <ERROR,left> <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁args <array_rank_specifier,left> ▁[ ▁3 ▁] <array_rank_specifier,right> <array_type,right> ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ <assignment_expression,left> ▁height ▁= <invocation_expression,left> ▁evaluate Int Arg <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁3 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁src Cell Row ▁, ▁src Cell Col ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> ▁break ▁; <ERROR,right> ▁default <prefix_unary_expression,right> ▁: <ERROR,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁height ▁== ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁width ▁== ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁REF _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Linear Offset Range <variable_declarator,left> ▁row Offset Range <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Linear Offset Range <argument_list,left> ▁( ▁row Offset ▁, ▁height ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Linear Offset Range <variable_declarator,left> ▁col Offset Range <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Linear Offset Range <argument_list,left> ▁( ▁column Offset ▁, ▁width ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁create Offset <argument_list,left> ▁( ▁base Ref ▁, ▁row Offset Range ▁, ▁col Offset Range ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getCount sBy Time <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁counts By Time ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Account Result ▁update Account <parameter_list,left> ▁( <parameter,left> ▁Update Account Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Account <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Training Job Result ▁describe Training Job <parameter_list,left> ▁( <parameter,left> ▁Describe Training Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Training Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Group Result ▁delete Group <parameter_list,left> ▁( <parameter,left> ▁Delete Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁advance <parameter_list,left> ▁( <parameter,left> ▁int ▁target <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁upto ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁upto ▁== <member_access_expression,left> ▁doc IDs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <assignment_expression,left> ▁doc ID ▁= ▁NO _ MORE _ DO CS <assignment_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁inc <equals_value_clause,left> ▁= ▁10 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁next U pto <equals_value_clause,left> ▁= <binary_expression,left> ▁upto ▁+ ▁10 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁low <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁high <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( ▁true ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁next U pto ▁>= <member_access_expression,left> ▁doc IDs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁low ▁= <binary_expression,left> ▁next U pto ▁- ▁inc <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁high ▁= <binary_expression,left> <member_access_expression,left> ▁doc IDs ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁target ▁<= <element_access_expression,left> ▁doc IDs <bracketed_argument_list,left> ▁[ ▁next U pto ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁low ▁= <binary_expression,left> ▁next U pto ▁- ▁inc <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁high ▁= ▁next U pto <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁inc ▁*= ▁2 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁next U pto ▁+= ▁inc <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <while_statement,left> ▁while ▁( ▁true ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁low ▁> ▁high <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁upto ▁= ▁low <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁mid <equals_value_clause,left> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁low ▁+ ▁high <binary_expression,right> ▁) <parenthesized_expression,right> ▁>> ▁> ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁cmp <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁doc IDs <bracketed_argument_list,left> ▁[ ▁mid ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁- ▁target <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁low ▁= <binary_expression,left> ▁mid ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁high ▁= <binary_expression,left> ▁mid ▁- ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁upto ▁= ▁mid <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <while_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁upto ▁== <member_access_expression,left> ▁doc IDs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <assignment_expression,left> ▁doc ID ▁= ▁NO _ MORE _ DO CS <assignment_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <assignment_expression,left> ▁doc ID ▁= <element_access_expression,left> ▁doc IDs <bracketed_argument_list,left> ▁[ ▁upto ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁register Listener <parameter_list,left> ▁( <parameter,left> ▁final ▁POI FS Reader Listener <parameter,right> ▁listener ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁listener ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Null PointerException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( ▁registry Closed ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁registry ▁. ▁register Listener <member_access_expression,right> <argument_list,left> ▁( ▁listener ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁int ▁minSize <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁minSize <variable_declaration,right> ▁>= ▁0 ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁minSize <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> ▁< ▁minSize <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁grow Exact <argument_list,left> ▁( ▁array ▁, <invocation_expression,left> ▁overs ize <argument_list,left> ▁( ▁minSize ▁, <member_access_expression,left> ▁Integer ▁. ▁BYTES <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <return_statement,left> ▁return ▁array ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁visit Terminal <parameter_list,left> ▁( <parameter,left> ▁Terminal Node ▁node <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁System ▁. ▁out <member_access_expression,right> ▁. ▁println <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁node ▁. ▁getSymbol <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <element_access_expression,left> <invocation_expression,left> ▁getRule Names <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <bracketed_argument_list,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁_ ctx ▁. ▁getRule Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Lat v ian St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Replication Group ▁increase Replica Count <parameter_list,left> ▁( <parameter,left> ▁In crease Replica Count Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute In crease Replica Count <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 0 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁byte 0 ▁>> ▁> ▁5 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 0 ▁>> ▁> ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁7 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 1 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 0 ▁& ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁>> ▁> ▁7 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁7 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁>> ▁> ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁7 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 2 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁& ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 2 ▁>> ▁> ▁6 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 2 ▁>> ▁> ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁7 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁byte 2 ▁& ▁7 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Hyper Parameter T uning Job Result ▁stop Hyper Parameter T uning Job <parameter_list,left> ▁( <parameter,left> ▁Stop Hyper Parameter T uning Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Hyper Parameter T uning Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Reset Network Interface Attribute Result ▁reset Network Interface Attribute <parameter_list,left> ▁( <parameter,left> ▁Reset Network Interface Attribute Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Reset Network Interface Attribute <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev Blob ▁lookup Blob <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Rev Blob <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Rev Blob ▁) <invocation_expression,left> <member_access_expression,left> ▁objects ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁id ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁c ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁c ▁= <object_creation_expression,left> ▁new ▁Rev Blob <argument_list,left> ▁( ▁id ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁objects ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁c ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Group Members h ips Result ▁list Group Members h ips <parameter_list,left> ▁( <parameter,left> ▁List Group Members h ips Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Group Members h ips <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁mkdir <parameter_list,left> ▁( <parameter,left> ▁File ▁d <parameter,right> ▁, <parameter,left> ▁boolean ▁skip Existing <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁d ▁. ▁mkdir <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁skip Existing ▁&& <invocation_expression,left> <member_access_expression,left> ▁d ▁. ▁isDirectory <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁; <return_statement,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IOException <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁mk Dir Failed <member_access_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁d ▁. ▁getAbsolutePath <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Detector Version Metadata Result ▁update Detector Version Metadata <parameter_list,left> ▁( <parameter,left> ▁Update Detector Version Metadata Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Detector Version Metadata <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁String ▁str <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁count <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁offset ▁| ▁count <binary_expression,right> ▁) <parenthesized_expression,right> ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁offset ▁> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁str ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁count <binary_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁String IndexOutOfBounds Exception <argument_list,left> ▁( ▁str ▁, ▁offset ▁, ▁count ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁buf <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁count ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁str ▁. ▁get Chars <member_access_expression,right> <argument_list,left> ▁( ▁offset ▁, <binary_expression,left> ▁offset ▁+ ▁count <binary_expression,right> ▁, ▁buf ▁, ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁write <argument_list,left> ▁( ▁buf ▁, ▁0 ▁, <member_access_expression,left> ▁buf ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁void ▁ensure Capacity <parameter_list,left> ▁( <parameter,left> ▁int ▁min <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁ensure Capacity <member_access_expression,right> <argument_list,left> ▁( ▁min ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Recipe Result ▁describe Recipe <parameter_list,left> ▁( <parameter,left> ▁Describe Recipe Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Recipe <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dis associate Route Table Result ▁dis associate Route Table <parameter_list,left> ▁( <parameter,left> ▁Dis associate Route Table Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dis associate Route Table <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Set Topic Attributes Request <tuple_pattern,left> ▁( ▁String ▁topic Arn ▁, ▁String ▁attributeName ▁, ▁String ▁attributeValue ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Topic Arn <argument_list,left> ▁( ▁topic Arn ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute Name <argument_list,left> ▁( ▁attributeName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute Value <argument_list,left> ▁( ▁attributeValue ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁int ▁minSize <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁minSize <variable_declaration,right> ▁>= ▁0 ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁minSize <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> ▁< ▁minSize <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁grow Exact <argument_list,left> ▁( ▁array ▁, <invocation_expression,left> ▁overs ize <argument_list,left> ▁( ▁minSize ▁, <member_access_expression,left> ▁Character ▁. ▁BYTES <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <return_statement,left> ▁return ▁array ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁St ash Create Command ▁set Ref <parameter_list,left> ▁( <parameter,left> ▁String ▁ref <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ref <member_access_expression,right> ▁= <ref_expression,left> ▁ref  <ref_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Formula Record <tuple_pattern,left> ▁( ▁Record InputStream ▁ris ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁ris ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁value Long Bits <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁ris ▁. ▁readLong <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 5_ options ▁= <invocation_expression,left> <member_access_expression,left> ▁ris ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁special Cached Value ▁= <invocation_expression,left> <member_access_expression,left> ▁Formula Special Cached Value ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁value Long Bits ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁special Cached Value ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _4_ value ▁= <invocation_expression,left> <member_access_expression,left> ▁Double ▁. ▁long Bits To Double <member_access_expression,right> <argument_list,left> ▁( ▁value Long Bits ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 6_ zero ▁= <invocation_expression,left> <member_access_expression,left> ▁ris ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁field _7 _ expression _ len <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁ris ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n Bytes Available <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁ris ▁. ▁available <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _8 _ parsed _ expr ▁= <invocation_expression,left> <member_access_expression,left> ▁Formula ▁. ▁read <member_access_expression,right> <argument_list,left> ▁( ▁field _7 _ expression _ len ▁, ▁ris ▁, ▁n Bytes Available ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Syn onym Query ▁build <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁sort <member_access_expression,right> <argument_list,left> ▁( ▁terms ▁, <invocation_expression,left> <member_access_expression,left> ▁Comparator ▁. ▁comparing <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <member_access_expression,left> ▁a ▁-> ▁a <member_access_expression,right> ▁. ▁term <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Syn onym Query <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁toArray <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁Term And Boost <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁, ▁field ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Password Rev 4 Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ password ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁isReadOnly <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁preceding <parameter_list,left> ▁( <parameter,left> ▁int ▁pos <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁pos ▁< ▁start <binary_expression,right> ▁|| <binary_expression,left> ▁pos ▁> ▁end <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁pos ▁== ▁start <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current ▁= ▁start <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁DONE ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁first <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Code page Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ code page ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Appro ve Assignment Result ▁approve Assignment <parameter_list,left> ▁( <parameter,left> ▁Appro ve Assignment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Appro ve Assignment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe V pn Connections Result ▁describe V pn Connections <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe V pn Connections <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe V pn Connections Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁V ▁next <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> <invocation_expression,left> ▁next Entry <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁value <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Instance Health Result ▁describe Instance Health <parameter_list,left> ▁( <parameter,left> ▁Describe Instance Health Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Instance Health <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁register <parameter_list,left> ▁( <parameter,left> ▁Transport Protocol ▁proto <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁protocols ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, <object_creation_expression,left> ▁new <generic_name,left> ▁WeakReference <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁proto ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁copyOf Range <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁original <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁start ▁> ▁end <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁original Length <equals_value_clause,left> ▁= <member_access_expression,left> ▁original ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁start ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁start ▁> ▁original Length <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Array IndexOutOfBounds Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result Length <equals_value_clause,left> ▁= <binary_expression,left> ▁end ▁- ▁start <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁copy Length <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁result Length ▁, <binary_expression,left> ▁original Length ▁- ▁start <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁result Length ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁original ▁, ▁start ▁, ▁result ▁, ▁0 ▁, ▁copy Length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁fill <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁int ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁array <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> <nullable_type,left> ▁Class ▁< ▁? <nullable_type,right> ▁extends <variable_declaration,right>  <local_declaration_statement,right> <binary_expression,left> ▁Record ▁> <invocation_expression,left> ▁peek Next Class <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁hasNext <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <initializer_expression,left> ▁{ ▁return ▁null ▁; ▁} <initializer_expression,right> <return,left> <return,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁_ next Index ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> <binary_expression,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁copyOf <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁original <parameter,right> ▁, <parameter,left> ▁int ▁newLength <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁newLength ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Negative Array Size Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁copyOf Range <argument_list,left> ▁( ▁original ▁, ▁0 ▁, ▁newLength ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Rel ational Database Result ▁delete Rel ational Database <parameter_list,left> ▁( <parameter,left> ▁Delete Rel ational Database Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Rel ational Database <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁obj ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁obj ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Weight ed Phrase Info <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Weight ed Phrase Info ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getStartOffset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁other ▁. ▁getStartOffset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getEndOffset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁other ▁. ▁getEndOffset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getB oost <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁other ▁. ▁getB oost <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁hasNext <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁next Block ▁!= <member_access_expression,left> ▁POI FS Constants ▁. ▁END _ OF _ CH AIN <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁char ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁len ▁>= <member_access_expression,left> ▁buf ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁resize <argument_list,left> ▁( <binary_expression,left> ▁len ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁unsafe Write <argument_list,left> ▁( ▁b ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁future Header ▁. ▁serialize <qualified_name,right> <tuple_pattern,left> ▁( ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁is f _ shared Feature Type ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( ▁reserved ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeInt <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁int ▁) ▁cb H dr Data <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁write <member_access_expression,right> <argument_list,left> ▁( ▁rgb H dr Data ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List User Hierarchy Groups Result ▁list User Hierarchy Groups <parameter_list,left> ▁( <parameter,left> ▁List User Hierarchy Groups Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List User Hierarchy Groups <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Get Topic Attributes Request <tuple_pattern,left> ▁( ▁String ▁topic Arn ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Topic Arn <argument_list,left> ▁( ▁topic Arn ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Traffic Policy Version Result ▁create Traffic Policy Version <parameter_list,left> ▁( <parameter,left> ▁Create Traffic Policy Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Traffic Policy Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁this <ERROR,left> ▁== ▁object <ERROR,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <member_access_expression,left> ▁object ▁instanceof ▁Map ▁. ▁Entry <member_access_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁Map ▁. <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁? ▁, ▁? ▁> <type_argument_list,right> <generic_name,right> <member_access_expression,right> ▁entry ▁= <parenthesized_expression,left> ▁( <member_access_expression,left> ▁Map ▁. <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁? ▁, ▁? ▁> <type_argument_list,right> <generic_name,right> <member_access_expression,right> ▁) <parenthesized_expression,right> <assignment_expression,right> ▁object ▁; <expression_statement,right> <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> ▁key ▁== ▁null <binary_expression,right> ▁? <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getKey <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁: <invocation_expression,left> <member_access_expression,left> ▁key ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getKey <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁) <parenthesized_expression,right> ▁&& <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> ▁value ▁== ▁null <binary_expression,right> ▁? <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁: <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List Resources Result ▁list Resources <parameter_list,left> ▁( <parameter,left> ▁List Resources Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Resources <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁V ▁get AndSet <parameter_list,left> ▁( <parameter,left> ▁V ▁newValue <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <while_statement,left> ▁while ▁( ▁true ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁V <variable_declarator,left> ▁x <equals_value_clause,left> ▁= <invocation_expression,left> ▁get <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁compareAndSet <argument_list,left> ▁( ▁x ▁, ▁newValue ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return ▁x ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁F eat H dr Record <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁future Header  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁F tr Header <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁future Header ▁. ▁set Record Type <member_access_expression,right> <argument_list,left> ▁( ▁sid ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Dis associate Phone Numbers From Voice Connector Result ▁dis associate Phone Numbers From Voice Connector <parameter_list,left> ▁( <parameter,left> ▁Dis associate Phone Numbers From Voice Connector Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dis associate Phone Numbers From Voice Connector <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ObjectId ▁id For <parameter_list,left> ▁( <parameter,left> ▁int ▁type <parameter,right> ▁, <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁id For <argument_list,left> ▁( ▁type ▁, ▁data ▁, ▁0 ▁, <member_access_expression,left> ▁data ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Parse Listener <parameter_list,left> ▁( <parameter,left> ▁ParseTree Listener ▁listener <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ parse Listeners ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁_ parse Listeners ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁listener ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁_ parse Listeners ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ parse Listeners ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Axis Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ axis Type ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ reserved 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _3_ reserved 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _4_ reserved 3 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 5_ reserved 4 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁) <parameter_list,right> ▁throws ▁Evaluation Exception <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁< ▁2 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Evaluation Exception <argument_list,left> ▁( <member_access_expression,left> ▁Error Eval ▁. ▁NA <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁counts <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁fill <member_access_expression,right> <argument_list,left> ▁( ▁counts ▁, ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> ▁, <variable_declarator,left> ▁i Size <equals_value_clause,left> ▁= <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁i Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= <binary_expression,left> ▁i ▁+ ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> ▁, <variable_declarator,left> ▁j Size <equals_value_clause,left> ▁= <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< ▁j Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁j ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <expression_statement,left> <postfix_unary_expression,left> <element_access_expression,left> ▁counts <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <for_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁max v <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁max c <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> ▁, <variable_declarator,left> ▁i Size <equals_value_clause,left> ▁= <member_access_expression,left> ▁counts ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁i Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁counts <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁> ▁max c <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁max v ▁= <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁max c ▁= <element_access_expression,left> ▁counts <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁max c ▁> ▁1 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁max v ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Evaluation Exception <argument_list,left> ▁( <member_access_expression,left> ▁Error Eval ▁. ▁NA <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add Facet Count <parameter_list,left> ▁( <parameter,left> ▁BytesRef ▁facet Value <parameter,right> ▁, <parameter,left> ▁int ▁count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁< ▁current Min <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Facet Entry <variable_declarator,left> ▁facet Entry <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Facet Entry <argument_list,left> ▁( ▁facet Value ▁, ▁count ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁maxSize <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁higher <member_access_expression,right> <argument_list,left> ▁( ▁facet Entry ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁poll Last <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁facet Entry ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁maxSize <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current Min ▁= <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁facet Entries ▁. ▁last <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁count <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁nl <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁getProperty <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁nl <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( ▁reserved ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁nl ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁nl <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getMode <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Char Vector <tuple_pattern,left> ▁( ▁int ▁capacity ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁capacity ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁blockSize ▁= ▁capacity <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁blockSize ▁= ▁DEFAULT _ BLOCK _ SIZE <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁array ▁= <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁blockSize ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁n ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Account Limits Result ▁describe Account Limits <parameter_list,left> ▁( <parameter,left> ▁Describe Account Limits Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Account Limits <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Builtin Record <parameter_list,left> ▁( <parameter,left> ▁byte ▁name <parameter,right> ▁, <parameter,left> ▁int ▁sheet Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁link Table ▁. ▁remove Builtin Record <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create SecurityGroup Result ▁create SecurityGroup <parameter_list,left> ▁( <parameter,left> ▁Create SecurityGroup Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create SecurityGroup <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁other <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁same Class As <argument_list,left> ▁( ▁other ▁) <argument_list,right> <invocation_expression,right> ▁&& <invocation_expression,left> ▁equals To <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁cast <member_access_expression,right> <argument_list,left> ▁( ▁other ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Object Information Result ▁getObject Information <parameter_list,left> ▁( <parameter,left> ▁Get Object Information Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Object Information <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuffer ▁append <parameter_list,left> ▁( <parameter,left> ▁long ▁l <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Integral ToString ▁. ▁append Long <member_access_expression,right> <argument_list,left> ▁( ▁this ▁, ▁l ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Integration Responses Result ▁getInt eg ration Responses <parameter_list,left> ▁( <parameter,left> ▁Get Integration Responses Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Integration Responses <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Deployment Configs Result ▁list Deployment Configs <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁list Deployment Configs <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁List Deployment Configs Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cell Range Address ▁remove <parameter_list,left> ▁( <parameter,left> ▁int ▁range Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁range Index ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁range Index ▁>= <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁range Index <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁range Index ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dim Config ▁getD im Config <parameter_list,left> ▁( <parameter,left> ▁String ▁dim Name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Dim Config <variable_declarator,left> ▁ft <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁field Types ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁dim Name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁ft ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ft ▁= <invocation_expression,left> ▁getDefault Dim Config <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁ft ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Stack Resource D rift s Result ▁describe Stack Resource D rift s <parameter_list,left> ▁( <parameter,left> ▁Describe Stack Resource D rift s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Stack Resource D rift s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Params <parameter_list,left> ▁( <parameter,left> ▁String ▁params <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁supports Params <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁params <member_access_expression,right> ▁= ▁params <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Repository Association Result ▁describe Repository Association <parameter_list,left> ▁( <parameter,left> ▁Describe Repository Association Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Repository Association <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁Enumeration <type_parameter_list,left> ▁< ▁V ▁> <type_parameter_list,right> ▁elements <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Value Enumeration <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁>> ▁> ▁4 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁& ▁15 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁<< ▁2 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& <prefix_unary_expression,left> ▁~ <parenthesized_expression,left> ▁( <binary_expression,left> ▁15 L ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁value ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁HTML Strip Char FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁escaped Tags ▁= <invocation_expression,left> ▁getSet <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁getEntry Path Length <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁path Len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ option _ flag ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _2_ ix als ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _3_ not _ used ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁field _4_ name ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁write Unicode String Flag AndData <qualified_name,right> <tuple_pattern,left> ▁( ▁out ▁, ▁field _4_ name ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁is O LE Link <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁&& <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁is Std Document Name Identifier <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> ▁is Autom atic Link <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ dd e Values ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁_ n Columns ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁_ n Rows ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁Constant Value Parser ▁. ▁encode <qualified_name,right> <tuple_pattern,left> ▁( ▁out ▁, ▁_ dd e Values ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁field _ 5_ name _ definition ▁. ▁serialize <qualified_name,right> <tuple_pattern,left> ▁( ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Continue Deployment Result ▁continue Deployment <parameter_list,left> ▁( <parameter,left> ▁Continue Deployment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Continue Deployment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁/ ▁3 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁% ▁3 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁* ▁21 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& <prefix_unary_expression,left> ▁~ <parenthesized_expression,left> ▁( <binary_expression,left> ▁20 97 15 1 L ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁value ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁next <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁ord ▁== ▁value Count <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁EOFException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁off ▁== ▁blockSize <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁ref ill <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁value <equals_value_clause,left> ▁= <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁off ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <prefix_unary_expression,left> ▁++ ▁ord <prefix_unary_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁value ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁Rev Filter ▁between <parameter_list,left> ▁( <parameter,left> ▁Date ▁since <parameter,right> ▁, <parameter,left> ▁Date ▁until <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁between <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁since ▁. ▁getTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁until ▁. ▁getTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Vault Result ▁delete Vault <parameter_list,left> ▁( <parameter,left> ▁Delete Vault Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Vault <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁it ▁= <invocation_expression,left> <member_access_expression,left> ▁cached States ▁. ▁get States <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Det aching Sy mbolic Ref <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁det aching Sy mbolic Ref ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify Identity Id Format Result ▁modify Identity Id Format <parameter_list,left> ▁( <parameter,left> ▁Modify Identity Id Format Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Identity Id Format <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add Exception <parameter_list,left> ▁( <parameter,left> ▁String ▁word <parameter,right> ▁, <parameter,left> <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁Object ▁> <type_argument_list,right> <generic_name,right> ▁hyphen ated word <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sto plist ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁word ▁, ▁hyphen ated word ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁G reek St em FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Register Type Result ▁register Type <parameter_list,left> ▁( <parameter,left> ▁Register Type Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Register Type <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get AccessControl Effect Result ▁getAccess Control Effect <parameter_list,left> ▁( <parameter,left> ▁Get AccessControl Effect Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get AccessControl Effect <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁H SSF Shape Group ▁create Group <parameter_list,left> ▁( <parameter,left> ▁H SSF Child Anchor ▁anchor <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁H SSF Shape Group <variable_declarator,left> ▁group <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁H SSF Shape Group <argument_list,left> ▁( ▁this ▁, ▁anchor ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁group ▁. ▁setParent <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁group ▁. ▁set Anchor <member_access_expression,right> <argument_list,left> ▁( ▁anchor ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shapes ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁group ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁onCreate <argument_list,left> ▁( ▁group ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁group ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to External String <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁append San itized <argument_list,left> ▁( ▁r ▁, <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁append San itized <argument_list,left> ▁( ▁r ▁, <invocation_expression,left> ▁getEmail Address <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁when ▁/ ▁1000 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁append Time zone <argument_list,left> ▁( ▁r ▁, ▁tz Offset ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Font Charset ▁valueOf <parameter_list,left> ▁( <parameter,left> ▁int ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁value ▁>= <member_access_expression,left> ▁_ table ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁null ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁_ table <bracketed_argument_list,left> ▁[ ▁value ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁NL PS ent ence Detector Op <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁sentence Splitter  <tuple_pattern,right> <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁resource <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁resource <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Query Sc orer <tuple_pattern,left> ▁( ▁Query ▁query ▁, ▁String ▁field ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁init <argument_list,left> ▁( ▁query ▁, ▁field ▁, ▁null ▁, ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Active Trusted Sign ers <tuple_pattern,left> ▁( java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Items <argument_list,left> ▁( ▁items ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁format Reference AsString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Node group Config Result ▁update Node group Config <parameter_list,left> ▁( <parameter,left> ▁Update Node group Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Node group Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁fill <parameter_list,left> ▁( <parameter,left> ▁int ▁fromIndex <parameter,right> ▁, <parameter,left> ▁int ▁toIndex <parameter,right> ▁, <parameter,left> ▁long ▁val <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_function_statement,left> ▁assert ▁val <<=,left> <<=,right> <parameter_list,left> ▁( ▁getB its Per Value <ERROR,left> ▁( ▁) <ERROR,right> ▁) <parameter_list,right> ▁; <local_function_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁fromIndex <variable_declaration,right> <<=,left> <<=,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁fromIndex <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁toIndex <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set <argument_list,left> ▁( ▁i ▁, ▁val ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Training Jobs Result ▁list Training Jobs <parameter_list,left> ▁( <parameter,left> ▁List Training Jobs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Training Jobs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Pro filing Group Result ▁describe Pro filing Group <parameter_list,left> ▁( <parameter,left> ▁Describe Pro filing Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Pro filing Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ignore Node <tuple_pattern,left> ▁( ▁List <ERROR,left> ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁rules <member_access_expression,right> ▁= ▁rules <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁fill <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁char ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁array <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Trans it Gateway Multicast Domain Assoc iations Result ▁getTrans it Gateway Multicast Domain Assoc iations <parameter_list,left> ▁( <parameter,left> ▁Get Trans it Gateway Multicast Domain Assoc iations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Trans it Gateway Multicast Domain Assoc iations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Long Buffer ▁compact <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁backing Array ▁, <binary_expression,left> ▁position ▁+ ▁offset <binary_expression,right> ▁, ▁backing Array ▁, ▁offset ▁, <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁position ▁= <binary_expression,left> ▁limit ▁- ▁position <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁limit ▁= ▁capacity <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁mark ▁= ▁UN SET _ MARK <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get C el eb rity Info Result ▁getC el eb rity Info <parameter_list,left> ▁( <parameter,left> ▁Get C el eb rity Info Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get C el eb rity Info <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Trans cript Result ▁getTrans cript <parameter_list,left> ▁( <parameter,left> ▁Get Trans cript Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Trans cript <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Cache Parameter Group Result ▁delete Cache Parameter Group <parameter_list,left> ▁( <parameter,left> ▁Delete Cache Parameter Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Cache Parameter Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Describe Tags Request <tuple_pattern,left> ▁( java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Filters <argument_list,left> ▁( ▁filters ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Custom Metadata Result ▁create Custom Metadata <parameter_list,left> ▁( <parameter,left> ▁Create Custom Metadata Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Custom Metadata <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cluster ▁resume Cluster <parameter_list,left> ▁( <parameter,left> ▁Res ume Cluster Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Resume Cluster <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe M oving Addresses Result ▁describe M oving Addresses <parameter_list,left> ▁( <parameter,left> ▁Describe M oving Addresses Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe M oving Addresses <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Search Address Books Result ▁search Address Books <parameter_list,left> ▁( <parameter,left> ▁Search Address Books Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Search Address Books <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Update Domain To Domain Group Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁add <parameter_list,left> ▁( <parameter,left> ▁Rev Commit ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Block <variable_declarator,left> ▁b <equals_value_clause,left> ▁= ▁tail <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁b ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁b ▁= <invocation_expression,left> <member_access_expression,left> ▁free ▁. ▁new Block <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁head ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tail ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁is Full <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁b ▁= <invocation_expression,left> <member_access_expression,left> ▁free ▁. ▁new Block <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁tail ▁. ▁next <member_access_expression,right> ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tail ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Float Buffer ▁put <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁float ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁put Float <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁index ▁* <member_access_expression,left> ▁Size Of ▁. ▁FLOAT <member_access_expression,right> <binary_expression,right> ▁, ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁flush <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁begin Write <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁dst ▁. ▁flush <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Interrupted IOException ▁e ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <invocation_expression,left> ▁write Timed Out <argument_list,left> ▁( ▁e ▁) <argument_list,right> <invocation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <finally_clause,left> ▁finally <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁end Write <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁get Modified <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁unmodifiable Set <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Modified <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁L ongs Ref ▁next <parameter_list,left> ▁( <parameter,left> ▁int ▁count <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁count <variable_declaration,right> <ERROR,left> ▁> ▁0 <ERROR,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁ord ▁== ▁value Count <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁EOFException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁off ▁== ▁blockSize <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁ref ill <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁count ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁count ▁, <binary_expression,left> ▁blockSize ▁- ▁off <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁count ▁= <cast_expression,left> ▁( ▁int ▁) <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁count ▁, <binary_expression,left> ▁value Count ▁- ▁ord <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁values Ref ▁. ▁offset <member_access_expression,right> ▁= ▁off <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁values Ref ▁. ▁length <member_access_expression,right> ▁= ▁count <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁off ▁+= ▁count <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ord ▁+= ▁count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁values Ref ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁slice <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁ReadOnly Heap ByteBuffer <argument_list,left> ▁( ▁backing Array ▁, <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁isEmpty <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> ▁begin A ▁== ▁end A <binary_expression,right> ▁&& <binary_expression,left> ▁begin B ▁== ▁end B <binary_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁int ▁commit Message <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁ptr <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁sz <equals_value_clause,left> ▁= <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁ptr ▁== ▁0 <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= ▁46 <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <binary_expression,left> ▁ptr ▁< ▁sz <binary_expression,right> ▁&& <binary_expression,left> <element_access_expression,left> ▁b <bracketed_argument_list,left> ▁[ ▁ptr ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= ▁48 <assignment_expression,right> ▁; <expression_statement,right> <while_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁tag Message <argument_list,left> ▁( ▁b ▁, ▁ptr ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁Operation Evaluation Context ▁ec <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁!= ▁2 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁startDate As Number <equals_value_clause,left> ▁= <invocation_expression,left> ▁getValue <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁offset In Month As Number <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁int ▁) <invocation_expression,left> ▁getValue <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Date <variable_declarator,left> ▁startDate <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Date Util ▁. ▁getJava Date <member_access_expression,right> <argument_list,left> ▁( ▁startDate As Number ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁startDate ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Calendar <variable_declarator,left> ▁calendar <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Locale Util ▁. ▁getLocale Calendar <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁calendar ▁. ▁setTime <member_access_expression,right> <argument_list,left> ▁( ▁startDate ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁calendar ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Calendar ▁. ▁MONTH <member_access_expression,right> ▁, ▁offset In Month As Number ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Date Util ▁. ▁getEx cel Date <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁calendar ▁. ▁getTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Sugg ester Result ▁delete Sugg ester <parameter_list,left> ▁( <parameter,left> ▁Delete Sugg ester Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Sugg ester <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Pipeline Result ▁create Pipeline <parameter_list,left> ▁( <parameter,left> ▁Create Pipeline Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Pipeline <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Delivery Stream Encryption Result ▁stop Delivery Stream Encryption <parameter_list,left> ▁( <parameter,left> ▁Stop Delivery Stream Encryption Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Delivery Stream Encryption <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Application Snapshot Result ▁delete Application Snapshot <parameter_list,left> ▁( <parameter,left> ▁Delete Application Snapshot Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Application Snapshot <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Apply Command ▁apply <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Apply Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Reb oot Cache Cluster Request <tuple_pattern,left> ▁( ▁String ▁cache Cluster Id ▁, java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setCache Cluster Id <argument_list,left> ▁( ▁cache Cluster Id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setCache Node Ids To Reb oot <argument_list,left> ▁( ▁cache Node Ids To Reb oot ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Modify Cache Cluster Request <tuple_pattern,left> ▁( ▁String ▁cache Cluster Id ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setCache Cluster Id <argument_list,left> ▁( ▁cache Cluster Id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <return_statement,left> ▁return ▁true ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁obj ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁obj ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Score Term <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Score Term ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁term ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁other ▁. ▁term <member_access_expression,right> ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁term ▁. ▁bytes Equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁other ▁. ▁term <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Trans it Gateway Multicast Domain Result ▁associate Trans it Gateway Multicast Domain <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Trans it Gateway Multicast Domain Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Trans it Gateway Multicast Domain <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Contact Result ▁update Contact <parameter_list,left> ▁( <parameter,left> ▁Update Contact Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Contact <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Table Record <tuple_pattern,left> ▁( ▁Cell Range Address 8 Bit ▁range ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁range ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 6_ res ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Processing Job Result ▁create Processing Job <parameter_list,left> ▁( <parameter,left> ▁Create Processing Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Processing Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁CharSequence ▁sub Sequence <parameter_list,left> ▁( <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Start End Remaining <argument_list,left> ▁( ▁start ▁, ▁end ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁CharSequence Adapter <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁result ▁. ▁position <member_access_expression,right> ▁= <binary_expression,left> ▁position ▁+ ▁start <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁result ▁. ▁limit <member_access_expression,right> ▁= <binary_expression,left> ▁position ▁+ ▁end <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Co ip Pool Usage Result ▁getCo ip Pool Usage <parameter_list,left> ▁( <parameter,left> ▁Get Co ip Pool Usage Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Co ip Pool Usage <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Resolver Endpoint Result ▁update Resolver Endpoint <parameter_list,left> ▁( <parameter,left> ▁Update Resolver Endpoint Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Resolver Endpoint <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Value Eval ▁ve Text <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ve Text ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁getSingle Value <member_access_expression,right> <argument_list,left> ▁( ▁arg 0 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁str Text <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁coerce Value ToString <member_access_expression,right> <argument_list,left> ▁( ▁ve Text ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Double <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁convert Text To Number <argument_list,left> ▁( ▁str Text ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁result ▁== ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁result ▁= <invocation_expression,left> ▁parse DateTime <argument_list,left> ▁( ▁str Text ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁result ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁doubleValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁add External Name <parameter_list,left> ▁( <parameter,left> ▁External Name Record ▁rec <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁External Name Record <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁tmp <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁External Name Record <array_rank_specifier,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁_ external Name Records ▁. ▁length <member_access_expression,right> ▁+ ▁1 <binary_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁_ external Name Records ▁, ▁0 ▁, ▁tmp ▁, ▁0 ▁, <member_access_expression,left> ▁_ external Name Records ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁tmp <bracketed_argument_list,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁tmp ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁rec <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ external Name Records ▁= ▁tmp <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <binary_expression,left> <member_access_expression,left> ▁_ external Name Records ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Principal Id Format Result ▁describe Principal Id Format <parameter_list,left> ▁( <parameter,left> ▁Describe Principal Id Format Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Principal Id Format <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Partner Event Source Accounts Result ▁list Partner Event Source Accounts <parameter_list,left> ▁( <parameter,left> ▁List Partner Event Source Accounts Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Partner Event Source Accounts <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁File ▁getFile <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁file ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁onChanged <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁mSelected Ids ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁choose List ToShow <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁ensure Some Group Is Expanded <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getText AsString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁text <member_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁else <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁text <member_access_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Long Buffer ▁put <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁src Offset <parameter,right> ▁, <parameter,left> ▁int ▁long Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁src ▁. ▁length <member_access_expression,right> ▁, ▁src Offset ▁, ▁long Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁long Count ▁> <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Overflow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁src Offset <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <binary_expression,left> ▁src Offset ▁+ ▁long Count <binary_expression,right> <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁put <argument_list,left> ▁( <element_access_expression,left> ▁src <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁remove <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( <member_access_expression,left> ▁Copy OnWrite ArrayList ▁. ▁this <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= <invocation_expression,left> ▁indexOf <argument_list,left> ▁( ▁object ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁index ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁remove <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁long ▁length <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁on Disk File ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁on Disk File ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Field Boost Map FC Listener <tuple_pattern,left> ▁( ▁Query Config Handler ▁config ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁config <member_access_expression,right> ▁= ▁config <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Start Activity Stream Result ▁startActivity Stream <parameter_list,left> ▁( <parameter,left> ▁Start Activity Stream Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start Activity Stream <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Hy phen ation ▁hyphen ate <parameter_list,left> ▁( <parameter,left> ▁String ▁word <parameter,right> ▁, <parameter,left> ▁int ▁remain Char Count <parameter,right> ▁, <parameter,left> ▁int ▁push Char Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁w <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁word ▁. ▁toCharArray <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁hyphen ate <argument_list,left> ▁( ▁w ▁, ▁0 ▁, <member_access_expression,left> ▁w ▁. ▁length <member_access_expression,right> ▁, ▁remain Char Count ▁, ▁push Char Count ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Sms Template Result ▁create Sms Template <parameter_list,left> ▁( <parameter,left> ▁Create Sms Template Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Sms Template <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n <equals_value_clause,left> ▁= ▁m Size <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁values <equals_value_clause,left> ▁= ▁m Values <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁n <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Size ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m G arbage ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString Tree <parameter_list,left> ▁( <parameter,left> ▁Parser ▁parser <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁toString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁>> ▁> ▁2 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁& ▁3 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁<< ▁4 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁>> ▁> ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁65535 L <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getType <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getOld Id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getNew Id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getRef Name <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁text <parameter,right> ▁, <parameter,left> ▁Value Eval ▁number _ times <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Value Eval ▁ve Text 1 <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ve Text 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁getSingle Value <member_access_expression,right> <argument_list,left> ▁( ▁text ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁str Text 1 <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁coerce Value ToString <member_access_expression,right> <argument_list,left> ▁( ▁ve Text 1 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁numberOf Time <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁numberOf Time ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁coerce Value To Double <member_access_expression,right> <argument_list,left> ▁( ▁number _ times ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁numberOf Time Int <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁int ▁) ▁numberOf Time <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁str b <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁str Text 1 ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁* ▁numberOf Time Int <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁numberOf Time Int <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁str b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁str Text 1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁str b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁327 67 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁String Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁str b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁K ▁, ▁V ▁> <type_argument_list,right> <generic_name,right> ▁last Entry <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁immutable Copy <argument_list,left> ▁( <invocation_expression,left> ▁endpoint <argument_list,left> ▁( ▁false ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Evaluation Result ▁delete Evaluation <parameter_list,left> ▁( <parameter,left> ▁Delete Evaluation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Evaluation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Continue Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ data ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read Rem ainder <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Filter Result ▁create Filter <parameter_list,left> ▁( <parameter,left> ▁Create Filter Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Filter <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁CharSequence ▁sub Sequence <parameter_list,left> ▁( <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Start End Remaining <argument_list,left> ▁( ▁start ▁, ▁end ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁CharBuffer <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁duplicate <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁limit <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁+ ▁end <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁+ ▁start <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Traffic Mirror Session Result ▁create Traffic Mirror Session <parameter_list,left> ▁( <parameter,left> ▁Create Traffic Mirror Session Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Traffic Mirror Session <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Node group Result ▁createNode group <parameter_list,left> ▁( <parameter,left> ▁Create Node group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Node group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁S or an i St em Filter ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁S or an i St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Custom Verification Email Template Result ▁update Custom Verification Email Template <parameter_list,left> ▁( <parameter,left> ▁Update Custom Verification Email Template Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Custom Verification Email Template <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Formula Error ▁for Int <parameter_list,left> ▁( <parameter,left> ▁int ▁type <parameter,right> ▁) <parameter_list,right> ▁throws ▁IllegalArgument Exception <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Formula Error <variable_declarator,left> ▁err <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁imap ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁type ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁err ▁== ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁err ▁= <invocation_expression,left> <member_access_expression,left> ▁b map ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁byte ▁) ▁type <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁err ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁type <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return ▁err ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Subnet Group Result ▁delete Subnet Group <parameter_list,left> ▁( <parameter,left> ▁Delete Subnet Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Subnet Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁_ error ▁. ▁getString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Object ▁to Object <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁exists <variable_declaration,right> ▁|| <ERROR,right> <expression_statement,left> <binary_expression,left> ▁0.0 D ▁== ▁value <binary_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <conditional_expression,left> ▁exists ▁? ▁value ▁: ▁null <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁destroy <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁destroy <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁on Disk File ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁on Disk File ▁. ▁delete <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁on Disk File ▁. ▁deleteOnExit <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁on Disk File ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dec rease Replication Factor Result ▁decrease Replication Factor <parameter_list,left> ▁( <parameter,left> ▁Dec rease Replication Factor Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dec rease Replication Factor <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Count a <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁_ predicate  <tuple_pattern,right> <equals_value_clause,left> ▁= ▁default Predicate <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Evaluation Workbook ▁get Workbook <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁_ work book ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Route Tables Result ▁describe Route Tables <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Route Tables <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Route Tables Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Assessment Template Result ▁create Assessment Template <parameter_list,left> ▁( <parameter,left> ▁Create Assessment Template Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Assessment Template <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Project Result ▁delete Project <parameter_list,left> ▁( <parameter,left> ▁Delete Project Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Project <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete User Policy Request <tuple_pattern,left> ▁( ▁String ▁userName ▁, ▁String ▁policy Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set UserName <argument_list,left> ▁( ▁userName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Policy Name <argument_list,left> ▁( ▁policy Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Term Vectors Reader ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Comp ress ing Term Vectors Reader <argument_list,left> ▁( ▁this ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁close <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁sock ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sch ▁. ▁release Session <member_access_expression,right> <argument_list,left> ▁( ▁sock ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁sock ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Long Buffer ▁put <parameter_list,left> ▁( <parameter,left> ▁long ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁serialize <parameter_list,left> ▁( <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁LOG ▁. ▁log <member_access_expression,right> <argument_list,left> ▁( ▁DEBUG ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁pos <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁S ST Record <variable_declarator,left> ▁l S ST <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁sst Pos <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁wrote Bound Sh eets <equals_value_clause,left> ▁= ▁false <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁apache <qualified_name,right> ▁. ▁poi <qualified_name,right> ▁. ▁h ss f <qualified_name,right> ▁. ▁record <qualified_name,right> ▁. ▁Record <qualified_name,right> ▁record <variable_declaration,right> <ERROR,left> ▁: ▁. ▁( ▁) <ERROR,right> ▁) ▁{ <ERROR,right> <variable_declaration,left> ▁int <variable_declarator,left> ▁len <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <declaration_expression,left> ▁record ▁instanceof <declaration_expression,right> ▁S ST Record ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁= <cast_expression,left> ▁( ▁S ST Record ▁) ▁record <cast_expression,right> <assignment_expression,right> ▁; <invocation_expression,left> <member_access_expression,left> <assignment_expression,left> <assignment_expression,left> <assignment_expression,left> <invocation_expression,left> <assignment_expression,left> ▁sst Pos ▁= ▁pos <assignment_expression,right> <ERROR,left> ▁; ▁} ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁record ▁. ▁getS id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <member_access_expression,left> ▁Ext S ST Record ▁. ▁sid <member_access_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁l S ST ▁!= ▁null <binary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <assignment_expression,left> <invocation_expression,left> <initializer_expression,left> ▁{ <assignment_expression,left> ▁record ▁= <invocation_expression,left> <member_access_expression,left> ▁l S ST ▁. ▁create Ext S ST Record <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁sst Pos ▁+ ▁offset <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> ▁if <argument_list,left> ▁( <declaration_expression,left> ▁record ▁instanceof <declaration_expression,right> ▁Bound Sheet Record ▁) <argument_list,right> <invocation_expression,right>  <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <prefix_unary_expression,left> ▁! ▁wrote Bound Sh eets <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <assignment_expression,left> <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> ▁for <argument_list,left> ▁( <declaration_expression,left> ▁Bound Sheet Record ▁bs r <declaration_expression,right> <:,left> <:,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁+= <invocation_expression,left> <member_access_expression,left> ▁bs r ▁. ▁serialize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁pos ▁+ ▁offset <binary_expression,right> ▁+ ▁len <binary_expression,right> ▁, ▁data ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> ▁wrote Bound Sh eets ▁= ▁true <assignment_expression,right> <assignment_expression,right> ▁; ▁} <initializer_expression,right> <assignment_expression,right> <assignment_expression,right> <ERROR,left> ▁} ▁else ▁{ <ERROR,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁record ▁. ▁serialize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁pos ▁+ ▁offset <binary_expression,right> ▁, ▁data ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁+= ▁len <assignment_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁. ▁log <member_access_expression,right> <argument_list,left> ▁( ▁DEBUG ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁return ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Cluster Security Groups Result ▁describe Cluster Security Groups <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Cluster Security Groups <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Cluster Security Groups Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Explanation ▁explain <parameter_list,left> ▁( <parameter,left> ▁Explanation ▁freq <parameter,right> ▁, <parameter,left> ▁long ▁norm <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Explanation ▁. ▁match <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁score <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁freq ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁floatValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁norm ▁) <argument_list,right> <invocation_expression,right> ▁, <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁freq ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁singleton <member_access_expression,right> <argument_list,left> ▁( ▁freq ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dis associate PhoneNumber From User Result ▁dis associate PhoneNumber From User <parameter_list,left> ▁( <parameter,left> ▁Dis associate PhoneNumber From User Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dis associate PhoneNumber From User <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁has <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁objectId <parameter,right> ▁, <parameter,left> ▁int ▁type Hint <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁open <argument_list,left> ▁( ▁objectId ▁, ▁type Hint ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Missing ObjectException ▁not Found ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getFormat Flags <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getFormat Flags <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁getProperty <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Show Actual <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Show Percent <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Label As Percentage <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Sm ooth ed Line <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Show Label <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁is Show B ubble Sizes <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( <parameter,left> ▁String ▁field <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Span Query ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁clauses ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Span Query <variable_declarator,left> ▁clause <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁clause ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁field ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <while_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Disable Insight Rules Result ▁disable Insight Rules <parameter_list,left> ▁( <parameter,left> ▁Disable Insight Rules Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Disable Insight Rules <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Bootstrap Action Config ▁new Run If <parameter_list,left> ▁( <parameter,left> ▁String ▁condition <parameter,right> ▁, <parameter,left> ▁Bootstrap Action Config ▁config <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁args <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁config ▁. ▁getScript Bootstrap Action <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Args <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁condition ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁1 ▁, <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁config ▁. ▁getScript Bootstrap Action <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getPath <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <object_creation_expression,left> ▁new ▁Bootstrap Action Config <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁. ▁with Name <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁config ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁with Script Bootstrap Action <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <object_creation_expression,left> ▁new ▁Script Bootstrap Action Config <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁. ▁with Path <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁with Args <member_access_expression,right> <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁CharBuffer ▁get <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁dst <parameter,right> ▁, <parameter,left> ▁int ▁dst Offset <parameter,right> ▁, <parameter,left> ▁int ▁char Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁dst ▁. ▁length <member_access_expression,right> ▁, ▁dst Offset ▁, ▁char Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁char Count ▁> <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Under flow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁new Position <equals_value_clause,left> ▁= <binary_expression,left> ▁position ▁+ ▁char Count <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sequence ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Chars <member_access_expression,right> <argument_list,left> ▁( ▁position ▁, ▁new Position ▁, ▁dst ▁, ▁dst Offset ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁position ▁= ▁new Position <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁getNames <parameter_list,left> ▁( <parameter,left> ▁String ▁section <parameter,right> ▁, <parameter,left> ▁String ▁subsection <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getState <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getNames <member_access_expression,right> <argument_list,left> ▁( ▁section ▁, ▁subsection ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Broker Result ▁create Broker <parameter_list,left> ▁( <parameter,left> ▁Create Broker Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Broker <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁on Abs orb <parameter_list,left> ▁( <parameter,left> ▁int ▁velocity <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁mState ▁= ▁STATE _ AB SOR B <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁velocity ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁MIN _ VE LOC ITY ▁, <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁abs <member_access_expression,right> <argument_list,left> ▁( ▁velocity ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m StartTime ▁= <invocation_expression,left> <member_access_expression,left> ▁Animation Utils ▁. ▁current Animation TimeMillis <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Duration ▁= <binary_expression,left> ▁0.1 f ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> ▁velocity ▁* ▁0.0 3 f <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Edge Alpha Start ▁= <member_access_expression,left> ▁0 ▁. ▁f <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Edge Scale Y ▁= <assignment_expression,left> ▁m Edge Scale Y Start ▁= <member_access_expression,left> ▁0 ▁. ▁f <member_access_expression,right> <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m G low Alpha Start ▁= ▁0.5 f <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m G low Scale Y Start ▁= <member_access_expression,left> ▁0 ▁. ▁f <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Edge Alpha Finish ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁velocity ▁* ▁V E LOC ITY _ ED GE _ FACTOR <binary_expression,right> ▁, ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Edge Scale Y Finish ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁H ELD _ ED GE _ SCALE _ Y ▁, <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁velocity ▁* ▁V E LOC ITY _ ED GE _ FACTOR <binary_expression,right> ▁, <member_access_expression,left> ▁1 ▁. ▁f <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m G low Scale Y Finish ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁0.0 25 f ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁velocity ▁* <parenthesized_expression,left> ▁( <binary_expression,left> ▁velocity ▁/ ▁100 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁* ▁0.0001 5 f <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁, ▁1. 75 f ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m G low Alpha Finish ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁m G low Alpha Start ▁, <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁velocity ▁* ▁V E LOC ITY _ G LOW _ FACTOR <binary_expression,right> ▁* ▁. 0000 1 f <binary_expression,right> ▁, ▁MAX _ ALPHA ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Supp ressed Dest inations Result ▁list Supp ressed Dest inations <parameter_list,left> ▁( <parameter,left> ▁List Supp ressed Dest inations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Supp ressed Dest inations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< <generic_name,left> ▁Pair <type_argument_list,left> ▁< ▁K ▁, ▁V ▁> <type_argument_list,right> <generic_name,right> ▁> <type_argument_list,right> <generic_name,right> ▁getP airs <parameter_list,left> ▁( ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< <generic_name,left> ▁Pair <type_argument_list,left> ▁< ▁K ▁, ▁V ▁> <type_argument_list,right> <generic_name,right> ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁pairs <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< <generic_name,left> ▁Pair <type_argument_list,left> ▁< ▁K ▁, ▁V ▁> <type_argument_list,right> <generic_name,right> ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁K ▁key <variable_declaration,right> ▁: ▁( ▁) ▁) ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁for <argument_list,left> ▁( <ERROR,left> <declaration_expression,left> ▁V ▁value <declaration_expression,right> ▁: ▁get <ERROR,right> <parenthesized_expression,left> ▁( ▁key ▁) <parenthesized_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <object_creation_expression,left> ▁new <generic_name,left> ▁Pair <type_argument_list,left> ▁< ▁K ▁, ▁V ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁key ▁, ▁value ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁} ▁return <ERROR,right> ▁pairs ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁void ▁set Params <parameter_list,left> ▁( <parameter,left> ▁String ▁params <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁set Params <member_access_expression,right> <argument_list,left> ▁( ▁params ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁params ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁name ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁params ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁k ▁) <argument_list,right> <invocation_expression,right> ▁. ▁trim <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁value ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁params ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁k ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁trim <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public ▁V ▁put <parameter_list,left> ▁( <parameter,left> ▁K ▁key <parameter,right> ▁, <parameter,left> ▁V ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁isIn Bounds <argument_list,left> ▁( ▁key ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <invocation_expression,left> ▁out Of Bounds <argument_list,left> ▁( ▁key ▁, ▁from Bound ▁, ▁to Bound ▁) <argument_list,right> <invocation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁put Internal <argument_list,left> ▁( ▁key ▁, ▁value ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁D eregister Image Request <tuple_pattern,left> ▁( ▁String ▁image Id ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setImage Id <argument_list,left> ▁( ▁image Id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Application Result ▁getApplication <parameter_list,left> ▁( <parameter,left> ▁Get Application Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Application <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Problem Ob servations Result ▁describe Problem Ob servations <parameter_list,left> ▁( <parameter,left> ▁Describe Problem Ob servations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Problem Ob servations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁fill Fields <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁E sch er Record Factory ▁record Factory <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁bytes After Header <equals_value_clause,left> ▁= <invocation_expression,left> ▁read Header <argument_list,left> ▁( ▁data ▁, ▁offset ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁pos <equals_value_clause,left> ▁= <binary_expression,left> ▁offset ▁+ ▁HEADER _ SIZE <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, ▁pos ▁, ▁field _1_ UID ▁, ▁0 ▁, ▁16 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos ▁+= ▁16 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ marker ▁= <element_access_expression,left> ▁data <bracketed_argument_list,left> ▁[ ▁pos ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁pos ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setP icture Data <argument_list,left> ▁( ▁data ▁, ▁pos ▁, <binary_expression,left> ▁bytes After Header ▁- ▁17 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <binary_expression,left> ▁bytes After Header ▁+ ▁HEADER _ SIZE <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁boolean ▁endsWith <parameter_list,left> ▁( <parameter,left> ▁BytesRef ▁ref <parameter,right> ▁, <parameter,left> ▁BytesRef ▁suffix <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁start At <equals_value_clause,left> ▁= <ref_expression,left> ▁ref ▁. <binary_expression,left> ▁length ▁- <member_access_expression,left> ▁suffix ▁. ▁length <member_access_expression,right> <binary_expression,right> <ref_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁start At ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <argument,left> ▁ref ▁. ▁bytes <argument,right> ▁, <argument,left> ▁ref ▁. <binary_expression,left> ▁offset ▁+ ▁start At <binary_expression,right> <argument,right> ▁, <argument,left> ▁ref ▁. <binary_expression,left> <binary_expression,left> ▁offset ▁+ ▁start At <binary_expression,right> ▁+ <member_access_expression,left> ▁suffix ▁. ▁length <member_access_expression,right> <binary_expression,right> <argument,right> ▁, <member_access_expression,left> ▁suffix ▁. ▁bytes <member_access_expression,right> ▁, <member_access_expression,left> ▁suffix ▁. ▁offset <member_access_expression,right> ▁, <binary_expression,left> <member_access_expression,left> ▁suffix ▁. ▁offset <member_access_expression,right> ▁+ <member_access_expression,left> ▁suffix ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Option Group Result ▁delete Option Group <parameter_list,left> ▁( <parameter,left> ▁Delete Option Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Option Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁getFrom Unicode LE <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁string <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁string ▁. ▁length <member_access_expression,right> ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁getFrom Unicode LE <argument_list,left> ▁( <declaration_expression,left> ▁string  <declaration_expression,right> ▁, ▁0 ▁, <binary_expression,left> <member_access_expression,left> ▁string ▁. ▁length <member_access_expression,right> ▁/ ▁2 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Cell Range Address List <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁_ list  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁Operation Evaluation Context ▁ec <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁NotImplemented Function Exception <argument_list,left> ▁( ▁_ function Name ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Option Groups Result ▁describe Option Groups <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Option Groups <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Option Groups Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Disable V pc Class ic Link Result ▁disable V pc Class ic Link <parameter_list,left> ▁( <parameter,left> ▁Disable V pc Class ic Link Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Disable V pc Class ic Link <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁id st m ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Stack Instances Result ▁list Stack Instances <parameter_list,left> ▁( <parameter,left> ▁List Stack Instances Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Stack Instances <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Company Network Configuration Result ▁describe Company Network Configuration <parameter_list,left> ▁( <parameter,left> ▁Describe Company Network Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Company Network Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁Coder Result ▁flush <parameter_list,left> ▁( <parameter,left> ▁CharBuffer ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁status ▁!= ▁END <binary_expression,right> ▁&& <binary_expression,left> ▁status ▁!= ▁INIT <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Coder Result <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁impl Flush <argument_list,left> ▁( ▁out ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁result ▁== <member_access_expression,left> ▁Coder Result ▁. ▁UN DER FLOW <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁status ▁= ▁FL USH <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DB Clusters Result ▁describe DB Clusters <parameter_list,left> ▁( <parameter,left> ▁Describe DB Clusters Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe DB Clusters <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Document Version Result ▁getDocument Version <parameter_list,left> ▁( <parameter,left> ▁Get Document Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Document Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Term Data ▁subtract <parameter_list,left> ▁( <parameter,left> ▁Term Data ▁t 1 <parameter,right> ▁, <parameter,left> ▁Term Data ▁t 2 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁t 2 ▁== ▁NO _ OUTPUT <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁t 1 ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Term Data ▁ret <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁stats Equal <argument_list,left> ▁( ▁t 1 ▁, ▁t 2 ▁) <argument_list,right> <invocation_expression,right> ▁&& <invocation_expression,left> ▁bytes Equal <argument_list,left> ▁( ▁t 1 ▁, ▁t 2 ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ret ▁= ▁NO _ OUTPUT <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ret ▁= <object_creation_expression,left> ▁new ▁Term Data <argument_list,left> ▁( <member_access_expression,left> ▁t 1 ▁. ▁bytes <member_access_expression,right> ▁, <member_access_expression,left> ▁t 1 ▁. ▁doc Freq <member_access_expression,right> ▁, <member_access_expression,left> ▁t 1 ▁. ▁total Term Freq <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁ret ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify Capacity Reservation Result ▁modify Capacity Reservation <parameter_list,left> ▁( <parameter,left> ▁Modify Capacity Reservation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Capacity Reservation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public <predefined_type,left> <predefined_type,right> <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁mutex ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁c ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁j <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁length <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁Unsupported Operation Exception <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁type <member_access_expression,right> ▁== ▁TYPE _ M AL FOR MED _ INPUT <binary_expression,right> ▁|| <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁type <member_access_expression,right> ▁== ▁TYPE _ UN M APP ABLE _ CHAR <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁length <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> ▁toString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to Formula String <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <invocation_expression,left> ▁invalid <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁next <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁iterator ▁. ▁nextIndex <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁< ▁end <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁iterator ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁NoSuch ElementException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁to Hex <parameter_list,left> ▁( <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁16 ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁write Hex <argument_list,left> ▁( ▁sb ▁, ▁value ▁, ▁16 ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁>> ▁> ▁6 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁& ▁63 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁<< ▁0 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁>> ▁> ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 L <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁start ▁= <assignment_expression,left> ▁end ▁= ▁null <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁init <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁token Stream <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁term Att ▁= <invocation_expression,left> <member_access_expression,left> ▁token Stream ▁. ▁addAttribute <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Char Term Attribute ▁. ▁class <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Game Server Group Result ▁update Game Server Group <parameter_list,left> ▁( <parameter,left> ▁Update Game Server Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Game Server Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Un mapp able Character Exception <tuple_pattern,left> ▁( ▁int ▁length ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁input Length <member_access_expression,right> ▁= ▁length <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Update Identity Provider Configuration Result ▁update Identity Provider Configuration <parameter_list,left> ▁( <parameter,left> ▁Update Identity Provider Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Identity Provider Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁int ▁lastIndexOf <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁a <equals_value_clause,left> ▁= ▁array <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <ERROR,left> ▁object ▁!= <ERROR,right> ▁null ▁) <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <binary_expression,left> ▁size ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁>= ▁0 <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁object ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁a <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁i ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <binary_expression,left> ▁size ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁>= ▁0 <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁a <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁i ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Constant Score QueryBuilder <tuple_pattern,left> ▁( ▁Query BuilderFactory ▁query Factory ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁query Factory <member_access_expression,right> ▁= ▁query Factory <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁getNumberOf On Channel Tokens <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁fill <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Token <variable_declarator,left> ▁t <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁t ▁. ▁getChannel <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁channel <binary_expression,right> ▁) <expression_statement,left> <postfix_unary_expression,left> ▁n ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁t ▁. ▁getType <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <member_access_expression,left> ▁Token ▁. ▁EOF <member_access_expression,right> <binary_expression,right> ▁) <break_statement,left> ▁break ▁; <break_statement,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁n ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public <variable_declaration,left> <array_type,left> ▁POI FS Document Path <ERROR,left> ▁( ▁final <ERROR,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁components <variable_declaration,right> ▁) <ERROR,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁components ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁components <member_access_expression,right> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁components <member_access_expression,right> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁String <array_rank_specifier,left> ▁[ <member_access_expression,left> ▁components ▁. ▁length <member_access_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< <member_access_expression,left> ▁components ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁j ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁components <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁components <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> <member_access_expression,left> ▁this ▁. ▁components <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <element_access_expression,left> ▁components <bracketed_argument_list,left> ▁[ ▁j ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁SQLException <tuple_pattern,left> ▁( ▁String ▁the Reason ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁the Reason ▁, ▁null ▁, ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List Fragments Result ▁list Fragments <parameter_list,left> ▁( <parameter,left> ▁List Fragments Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Fragments <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁QueryBuilder ▁getQuery Builder <parameter_list,left> ▁( <parameter,left> ▁String ▁nodeName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁builders ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁nodeName ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Directory Result ▁create Directory <parameter_list,left> ▁( <parameter,left> ▁Create Directory Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Directory <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getExternal Sheet Index <parameter_list,left> ▁( <parameter,left> ▁String ▁workbook Name <parameter,right> ▁, <parameter,left> ▁String ▁sheet Name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getOrCreate Link Table <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getExternal Sheet Index <member_access_expression,right> <argument_list,left> ▁( ▁workbook Name ▁, ▁sheet Name ▁, ▁sheet Name ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁V ▁getValue <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁value ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁K ▁getKey <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁key ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁has Trans parent Bounds <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁transparent Bounds ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Keep Empty <parameter_list,left> ▁( <parameter,left> ▁boolean ▁empty <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁keep Empty ▁= ▁empty <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁XPath Rule Any where Element <tuple_pattern,left> ▁( ▁String ▁rule Name ▁, ▁int ▁rule Index ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁rule Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁rule Index <member_access_expression,right> ▁= ▁rule Index <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁getHeight <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁_ height ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁Open StringBuilder ▁arr <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁write <argument_list,left> ▁( <member_access_expression,left> ▁arr ▁. ▁buf <member_access_expression,right> ▁, ▁0 ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁jump Draw ables To Current State <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁jump Draw ables To Current State <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁m Thumb ▁!= ▁null <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁m Thumb ▁. ▁jump To Current State <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Params <parameter_list,left> ▁( <parameter,left> ▁String ▁params <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁set Params <member_access_expression,right> <argument_list,left> ▁( ▁params ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁Stream Tokenizer ▁st ok <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Stream Tokenizer <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁StringReader <argument_list,left> ▁( ▁params ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁quote Char <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁quote Char <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ ' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁eol Is Significant <member_access_expression,right> <argument_list,left> ▁( ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁ordinary Char <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <try_statement,left> ▁try <block,left> ▁{ <while_statement,left> ▁while ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁nextToken <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <member_access_expression,left> ▁Stream Tokenizer ▁. ▁TT _ EOF <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <switch_statement,left> ▁switch ▁( <member_access_expression,left> ▁st ok ▁. ▁ttype <member_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁' <character_literal,right> ▁: <case_switch_label,right> <block,left> ▁{ <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁\ ' ▁' <character_literal,right> ▁: <case_switch_label,right> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁\" ▁' <character_literal,right> ▁: <case_switch_label,right> <case_switch_label,left> ▁case <member_access_expression,left> ▁Stream Tokenizer ▁. ▁TT _ WORD <member_access_expression,right> ▁: <case_switch_label,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁analyzer Names ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁st ok ▁. ▁s val <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Runtime Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getMessage <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁startsWith <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw ▁e ▁; <throw_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁lineno <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> ▁get Alg Line Num <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁, ▁e ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <catch_clause,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Throwable ▁t ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁st ok ▁. ▁lineno <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> ▁get Alg Line Num <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁, ▁t ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Volumes Result ▁describe Volumes <parameter_list,left> ▁( <parameter,left> ▁Describe Volumes Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Volumes <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Flow Logs Result ▁describe Flow Logs <parameter_list,left> ▁( <parameter,left> ▁Describe Flow Logs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Flow Logs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Method Result ▁update Method <parameter_list,left> ▁( <parameter,left> ▁Update Method Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Method <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Authorization Token Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Stop Contact Result ▁stop Contact <parameter_list,left> ▁( <parameter,left> ▁Stop Contact Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Contact <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create DataSet Result ▁create DataSet <parameter_list,left> ▁( <parameter,left> ▁Create DataSet Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create DataSet <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Object Database ▁new Cached Database <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create J ourney Result ▁create J ourney <parameter_list,left> ▁( <parameter,left> ▁Create J ourney Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create J ourney <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Dashboard s Result ▁delete Dashboard s <parameter_list,left> ▁( <parameter,left> ▁Delete Dashboard s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Dashboard s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Upgrade Index Merge Policy <tuple_pattern,left> ▁( ▁Merge Policy ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁super <tuple_pattern,left> ▁( ▁in ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Health Check Count Result ▁getHe alth Check Count <parameter_list,left> ▁( <parameter,left> ▁Get Health Check Count Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Health Check Count <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Chart Start Block Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rt ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁gr bit F rt ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Kind ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Context ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Instance 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Instance 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Series Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ category DataType ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ values DataType ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _3_ num Categories ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _4_ num Values ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 5_ b ubble Series Type ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 6_ num B ubble Values ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public ▁static <variable_declaration,left> <nullable_type,left> ▁Class ▁< ▁? <nullable_type,right> ▁extends <variable_declaration,right>  <local_declaration_statement,right> <ERROR,left> <binary_expression,left> ▁Char FilterFactory ▁> <invocation_expression,left> ▁lookup Class <argument_list,left> ▁( <declaration_expression,left> ▁String ▁name <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁{ <ERROR,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁loader ▁. ▁lookup Class <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get PublicKey Result ▁getPublic Key <parameter_list,left> ▁( <parameter,left> ▁Get PublicKey Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get PublicKey <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Local Gateway Route Table V pc Association Result ▁create Local Gateway Route Table V pc Association <parameter_list,left> ▁( <parameter,left> ▁Create Local Gateway Route Table V pc Association Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Local Gateway Route Table V pc Association <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁boolean ▁to Boolean <parameter_list,left> ▁( <parameter,left> ▁String ▁stringValue <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁stringValue ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Null PointerException <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁expected Boolean StringValue <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁Boolean ▁bool <equals_value_clause,left> ▁= <invocation_expression,left> ▁to Boolean OrNull <argument_list,left> ▁( ▁stringValue ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <ERROR,left> ▁bool ▁== <ERROR,right> ▁null ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁not AB oolean <member_access_expression,right> ▁, ▁stringValue ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁bool ▁. ▁booleanValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁get Added <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁unmodifiable Set <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Added <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁getNames <parameter_list,left> ▁( <parameter,left> ▁String ▁section <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getNames <argument_list,left> ▁( ▁section ▁, ▁null ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Cache Clusters Result ▁describe Cache Clusters <parameter_list,left> ▁( <parameter,left> ▁Describe Cache Clusters Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Cache Clusters <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁getUn merged Paths <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁un merged Paths ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁Operation Evaluation Context ▁ec <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁!= ▁2 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁evaluate <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁ec ▁. ▁getRow Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁ec ▁. ▁getColumnIndex <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁add String <parameter_list,left> ▁( <parameter,left> ▁Unicode String ▁string <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁field _1_ num _ strings ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Unicode String <variable_declarator,left> ▁u cs <equals_value_clause,left> ▁= <conditional_expression,left> <parenthesized_expression,left> ▁( <ERROR,left> ▁string ▁== <ERROR,right> ▁null ▁) <parenthesized_expression,right> ▁? ▁EMPTY _ STRING ▁: <ERROR,left> ▁string ▁; ▁int <ERROR,right> ▁rval <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁field _3_ strings ▁. ▁getIndex <member_access_expression,right> <argument_list,left> ▁( ▁u cs ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁index ▁!= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= ▁index <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= <invocation_expression,left> <member_access_expression,left> ▁field _3_ strings ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁field _2_ num _ unique _ strings ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁S ST Deserializer ▁. ▁add ToString Table <member_access_expression,right> <argument_list,left> ▁( ▁field _3_ strings ▁, ▁u cs ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁rval ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁getD elta Search Memory Limit <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁delta Search Memory Limit ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁+ <object_creation_expression,left> ▁new ▁String <argument_list,left> ▁( ▁surface Form ▁, ▁offset ▁, ▁length ▁) <argument_list,right> <object_creation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁position <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁length <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁position Length <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁type <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁word Id <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁dictionary ▁. ▁getLeft Id <member_access_expression,right> <argument_list,left> ▁( ▁word Id ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to Formula String <parameter_list,left> ▁( <parameter,left> ▁Formula Rendering Workbook ▁book <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Ex tern Sheet Name Resolver ▁. ▁prepend Sheet Name <member_access_expression,right> <argument_list,left> ▁( ▁book ▁, ▁field _1_ index _ ext ern _ sheet ▁, <invocation_expression,left> ▁format Reference AsString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <cast_expression,left> ▁( ▁E ▁) <element_access_expression,left> ▁elements <bracketed_argument_list,left> ▁[ ▁index ▁] <bracketed_argument_list,right> <element_access_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getCached Bytes <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁data ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Connections Result ▁describe Connections <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Connections <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Connections Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁ensure Capacity <parameter_list,left> ▁( <parameter,left> ▁int ▁minimum Capacity <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁a <equals_value_clause,left> ▁= ▁array <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁a ▁. ▁length <member_access_expression,right> ▁< ▁minimum Capacity <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁newArray <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁minimum Capacity ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁a ▁, ▁0 ▁, ▁newArray ▁, ▁0 ▁, ▁size ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁array ▁= ▁newArray <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁mod Count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Lifecycle Hook Result ▁delete Lifecycle Hook <parameter_list,left> ▁( <parameter,left> ▁Delete Lifecycle Hook Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Lifecycle Hook <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁float ▁max Bytes Per Char <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁max Bytes Per Char ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Bl ank Cell Rectangle Group <tuple_pattern,left> ▁( ▁int ▁first Row Index ▁, ▁int ▁first ColumnIndex ▁, ▁int ▁last ColumnIndex ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ first Row Index ▁= ▁first Row Index <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ first ColumnIndex ▁= ▁first ColumnIndex <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ last ColumnIndex ▁= ▁last ColumnIndex <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ last Row Index ▁= ▁first Row Index <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁find EndOf Row Outline Group <parameter_list,left> ▁( <parameter,left> ▁int ▁row <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁level <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁row ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getOut line Level <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁current Row <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <assignment_expression,left> ▁current Row ▁= ▁row <assignment_expression,right> ▁; <binary_expression,left> ▁current Row ▁< <invocation_expression,left> ▁getLast Row Num <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁current Row ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁current Row ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁current Row ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getOut line Level <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁< ▁level <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return <binary_expression,left> ▁current Row ▁- ▁1 <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getEncoding <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁encoder ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁H istorical Charset Names ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁encoder ▁. ▁charset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear All Cached Result Values <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ cache ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ sheet Indexes By Sheet ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ work book ▁. ▁clear All Cached Result Values <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁record Name <equals_value_clause,left> ▁= <invocation_expression,left> ▁getRecord Name <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁record Name ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getColumn <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁is B iff 2 <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getCell Attrs <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getX F Index <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁append Value Text <argument_list,left> ▁( ▁sb ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁record Name ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DB Cluster Endpoints Result ▁describe DB Cluster Endpoints <parameter_list,left> ▁( <parameter,left> ▁Describe DB Cluster Endpoints Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe DB Cluster Endpoints <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁rename To <parameter_list,left> ▁( <parameter,left> ▁final ▁String <parameter,right> ▁newName ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁rval <equals_value_clause,left> ▁= ▁false <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁is Root <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= <invocation_expression,left> <member_access_expression,left> ▁_ parent ▁. ▁change Name <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁newName ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁rval ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁Explanation ▁explain <parameter_list,left> ▁( <parameter,left> ▁Explanation ▁freq <parameter,right> ▁, <parameter,left> ▁long ▁norm <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Explanation ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁subs <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Sim Sc orer ▁sub Sc orer <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> <member_access_expression,left> ▁subs ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁sub Sc orer ▁. ▁explain <member_access_expression,right> <argument_list,left> ▁( ▁freq ▁, ▁norm ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁Explanation ▁. ▁match <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁score <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁freq ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁floatValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁norm ▁) <argument_list,right> <invocation_expression,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁subs ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <ERROR,right> 
<compilation_unit,left> <ERROR,left> ▁public <variable_declaration,left> ▁Doc Terms Index DocValues <tuple_pattern,left> ▁( ▁Value Source ▁vs ▁, ▁Leaf Reader Context ▁context ▁, ▁String ▁field ▁) <tuple_pattern,right> <variable_declaration,right> <ERROR,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁vs ▁, <invocation_expression,left> ▁open <argument_list,left> ▁( ▁context ▁, ▁field ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁compareTo <parameter_list,left> ▁( <parameter,left> ▁Ref ▁o 1 <parameter,right> ▁, <parameter,left> ▁Ref ▁o 2 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁o 1 ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁compareTo <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁o 2 ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dimension ▁getImage Dimension <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Internal Workbook <variable_declarator,left> ▁i wb <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getP at ri arch <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getSh eet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Workbook <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Workbook <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁E sch er B SER ec ord <variable_declarator,left> ▁b se <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i wb ▁. ▁getB SER ec ord <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getP icture Index <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁data <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b se ▁. ▁getB lip Record <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getP icture data <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁type <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁b se ▁. ▁getB lip Type Win 32 <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Image Utils ▁. ▁getImage Dimension <member_access_expression,right> <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁ByteArray InputStream <argument_list,left> ▁( ▁data ▁) <argument_list,right> <object_creation_expression,right> ▁, ▁type ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁var <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <member_access_expression,left> ▁Double ▁. ▁NaN <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁v ▁!= ▁null <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁> ▁1 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁r ▁= <binary_expression,left> <invocation_expression,left> ▁dev sq <argument_list,left> ▁( ▁v ▁) <argument_list,right> <invocation_expression,right> ▁/ <parenthesized_expression,left> ▁( <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Update Cloud Front Origin Access Identity Request <tuple_pattern,left> ▁( ▁Cloud Front Origin Access Identity Config ▁cloud Front Origin Access Identity Config ▁, ▁String ▁id ▁, ▁String ▁if Match ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Cloud Front Origin Access Identity Config <argument_list,left> ▁( ▁cloud Front Origin Access Identity Config ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setId <argument_list,left> ▁( ▁id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set If Match <argument_list,left> ▁( ▁if Match ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Diff Command ▁set Destination Prefix <parameter_list,left> ▁( <parameter,left> ▁String ▁destination Prefix <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁destination Prefix <member_access_expression,right> ▁= ▁destination Prefix <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁available <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Io Bridge ▁. ▁available <member_access_expression,right> <argument_list,left> ▁( ▁fd ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁final ▁public ▁S r nd Query ▁Not Query <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁ParseException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁S r nd Query ▁q <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁S r nd Query ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁queries <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Token <variable_declarator,left> ▁op rt <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁q ▁= <invocation_expression,left> ▁N Query <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <labeled_statement,left> ▁label _4 ▁: <while_statement,left> ▁while ▁( ▁true ▁) <block,left> ▁{ <switch_statement,left> ▁switch ▁( <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁jj _ ntk ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> ▁jj _ ntk <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁jj _ ntk <conditional_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case ▁NOT ▁: <case_switch_label,right> ▁; <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁jj _ la 1 <bracketed_argument_list,left> ▁[ ▁2 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁jj _ gen <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁label _4 ▁; <break_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> <expression_statement,left> <assignment_expression,left> ▁op rt ▁= <invocation_expression,left> ▁jj _ consume _ token <argument_list,left> ▁( ▁NOT ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁queries ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁queries ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁S r nd Query ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁queries ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁q ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁q ▁= <invocation_expression,left> ▁N Query <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁queries ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁q ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <labeled_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁true ▁) <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁queries ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁q ▁: <invocation_expression,left> ▁get Not Query <argument_list,left> ▁( ▁queries ▁, ▁op rt ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Error <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( ▁sid ▁) <argument_list,right> <invocation_expression,right> ▁. ▁toUpperCase <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Locale ▁. ▁ROOT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ raw Data ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Float Buffer ▁as ReadOnly Buffer <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Float To ByteBuffer Adapter <variable_declarator,left> ▁buf <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Float To ByteBuffer Adapter <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁as ReadOnly Buffer <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁limit <member_access_expression,right> ▁= ▁limit <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁position <member_access_expression,right> ▁= ▁position <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁mark <member_access_expression,right> ▁= ▁mark <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> <member_access_expression,left> ▁buf ▁. ▁byteBuffer <member_access_expression,right> ▁. ▁order <member_access_expression,right> ▁= <member_access_expression,left> ▁byteBuffer ▁. ▁order <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁buf ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Log Command ▁log <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Log Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Domain Result ▁create Domain <parameter_list,left> ▁( <parameter,left> ▁Create Domain Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Domain <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getWeight <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁WE IGHT _ UNKNOWN ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Chart Start Object Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rt ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁gr bit F rt ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Kind ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Context ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Instance 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁i Object Instance 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁remove <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁last Returned ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Concurrent HashMap ▁. ▁this <member_access_expression,right> ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁last Returned ▁. ▁key <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁last Returned ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Metric Collection Types Result ▁describe Metric Collection Types <parameter_list,left> ▁( <parameter,left> ▁Describe Metric Collection Types Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Metric Collection Types <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Field Level Encryption Profile Result ▁update Field Level Encryption Profile <parameter_list,left> ▁( <parameter,left> ▁Update Field Level Encryption Profile Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Field Level Encryption Profile <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Ref ▁getLe af <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁lastIndexOf <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <ERROR,left> ▁object ▁!= <ERROR,right> ▁null ▁) <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <binary_expression,left> <member_access_expression,left> ▁a ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁>= ▁0 <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁object ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁a <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁i ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <binary_expression,left> <member_access_expression,left> ▁a ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁>= ▁0 <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁a <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁i ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Default Bulk Sc orer <tuple_pattern,left> ▁( ▁Sc orer ▁scorer ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁scorer ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Null PointerException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁scorer <member_access_expression,right> ▁= ▁scorer <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁iterator <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁scorer ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁two Phase <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁scorer ▁. ▁two Phase Iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Repo Authorization Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁PUT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Port ug ues e Light St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁rt ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁gr bit F rt ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( ▁unused ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁int To Hex <member_access_expression,right> <argument_list,left> ▁( ▁c ts ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁rg ch Def List Style ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁rg ch Def P ivot Style ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁Enumeration <type_parameter_list,left> ▁< ▁K ▁> <type_parameter_list,right> ▁keys <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Key Enumeration <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Instance Types Result ▁describe Instance Types <parameter_list,left> ▁( <parameter,left> ▁Describe Instance Types Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Instance Types <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <qualified_name,left> ▁Ref Update ▁. ▁Result <qualified_name,right> ▁getResult <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁rc ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Base Path Mapping Result ▁update Base Path Mapping <parameter_list,left> ▁( <parameter,left> ▁Update Base Path Mapping Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Base Path Mapping <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Document Result ▁update Document <parameter_list,left> ▁( <parameter,left> ▁Update Document Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Document <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Stream File Threshold <parameter_list,left> ▁( <parameter,left> ▁int ▁new Limit <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁stream File Threshold ▁= ▁new Limit <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( ▁_ strings Per Bucket ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁_ s st Infos ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁k ▁< <member_access_expression,left> ▁_ s st Infos ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁k ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁k ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁_ s st Infos <bracketed_argument_list,left> ▁[ ▁k ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁getStream Pos <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁_ s st Infos <bracketed_argument_list,left> ▁[ ▁k ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁getBucket S ST Offset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setC RC <parameter_list,left> ▁( <parameter,left> ▁int ▁crc <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁crc <member_access_expression,right> ▁= ▁crc <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev Filter ▁get Rev Filter <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁filter ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁S r nd Prefix Query <tuple_pattern,left> ▁( ▁String ▁prefix ▁, ▁boolean ▁quoted ▁, ▁char ▁trunc ator ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁quoted ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁prefix <member_access_expression,right> ▁= ▁prefix <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁prefix Ref ▁= <object_creation_expression,left> ▁new ▁BytesRef <argument_list,left> ▁( ▁prefix ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁trunc ator <member_access_expression,right> ▁= ▁trunc ator <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁byte ▁readByte <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁v <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁is ▁. ▁read <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁v ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁EOFException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return <cast_expression,left> ▁( ▁byte ▁) ▁v <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Work Group Result ▁get Work Group <parameter_list,left> ▁( <parameter,left> ▁Get Work Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Work Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Put Block Public Access Configuration Result ▁put Block Public Access Configuration <parameter_list,left> ▁( <parameter,left> ▁Put Block Public Access Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Put Block Public Access Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁count <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁> ▁0 <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁entries <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁index ▁* <member_access_expression,left> ▁Size Of ▁. ▁INT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Album Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁File Tree Iterator <tuple_pattern,left> ▁( ▁File ▁root ▁, ▁FS ▁fs ▁, ▁Working Tree Options ▁options ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁root ▁, ▁fs ▁, ▁options ▁, <member_access_expression,left> ▁Default File Mode Strategy ▁. ▁INSTANCE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁byte At <parameter_list,left> ▁( <parameter,left> ▁int ▁idx <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> <element_access_expression,left> ▁bytes <bracketed_argument_list,left> ▁[ ▁idx ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁value <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Type Registration Result ▁describe Type Registration <parameter_list,left> ▁( <parameter,left> ▁Describe Type Registration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Type Registration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Term inate Instances Result ▁terminate Instances <parameter_list,left> ▁( <parameter,left> ▁Term inate Instances Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Term inate Instances <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Double Buffer ▁duplicate <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁ByteBuffer <variable_declarator,left> ▁bb <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁duplicate <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁order <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁order <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Double To ByteBuffer Adapter <variable_declarator,left> ▁buf <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Double To ByteBuffer Adapter <argument_list,left> ▁( ▁bb ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁limit <member_access_expression,right> ▁= ▁limit <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁position <member_access_expression,right> ▁= ▁position <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁mark <member_access_expression,right> ▁= ▁mark <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁buf ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁OR <tuple_pattern,left> ▁( ▁Semantic Context ▁a ▁, ▁Semantic Context ▁b ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁Semantic Context ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁operands <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashSet <type_argument_list,left> ▁< ▁Semantic Context ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁a ▁instanceof ▁OR ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁addAll <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁asList <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁OR ▁) ▁a <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁op nd s <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁else <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁a ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( ▁b ▁instanceof ▁OR ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁addAll <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁asList <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁OR ▁) ▁b <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁op nd s <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁else <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁b ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁P rec edence Predicate ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁precedence Pred icates <equals_value_clause,left> ▁= <invocation_expression,left> ▁filter Prec edence Pred icates <argument_list,left> ▁( ▁operands ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁precedence Pred icates ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁P rec edence Predicate <variable_declarator,left> ▁reduced <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁precedence Pred icates ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁reduced ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁op nd s <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁toArray <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁Semantic Context <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁operands ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁_ formats ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁_ formats ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁_ formats <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁serialize <member_access_expression,right> <argument_list,left> ▁( ▁out ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Availability Options Result ▁describe Availability Options <parameter_list,left> ▁( <parameter,left> ▁Describe Availability Options Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Availability Options <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getOffset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁offset ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁float <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁float <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁grow <argument_list,left> ▁( ▁array ▁, <binary_expression,left> ▁1 ▁+ <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Metrics Result ▁list Metrics <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁list Metrics <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁List Metrics Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁int ▁findFirst Record Loc By Sid <parameter_list,left> ▁( <parameter,left> ▁short ▁sid <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁apache <qualified_name,right> ▁. ▁poi <qualified_name,right> ▁. ▁h ss f <qualified_name,right> ▁. ▁record <qualified_name,right> ▁. ▁Record <qualified_name,right> ▁record <variable_declaration,right> <ERROR,left> ▁: ▁. ▁( ▁) <ERROR,right> ▁) ▁{ <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁record ▁. ▁getS id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁sid <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <postfix_unary_expression,left> <initializer_expression,left> ▁{ ▁return <;,left> <;,right> ▁} <initializer_expression,right> ▁index ▁++ <postfix_unary_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Delete V pn Connection Route Result ▁delete V pn Connection Route <parameter_list,left> ▁( <parameter,left> ▁Delete V pn Connection Route Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete V pn Connection Route <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
