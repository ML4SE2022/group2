<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ v center ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁addAll <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Block List <type_argument_list,left> ▁< ▁T ▁> <type_argument_list,right> <generic_name,right> ▁src <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁src ▁. ▁size <member_access_expression,right> ▁== ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁src Dir Idx <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( ▁; <binary_expression,left> ▁src Dir Idx ▁< <member_access_expression,left> ▁src ▁. ▁tail Dir Idx <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁src Dir Idx ▁++ <postfix_unary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> ▁addAll <argument_list,left> ▁( <element_access_expression,left> <member_access_expression,left> ▁src ▁. ▁directory <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁src Dir Idx ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁0 ▁, ▁BLOCK _ SIZE ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁src ▁. ▁tail Bl k Idx <member_access_expression,right> ▁!= ▁0 <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> ▁addAll <argument_list,left> ▁( <member_access_expression,left> ▁src ▁. ▁tail Block <member_access_expression,right> ▁, ▁0 ▁, <member_access_expression,left> ▁src ▁. ▁tail Bl k Idx <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁writeByte <parameter_list,left> ▁( <parameter,left> ▁byte ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁upto ▁== ▁blockSize <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁current Block ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁add Block <argument_list,left> ▁( ▁current Block ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁current Block ▁= <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁blockSize ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁upto ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁current Block <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁upto ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ObjectId ▁getObjectId <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁objectId ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Domain Entry Result ▁delete Domain Entry <parameter_list,left> ▁( <parameter,left> ▁Delete Domain Entry Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Domain Entry <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁term Offsets ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁term Offsets ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁0 <conditional_expression,right> ▁) <parenthesized_expression,right> ▁+ <parenthesized_expression,left> ▁( <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁terms Dict Offsets ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁terms Dict Offsets ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁0 <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁String ▁getFull Message <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁raw <equals_value_clause,left> ▁= ▁buffer <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁msg B <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Raw Parse Utils ▁. ▁tag Message <member_access_expression,right> <argument_list,left> ▁( ▁raw ▁, ▁0 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁msg B ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Raw Parse Utils ▁. ▁decode <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁guess Encoding <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁raw ▁, ▁msg B ▁, <member_access_expression,left> ▁raw ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁POI FS FileSystem <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ ▁this <ERROR,right> <tuple_pattern,left> ▁( ▁true ▁) <tuple_pattern,right>  <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ header ▁. ▁setB AT Count <member_access_expression,right> <argument_list,left> ▁( ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ header ▁. ▁setB AT Array <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <initializer_expression,left> ▁{ ▁1 ▁} <initializer_expression,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁B AT Block <variable_declarator,left> ▁bb <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁B AT Block ▁. ▁createEmpty B AT Block <member_access_expression,right> <argument_list,left> ▁( ▁big BlockSize ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁bb ▁. ▁setO ur Block Index <member_access_expression,right> <argument_list,left> ▁( ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ bat _ blocks ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁bb ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setNext Block <argument_list,left> ▁( ▁0 ▁, <member_access_expression,left> ▁POI FS Constants ▁. ▁END _ OF _ CH AIN <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setNext Block <argument_list,left> ▁( ▁1 ▁, <member_access_expression,left> ▁POI FS Constants ▁. ▁F AT _ SE CTOR _ BLOCK <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ property _ table ▁. ▁setStart Block <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁init <parameter_list,left> ▁( <parameter,left> ▁int ▁address <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁slice ▁= <element_access_expression,left> <member_access_expression,left> ▁pool ▁. ▁buffers <member_access_expression,right> <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁address ▁>> <member_access_expression,left> ▁Byte Block Pool ▁. ▁BYTE _ BLOCK _ SHIFT <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁slice <variable_declaration,right> <ERROR,left> ▁!= ▁null <ERROR,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁upto ▁= <binary_expression,left> ▁address ▁& <member_access_expression,left> ▁Byte Block Pool ▁. ▁BYTE _ BLOCK _ MASK <member_access_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁offset 0 ▁= ▁address <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁upto <variable_declaration,right> <ERROR,left> ▁< ▁slice ▁. <ERROR,right> ▁; <local_declaration_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Sub module Add Command ▁setPath <parameter_list,left> ▁( <parameter,left> ▁String ▁path <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁path <member_access_expression,right> ▁= ▁path <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Ing estions Result ▁list Ing estions <parameter_list,left> ▁( <parameter,left> ▁List Ing estions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Ing estions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Query Parser Token Manager <tuple_pattern,left> ▁( ▁Char Stream ▁stream ▁, ▁int ▁lex State ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁stream ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁Switch To <argument_list,left> ▁( ▁lex State ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Shard Iterator Result ▁getShard Iterator <parameter_list,left> ▁( <parameter,left> ▁Get Shard Iterator Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Shard Iterator <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Modify Strategy Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁ready <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁in ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IOException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <try_statement,left> ▁try <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁bytes ▁. ▁has Remaining <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁available <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁0 <binary_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁IOException ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E sch er Opt Record ▁get Opt Record <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁_ opt Record ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁int ▁read <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁buffer ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Null PointerException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> ▁, ▁offset ▁, ▁length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁length ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁0 ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁copy len <equals_value_clause,left> ▁= <conditional_expression,left> <binary_expression,left> <binary_expression,left> ▁count ▁- ▁pos <binary_expression,right> ▁< ▁length <binary_expression,right> ▁? <binary_expression,left> ▁count ▁- ▁pos <binary_expression,right> ▁: ▁length <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁copy len <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁buffer <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁offset ▁+ ▁i <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁byte ▁) <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁buffer <member_access_expression,right> ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁pos ▁+ ▁i <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos ▁+= ▁copy len <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁copy len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Open N L PS ent ence Break Iterator <tuple_pattern,left> ▁( ▁NL PS ent ence Detector Op ▁sentence Op ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁sentence Op <member_access_expression,right> ▁= ▁sentence Op <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁print <parameter_list,left> ▁( <parameter,left> ▁String ▁str <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁write <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁str ▁!= ▁null <binary_expression,right> ▁? ▁str ▁: <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁Object ▁) ▁null <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁NotImplemented Function Exception <tuple_pattern,left> ▁( ▁String ▁functionName ▁, ▁NotImplemented Exception ▁cause ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁functionName ▁, ▁cause ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁functionName <member_access_expression,right> ▁= ▁functionName <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁V ▁next <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁next Entry <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁readBytes <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁, <parameter,left> ▁boolean ▁use Buffer <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁available <equals_value_clause,left> ▁= <binary_expression,left> ▁buffer Length ▁- ▁buffer Position <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁len ▁<= ▁available <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁len ▁> ▁0 <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁buffer Position ▁, ▁b ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Position ▁+= ▁len <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁available ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁buffer Position ▁, ▁b ▁, ▁offset ▁, ▁available ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁offset ▁+= ▁available <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁len ▁-= ▁available <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Position ▁+= ▁available <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁use Buffer ▁&& <binary_expression,left> ▁len ▁< ▁bufferSize <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁ref ill <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁buffer Length ▁< ▁len <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁0 ▁, ▁b ▁, ▁offset ▁, ▁buffer Length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁EOFException <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁this <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁0 ▁, ▁b ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Position ▁= ▁len <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁after <equals_value_clause,left> ▁= <binary_expression,left> <binary_expression,left> ▁buffer Start ▁+ ▁buffer Position <binary_expression,right> ▁+ ▁len <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁after ▁> <invocation_expression,left> ▁length <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁EOFException <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁this <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁read Internal <argument_list,left> ▁( ▁b ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Start ▁= ▁after <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Position ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buffer Length ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Tag Queue Result ▁tag Queue <parameter_list,left> ▁( <parameter,left> ▁Tag Queue Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Tag Queue <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cache Subnet Group ▁modify Cache Subnet Group <parameter_list,left> ▁( <parameter,left> ▁Modify Cache Subnet Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Cache Subnet Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Params <parameter_list,left> ▁( <parameter,left> ▁String ▁params <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁set Params <member_access_expression,right> <argument_list,left> ▁( ▁params ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁language ▁= <assignment_expression,left> ▁country ▁= <assignment_expression,left> ▁variant ▁= <string_literal,left> ▁" ▁" <string_literal,right> <assignment_expression,right> <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁StringTokenizer <variable_declarator,left> ▁st <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringTokenizer <argument_list,left> ▁( ▁params ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁hasMoreTokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁language ▁= <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁nextToken <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁hasMoreTokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁country ▁= <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁nextToken <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁hasMoreTokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁variant ▁= <invocation_expression,left> <member_access_expression,left> ▁st ▁. ▁nextToken <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Documentation Version Result ▁delete Documentation Version <parameter_list,left> ▁( <parameter,left> ▁Delete Documentation Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Documentation Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <postfix_unary_expression,left> <binary_expression,left> <assignment_expression,left> <invocation_expression,left> <assignment_expression,left> <prefix_unary_expression,left> ▁! <ERROR,left> <parameter_list,left> ▁( <parameter,left> ▁obj ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> <ERROR,right> ▁other <prefix_unary_expression,right> ▁= <cast_expression,left> ▁( ▁Facet Label ▁) ▁obj <cast_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> ▁length ▁!= <member_access_expression,left> ▁other ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <assignment_expression,left> <invocation_expression,left> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> ▁for <argument_list,left> ▁( <declaration_expression,left> ▁int ▁i <declaration_expression,right>  <argument_list,right> <invocation_expression,right> ▁= <binary_expression,left> ▁length ▁- ▁1 <binary_expression,right> <assignment_expression,right> <assignment_expression,right> <;,left> <;,right> ▁>= ▁0 <binary_expression,right> <;,left> <;,right> ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁components <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> <member_access_expression,left> ▁other ▁. ▁components <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁GetInstance Access Details Result ▁getInstance Access Details <parameter_list,left> ▁( <parameter,left> ▁GetInstance Access Details Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Instance Access Details <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁H SSF Polygon ▁create Polygon <parameter_list,left> ▁( <parameter,left> ▁H SSF Child Anchor ▁anchor <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁H SSF Polygon <variable_declarator,left> ▁shape <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁H SSF Polygon <argument_list,left> ▁( ▁this ▁, ▁anchor ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shape ▁. ▁setParent <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shape ▁. ▁set Anchor <member_access_expression,right> <argument_list,left> ▁( ▁anchor ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shapes ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁shape ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁onCreate <argument_list,left> ▁( ▁shape ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁shape ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getSh eet Name <parameter_list,left> ▁( <parameter,left> ▁int ▁sheet Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getBound Sheet Rec <argument_list,left> ▁( ▁sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getSh eet name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Dashboard Result ▁getD ashboard <parameter_list,left> ▁( <parameter,left> ▁Get Dashboard Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Dashboard <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Sign in Delegate Groups With Account Result ▁associate Sign in Delegate Groups With Account <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Sign in Delegate Groups With Account Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Sign in Delegate Groups With Account <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add Multiple Bl anks <parameter_list,left> ▁( <parameter,left> ▁Mul Blank Record ▁m br <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< <invocation_expression,left> <member_access_expression,left> ▁m br ▁. ▁getNum Columns <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁j ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Bl ank Record <variable_declarator,left> ▁br <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Bl ank Record <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁br ▁. ▁setColumn <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁short ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁j ▁+ <invocation_expression,left> <member_access_expression,left> ▁m br ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁br ▁. ▁setRow <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁m br ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁br ▁. ▁set XF Index <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁m br ▁. ▁getX F At <member_access_expression,right> <argument_list,left> ▁( ▁j ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁insert Cell <argument_list,left> ▁( ▁br ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁quote <parameter_list,left> ▁( <parameter,left> ▁String ▁string <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\\ ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁ap os <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁k <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <assignment_expression,left> ▁k ▁= <invocation_expression,left> <member_access_expression,left> ▁string ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\\ ▁" <string_literal,right> ▁, ▁ap os ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁) <parenthesized_expression,right> ▁>= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁string ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁ap os ▁, <binary_expression,left> ▁k ▁+ ▁2 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\\ ▁\\ ▁\\ ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ap os ▁= <binary_expression,left> ▁k ▁+ ▁2 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁string ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁ap os ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\\ ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁putInt <parameter_list,left> ▁( <parameter,left> ▁int ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> <array_type,left> <array_type,left> ▁Array Pt g <ERROR,left> ▁( ▁Object <ERROR,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁values 2 d <ERROR,left> ▁) ▁{ ▁int <ERROR,right> <equals_value_clause,left> ▁= <member_access_expression,left> <element_access_expression,left> ▁values 2 d <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n Rows <equals_value_clause,left> ▁= <member_access_expression,left> ▁values 2 d ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ n Columns ▁= <cast_expression,left> ▁( ▁short ▁) ▁n Columns <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ n Rows ▁= <cast_expression,left> ▁( ▁short ▁) ▁n Rows <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁vv <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Object <array_rank_specifier,left> ▁[ <binary_expression,left> ▁_ n Columns ▁* ▁_ n Rows <binary_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁r <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁r ▁< ▁n Rows <binary_expression,right> ▁; <postfix_unary_expression,left> ▁r ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁rowData <equals_value_clause,left> ▁= <element_access_expression,left> ▁values 2 d <bracketed_argument_list,left> ▁[ ▁r ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁c <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁c ▁< ▁n Columns <binary_expression,right> ▁; <postfix_unary_expression,left> ▁c ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁vv <bracketed_argument_list,left> ▁[ <invocation_expression,left> ▁getValue Index <argument_list,left> ▁( ▁c ▁, ▁r ▁) <argument_list,right> <invocation_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <element_access_expression,left> ▁rowData <bracketed_argument_list,left> ▁[ ▁c ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ array Values ▁= ▁vv <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ reserved 0 Int ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ reserved 1 Short ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ reserved 2 Byte ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get I ce Server Config Result ▁getI ce Server Config <parameter_list,left> ▁( <parameter,left> ▁Get I ce Server Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get I ce Server Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getValue AsString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( <parameter,left> ▁String ▁field <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁parent Query ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁inc Ref <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁ref Count ▁. ▁incrementAndGet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Configuration Set Sending Enabled Result ▁update Configuration Set Sending Enabled <parameter_list,left> ▁( <parameter,left> ▁Update Configuration Set Sending Enabled Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Configuration Set Sending Enabled <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getNext X B AT Chain Offset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁getX B AT Entries Per Block <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁* <member_access_expression,left> ▁L ittle Endian Const s ▁. ▁INT _ SIZE <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁multiply By Power Of Ten <parameter_list,left> ▁( <parameter,left> ▁int ▁pow 10 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁T en Power <variable_declarator,left> ▁tp <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁T en Power ▁. ▁getInstance <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁abs <member_access_expression,right> <argument_list,left> ▁( ▁pow 10 ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁pow 10 ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁mul Shift <argument_list,left> ▁( <member_access_expression,left> ▁tp ▁. ▁_ div isor <member_access_expression,right> ▁, <member_access_expression,left> ▁tp ▁. ▁_ div isor Shift <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁mul Shift <argument_list,left> ▁( <member_access_expression,left> ▁tp ▁. ▁_ multip lic and <member_access_expression,right> ▁, <member_access_expression,left> ▁tp ▁. ▁_ multiplier Shift <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁b <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁l <equals_value_clause,left> ▁= <invocation_expression,left> ▁length <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁File ▁. ▁separatorChar <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁l <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getComponent <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁< <binary_expression,left> ▁l ▁- ▁1 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁File ▁. ▁separatorChar <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Instance Profile Credentials Provider ▁with Fetcher <parameter_list,left> ▁( <parameter,left> ▁E CS Metadata Service Credentials Fetcher ▁fetcher <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁fetcher <member_access_expression,right> ▁= ▁fetcher <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁fetcher <member_access_expression,right> ▁. ▁set Role Name <member_access_expression,right> <argument_list,left> ▁( ▁roleName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setProgress Monitor <parameter_list,left> ▁( <parameter,left> ▁Progress Monitor ▁pm <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁progress Monitor ▁= ▁pm <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁first <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ptr ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁eof <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> ▁parse Entry <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁previous <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁iterator ▁. ▁previous Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁>= ▁start <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁iterator ▁. ▁previous <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁NoSuch ElementException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getNew Prefix <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁new Prefix <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁indexOf Value <parameter_list,left> ▁( <parameter,left> ▁int ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁m Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁m Values <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁value <binary_expression,right> ▁) <return_statement,left> ▁return ▁i ▁; <return_statement,right> <if_statement,right> <for_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Ch ars Ref ▁> <type_argument_list,right> <generic_name,right> ▁unique St ems <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char ▁word <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Ch ars Ref ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁st ems <equals_value_clause,left> ▁= <invocation_expression,left> ▁stem <argument_list,left> ▁( ▁word ▁, ▁length ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁st ems ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁< ▁2 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁st ems ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Char Array Set <variable_declarator,left> ▁terms <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Char Array Set <argument_list,left> ▁( ▁8 ▁, <member_access_expression,left> ▁dictionary ▁. ▁ignore Case <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Ch ars Ref ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁ded up ed <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Ch ars Ref ▁s <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} ▁} ▁return <ERROR,right> ▁ded up ed ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Gateway Responses Result ▁getG ateway Responses <parameter_list,left> ▁( <parameter,left> ▁Get Gateway Responses Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Gateway Responses <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setPosition <parameter_list,left> ▁( <parameter,left> ▁long ▁pos <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current Block Index ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁pos ▁>> ▁block Bits <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁current Block ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁current Block Index ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁current Block U pto ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁pos ▁& ▁block Mask <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁skip <parameter_list,left> ▁( <parameter,left> ▁long ▁n <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁s <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁int ▁) <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁available <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁n ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= ▁s <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁s ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Bootstrap Action Detail <tuple_pattern,left> ▁( ▁Bootstrap Action Config ▁bootstrap Action Config ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Bootstrap Action Config <argument_list,left> ▁( ▁bootstrap Action Config ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ row ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _2_ col ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _3_ flags ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _4_ shape id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁field _ 6_ author ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> ▁field _ 5_ has Mult ib y te ▁? ▁0 x 01 ▁: ▁0 x 00 <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁field _ 5_ has Mult ib y te ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁put Unicode LE <qualified_name,right> <tuple_pattern,left> ▁( ▁field _ 6_ author ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁put Compressed Unicode <qualified_name,right> <tuple_pattern,left> ▁( ▁field _ 6_ author ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁field _7 _ padding ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁field _7 _ padding ▁. ▁intValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁lastIndexOf <parameter_list,left> ▁( <parameter,left> ▁String ▁string <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁lastIndexOf <argument_list,left> ▁( <declaration_expression,left> ▁string ▁, ▁count <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁add <parameter_list,left> ▁( <parameter,left> ▁E ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁addLast Impl <argument_list,left> ▁( ▁object ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁unset Section <parameter_list,left> ▁( <parameter,left> ▁String ▁section <parameter,right> ▁, <parameter,left> ▁String ▁subsection <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Config Snapshot ▁src ▁, ▁res <variable_declaration,right> ▁; <local_declaration_statement,right> <do_statement,left> ▁do <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁src ▁= <invocation_expression,left> <member_access_expression,left> ▁state ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁res ▁= <invocation_expression,left> ▁unset Section <argument_list,left> ▁( ▁src ▁, ▁section ▁, ▁subsection ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁while ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁state ▁. ▁compareAndSet <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁res ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) ▁; <do_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁String ▁get TagName <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁tagName ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add Sub Record <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁Sub Record ▁element <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sub records ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁index ▁, ▁element ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁remove <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁mutex ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return <ERROR,left> ▁delegate <parameter_list,left> ▁( <ERROR,left> ▁) ▁. ▁remove ▁( ▁o <ERROR,right> ▁) <parameter_list,right> <ERROR,right> ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Double Met aph one Filter ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Double Met aph one Filter <argument_list,left> ▁( ▁input ▁, ▁max Code Length ▁, ▁inject ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁length <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁in Core Length <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setValue <parameter_list,left> ▁( <parameter,left> ▁boolean ▁newValue <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁value ▁= ▁newValue <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Pair <tuple_pattern,left> ▁( ▁Content Source ▁old Source ▁, ▁Content Source ▁new Source ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁old Source <member_access_expression,right> ▁= ▁old Source <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁new Source <member_access_expression,right> ▁= ▁new Source <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁i <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁<= ▁i <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Array IndexOutOfBounds Exception <argument_list,left> ▁( ▁i ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁entries <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Repo Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁PUT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Delta Base As Offset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁delta Base As Offset ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁expected Mod Count ▁== <member_access_expression,left> ▁list ▁. ▁mod Count <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁last Link ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁ET ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁next <equals_value_clause,left> ▁= <member_access_expression,left> ▁last Link ▁. ▁next <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁ET ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁previous <equals_value_clause,left> ▁= <member_access_expression,left> ▁last Link ▁. ▁previous <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁next ▁. ▁previous <member_access_expression,right> ▁= ▁previous <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁previous ▁. ▁next <member_access_expression,right> ▁= ▁next <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁last Link ▁== ▁link <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁pos ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁link ▁= ▁previous <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁last Link ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁expected Mod Count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> <member_access_expression,left> ▁list ▁. ▁size <member_access_expression,right> ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> <member_access_expression,left> ▁list ▁. ▁mod Count <member_access_expression,right> ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Concurrent Modification Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Merge Shards Result ▁merge Shards <parameter_list,left> ▁( <parameter,left> ▁Merge Shards Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Merge Shards <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Al locate Host ed Connection Result ▁allocate Host ed Connection <parameter_list,left> ▁( <parameter,left> ▁Al locate Host ed Connection Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Alloc ate Host ed Connection <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getB egin Index <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁start ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁final ▁Weight ed Term ▁[ <ERROR,left> ▁] <invocation_expression,left> ▁get Terms <argument_list,left> ▁( <declaration_expression,left> ▁Query ▁query <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> <initializer_expression,left> ▁{ ▁return <invocation_expression,left> ▁get Terms <argument_list,left> ▁( ▁query ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁compact <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 0 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁byte 0 ▁>> ▁> ▁2 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 1 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 0 ▁& ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 2 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁& ▁15 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 2 ▁>> ▁> ▁6 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁byte 2 ▁& ▁63 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getH uman ish Name <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IllegalArgument Exception <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁s <equals_value_clause,left> ▁= <invocation_expression,left> ▁getPath <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁s ▁= <invocation_expression,left> ▁getHost <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁s ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁elements <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁scheme ▁) <argument_list,right> <invocation_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁LOCAL _ FILE ▁. ▁matcher <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁. ▁matches <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁elements ▁= <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁split <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\\ ▁" <string_literal,right> ▁+ <member_access_expression,left> ▁File ▁. ▁separatorChar <member_access_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁else elements ▁= <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁split <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁elements ▁. ▁length <member_access_expression,right> ▁== ▁0 <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <element_access_expression,left> ▁elements <bracketed_argument_list,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁elements ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Constants ▁. ▁DOT _ G IT <member_access_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁result ▁) <argument_list,right> <invocation_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁result ▁= <element_access_expression,left> ▁elements <bracketed_argument_list,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁elements ▁. ▁length <member_access_expression,right> ▁- ▁2 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁endsWith <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Constants ▁. ▁DOT _ G IT _ EXT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁result ▁= <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Constants ▁. ▁DOT _ G IT _ EXT <member_access_expression,right> ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Not ebook Instance Lifecycle Config Result ▁describe Not ebook Instance Lifecycle Config <parameter_list,left> ▁( <parameter,left> ▁Describe Not ebook Instance Lifecycle Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Not ebook Instance Lifecycle Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getAccess Key Secret <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁access Key Secret <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create V pn Connection Result ▁create V pn Connection <parameter_list,left> ▁( <parameter,left> ▁Create V pn Connection Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create V pn Connection <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Vo ices Result ▁describe Vo ices <parameter_list,left> ▁( <parameter,left> ▁Describe Vo ices Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Vo ices <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Monitoring Execution s Result ▁list Monitoring Execution s <parameter_list,left> ▁( <parameter,left> ▁List Monitoring Execution s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Monitoring Execution s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Describe Job Request <tuple_pattern,left> ▁( ▁String ▁vault Name ▁, ▁String ▁jobId ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setV ault Name <argument_list,left> ▁( ▁vault Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setJob Id <argument_list,left> ▁( ▁jobId ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁E sch er Record ▁getE sch er Record <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁es ch er Records ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Ap is Result ▁getA p is <parameter_list,left> ▁( <parameter,left> ▁Get Ap is Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Ap is <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Sms Channel Result ▁delete Sms Channel <parameter_list,left> ▁( <parameter,left> ▁Delete Sms Channel Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Sms Channel <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Tracking Ref Update ▁get Tracking Ref Update <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁tracking Ref Update ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁print <parameter_list,left> ▁( <parameter,left> ▁boolean ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁print <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁b ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Query Node ▁getChild <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getChildren <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Not Ignored Filter <tuple_pattern,left> ▁( ▁int ▁workdir Tree Index ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁index <member_access_expression,right> ▁= ▁workdir Tree Index <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Area Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ format Flags ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Thumbnail Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Trans it Gateway V pc Attachments Result ▁describe Trans it Gateway V pc Attachments <parameter_list,left> ▁( <parameter,left> ▁Describe Trans it Gateway V pc Attachments Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Trans it Gateway V pc Attachments <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Put Voice Connector Streaming Configuration Result ▁put Voice Connector Streaming Configuration <parameter_list,left> ▁( <parameter,left> ▁Put Voice Connector Streaming Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Put Voice Connector Streaming Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Ord Range ▁getOr d Range <parameter_list,left> ▁( <parameter,left> ▁String ▁dim <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁prefix To Ord Range ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁dim ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁symbol <equals_value_clause,left> ▁= <string_literal,left> ▁" ▁" <string_literal,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁startIndex ▁>= ▁0 <binary_expression,right> ▁&& <binary_expression,left> ▁startIndex ▁< <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getInputStream <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁symbol ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getInputStream <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getText <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Interval ▁. ▁of <member_access_expression,right> <argument_list,left> ▁( ▁startIndex ▁, ▁startIndex ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁symbol ▁= <invocation_expression,left> <member_access_expression,left> ▁Utils ▁. ▁escape Whitespace <member_access_expression,right> <argument_list,left> ▁( ▁symbol ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Locale ▁. ▁getDefault <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Lex er No V iable Alt Exception ▁. ▁class <member_access_expression,right> ▁. ▁getSimpleName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁symbol ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁peek <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁peek First Impl <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Work spaces Result ▁create Work spaces <parameter_list,left> ▁( <parameter,left> ▁Create Work spaces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Work spaces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁NumberFormat Index Record ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Repositories Result ▁describe Repositories <parameter_list,left> ▁( <parameter,left> ▁Describe Repositories Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Repositories <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁S parseInt Array <tuple_pattern,left> ▁( ▁int ▁initialCapacity ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁initialCapacity ▁= <invocation_expression,left> <member_access_expression,left> ▁ArrayUtils ▁. ▁ideal Int Array Size <member_access_expression,right> <argument_list,left> ▁( ▁initialCapacity ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Keys ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁initialCapacity ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Values ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁initialCapacity ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Size ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Hy phen ated Words Filter ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Hy phen ated Words Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Distribution With Tags Result ▁create Distribution With Tags <parameter_list,left> ▁( <parameter,left> ▁Create Distribution With Tags Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Distribution With Tags <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public <variable_declaration,left> ▁RandomAccess File <tuple_pattern,left> ▁( ▁String ▁fileName ▁, ▁String ▁mode ▁) <tuple_pattern,right> <variable_declaration,right> <ERROR,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁File <argument_list,left> ▁( ▁fileName ▁) <argument_list,right> <object_creation_expression,right> ▁, ▁mode ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete Workspace Image Result ▁delete Workspace Image <parameter_list,left> ▁( <parameter,left> ▁Delete Workspace Image Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Workspace Image <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁to Hex <parameter_list,left> ▁( <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁16 ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁write Hex <argument_list,left> ▁( ▁sb ▁, ▁value ▁, ▁16 ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Distribution Result ▁update Distribution <parameter_list,left> ▁( <parameter,left> ▁Update Distribution Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Distribution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁H SSF Color ▁getColor <parameter_list,left> ▁( <parameter,left> ▁short ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁index ▁== <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁H SSF Color Pred efined ▁. ▁AUT OM ATIC <member_access_expression,right> ▁. ▁getIndex <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁H SSF Color Pred efined ▁. ▁AUT OM ATIC <member_access_expression,right> ▁. ▁getColor <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁b <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ palette ▁. ▁getColor <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁b ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁null ▁: <object_creation_expression,left> ▁new ▁Custom Color <argument_list,left> ▁( ▁index ▁, ▁b ▁) <argument_list,right> <object_creation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁operands <parameter,right> ▁, <parameter,left> ▁int ▁src Row <parameter,right> ▁, <parameter,left> ▁int ▁src Col <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁NotImplemented Function Exception <argument_list,left> ▁( ▁_ function Name ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁short ▁) ▁field _1_ number _ cr n _ records <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁short ▁) ▁field _2_ sheet _ table _ index <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DB Engine Versions Result ▁describe DB Engine Versions <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe DB Engine Versions <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe DB Engine Versions Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Format Run <tuple_pattern,left> ▁( ▁short ▁character ▁, ▁short ▁font Index ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁_ character <member_access_expression,right> ▁= ▁character <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁_ font Index <member_access_expression,right> ▁= ▁font Index <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁to Big Endian Utf 16 Bytes <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁chars <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ <binary_expression,left> ▁length ▁* ▁2 <binary_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁end <equals_value_clause,left> ▁= <binary_expression,left> ▁offset ▁+ ▁length <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result Index <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁offset <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁end <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁char <variable_declarator,left> ▁ch <equals_value_clause,left> ▁= <element_access_expression,left> ▁chars <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁result <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁result Index ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁byte ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁ch ▁>> ▁8 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁result <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁result Index ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁byte ▁) ▁ch <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Upload Archive Result ▁upload Archive <parameter_list,left> ▁( <parameter,left> ▁Upload Archive Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Upload Archive <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Token ▁> <type_argument_list,right> <generic_name,right> ▁getH idden Tokens To Left <parameter_list,left> ▁( <parameter,left> ▁int ▁token Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getH idden Tokens To Left <argument_list,left> ▁( ▁token Index ▁, <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <return_statement,left> ▁return ▁true ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁obj ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁obj ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Autom aton Query <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Autom aton Query ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁compiled ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁other ▁. ▁compiled <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁term ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁other ▁. ▁term <member_access_expression,right> ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁term ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁other ▁. ▁term <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Span Query ▁make Span Clause <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Span Query <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁span Queries <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Span Query <array_rank_specifier,left> ▁[ <invocation_expression,left> ▁size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Span Query ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁sq i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁weight By Span Query ▁. ▁keySet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <invocation_expression,left> <member_access_expression,left> ▁sq i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Span Query <variable_declarator,left> ▁sq <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁sq i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁float <variable_declarator,left> ▁boost <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁weight By Span Query ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁sq ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁boost ▁!= ▁1 f <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁sq ▁= <object_creation_expression,left> ▁new ▁Span Boost Query <argument_list,left> ▁( ▁sq ▁, ▁boost ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁span Queries <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁sq <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁span Queries ▁. ▁length <member_access_expression,right> ▁== ▁1 <binary_expression,right> ▁) <return_statement,left> ▁return <element_access_expression,left> ▁span Queries <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁else <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Span Or Query <argument_list,left> ▁( ▁span Queries ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁St ash Create Command ▁stash Create <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁St ash Create Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Field Info ▁field Info <parameter_list,left> ▁( <parameter,left> ▁String ▁fieldName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁byName ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁fieldName ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Event Source Result ▁describe Event Source <parameter_list,left> ▁( <parameter,left> ▁Describe Event Source Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Event Source <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Document Analysis Result ▁getDocument Analysis <parameter_list,left> ▁( <parameter,left> ▁Get Document Analysis Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Document Analysis <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cancel Update Stack Result ▁cancel Update Stack <parameter_list,left> ▁( <parameter,left> ▁Cancel Update Stack Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Cancel Update Stack <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify LoadBalancer Attributes Result ▁modify LoadBalancer Attributes <parameter_list,left> ▁( <parameter,left> ▁Modify LoadBalancer Attributes Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify LoadBalancer Attributes <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Set Instance Protection Result ▁set Instance Protection <parameter_list,left> ▁( <parameter,left> ▁Set Instance Protection Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Set Instance Protection <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify DB Proxy Result ▁modify DB Proxy <parameter_list,left> ▁( <parameter,left> ▁Modify DB Proxy Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify DB Proxy <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁output <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁, <parameter,left> ▁int ▁endOffset <parameter,right> ▁, <parameter,left> ▁int ▁pos Length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁== <member_access_expression,left> ▁outputs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁outputs ▁= <invocation_expression,left> <member_access_expression,left> ▁ArrayUtil ▁. ▁grow <member_access_expression,right> <argument_list,left> ▁( ▁outputs ▁, <binary_expression,left> ▁count ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁== <member_access_expression,left> ▁end Offsets ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int <bracketed_argument_list,left> ▁[ ▁] <assignment_expression,left> ▁next ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁ArrayUtil ▁. ▁overs ize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁1 ▁+ ▁count <binary_expression,right> ▁, <member_access_expression,left> ▁Integer ▁. ▁BYTES <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right>  <bracketed_argument_list,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁end Offsets ▁, ▁0 ▁, ▁next ▁, ▁0 ▁, ▁count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁end Offsets ▁= ▁next <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁== <member_access_expression,left> ▁pos Lengths ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int <bracketed_argument_list,left> ▁[ ▁] <assignment_expression,left> ▁next ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁ArrayUtil ▁. ▁overs ize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁1 ▁+ ▁count <binary_expression,right> ▁, <member_access_expression,left> ▁Integer ▁. ▁BYTES <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right>  <bracketed_argument_list,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁pos Lengths ▁, ▁0 ▁, ▁next ▁, ▁0 ▁, ▁count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos Lengths ▁= ▁next <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁outputs <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁outputs <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁Ch ars Ref Builder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁outputs <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁copy Chars <member_access_expression,right> <argument_list,left> ▁( ▁output ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁end Offsets <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁endOffset <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁pos Lengths <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁pos Length <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Fetch Libraries Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁exists <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁fs ▁. ▁exists <member_access_expression,right> <argument_list,left> ▁( ▁objects ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Filter OutputStream <tuple_pattern,left> ▁( ▁OutputStream ▁out ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁out <member_access_expression,right> ▁= ▁out <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Scale Cluster Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁PUT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Data Validation Constraint ▁createTime Constraint <parameter_list,left> ▁( <parameter,left> ▁int ▁operator Type <parameter,right> ▁, <parameter,left> ▁String ▁formula 1 <parameter,right> ▁, <parameter,left> ▁String ▁formula 2 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁D V Constraint ▁. ▁createTime Constraint <member_access_expression,right> <argument_list,left> ▁( ▁operator Type ▁, ▁formula 1 ▁, ▁formula 2 ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Object Parent Paths Result ▁list Object Parent Paths <parameter_list,left> ▁( <parameter,left> ▁List Object Parent Paths Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Object Parent Paths <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Cache Subnet Groups Result ▁describe Cache Subnet Groups <parameter_list,left> ▁( <parameter,left> ▁Describe Cache Subnet Groups Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Cache Subnet Groups <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Shared Formula <parameter_list,left> ▁( <parameter,left> ▁boolean ▁flag <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _ 5_ options ▁= <invocation_expression,left> <member_access_expression,left> ▁shared Formula ▁. ▁set Short Boolean <member_access_expression,right> <argument_list,left> ▁( ▁field _ 5_ options ▁, ▁flag ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Reuse Objects <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁reuse Objects ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Error Node ▁addError Node <parameter_list,left> ▁( <parameter,left> ▁Token ▁bad Token <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Error Node Impl <variable_declarator,left> ▁t <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Error Node Impl <argument_list,left> ▁( ▁bad Token ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁add Any Child <argument_list,left> ▁( ▁t ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁t ▁. ▁setParent <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁t ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Lat v ian St em FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Event Subscription ▁remove Source Identifier From Subscription <parameter_list,left> ▁( <parameter,left> ▁Remove Source Identifier From Subscription Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Remove Source Identifier From Subscription <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Token FilterFactory ▁forName <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁, <parameter,left> <generic_name,left> ▁Map <type_argument_list,left> ▁< ▁String ▁, ▁String ▁> <type_argument_list,right> <generic_name,right> ▁args <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁loader ▁. ▁newInstance <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Add Album Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Th reat Int el Set Result ▁get Th reat Int el Set <parameter_list,left> ▁( <parameter,left> ▁Get Th reat Int el Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Th reat Int el Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev Filter ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Binary <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁a ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁o  <return_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁instanceof ▁Ar men ian St em mer <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁has Array <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁protected Has Array <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Contrib utor Insight s Result ▁update Contrib utor Insight s <parameter_list,left> ▁( <parameter,left> ▁Update Contrib utor Insight s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Contrib utor Insight s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁un write Prot ect Workbook <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁file Share ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁write Prot ect ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁file Share ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁write Prot ect ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Solr Syn onym Parser <tuple_pattern,left> ▁( ▁boolean ▁ded up ▁, ▁boolean ▁expand ▁, ▁Analyzer ▁analyzer ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁ded up ▁, ▁analyzer ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁expand <member_access_expression,right> ▁= ▁expand <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Request Spot Instances Result ▁request Spot Instances <parameter_list,left> ▁( <parameter,left> ▁Request Spot Instances Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Request Spot Instances <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getObject Data <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁find Object Record <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getObject Data <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Contact Attributes Result ▁get Contact Attributes <parameter_list,left> ▁( <parameter,left> ▁Get Contact Attributes Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Contact Attributes <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁getKey <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getValue <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Text Translation Jobs Result ▁list Text Translation Jobs <parameter_list,left> ▁( <parameter,left> ▁List Text Translation Jobs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Text Translation Jobs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Contact Methods Result ▁get Contact Methods <parameter_list,left> ▁( <parameter,left> ▁Get Contact Methods Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Contact Methods <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁short ▁lookup Index ByName <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Function Metadata <variable_declarator,left> ▁fd <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getInstance <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getFunction ByName Internal <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁fd ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁fd ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getInstance C et ab <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getFunction ByName Internal <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁fd ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <cast_expression,left> ▁( ▁short ▁) <invocation_expression,left> <member_access_expression,left> ▁fd ▁. ▁getIndex <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe An omaly Detector s Result ▁describe An omaly Detector s <parameter_list,left> ▁( <parameter,left> ▁Describe An omaly Detector s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe An omaly Detector s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁insert Id <parameter_list,left> ▁( <parameter,left> ▁String ▁message <parameter,right> ▁, <parameter,left> ▁ObjectId ▁change Id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁insert Id <argument_list,left> ▁( ▁message ▁, ▁change Id ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_function_statement,left> ▁public ▁long ▁getObject Size <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁objectId <parameter,right> ▁, <parameter,left> ▁int ▁type Hint <parameter,right> ▁) <parameter_list,right>  <local_function_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁throws ▁Missing ObjectException ▁, ▁Incorrect ObjectType Exception ▁, ▁IOException <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁sz <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁db ▁. ▁getObject Size <member_access_expression,right> <argument_list,left> ▁( ▁this ▁, ▁objectId ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁sz ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁type Hint ▁== ▁OBJ _ ANY <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Missing ObjectException <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁objectId ▁. ▁copy <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁unknown ObjectType 2 <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Missing ObjectException <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁objectId ▁. ▁copy <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁type Hint ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁sz ▁; <return_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Import Installation Media Result ▁import Installation Media <parameter_list,left> ▁( <parameter,left> ▁Import Installation Media Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Import Installation Media <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Put Lifecycle Event Hook Execution Status Result ▁put Lifecycle Event Hook Execution Status <parameter_list,left> ▁( <parameter,left> ▁Put Lifecycle Event Hook Execution Status Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Put Lifecycle Event Hook Execution Status <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Number Pt g <tuple_pattern,left> ▁( ▁L ittle Endian Input ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( <argument,left> ▁in ▁. <invocation_expression,left> ▁read Double <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <argument,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Field Level Encryption Config Result ▁getField Level Encryption Config <parameter_list,left> ▁( <parameter,left> ▁Get Field Level Encryption Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Field Level Encryption Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Detector Result ▁describe Detector <parameter_list,left> ▁( <parameter,left> ▁Describe Detector Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Detector <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Report Instance Status Result ▁report Instance Status <parameter_list,left> ▁( <parameter,left> ▁Report Instance Status Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Report Instance Status <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Alarm Result ▁delete Alarm <parameter_list,left> ▁( <parameter,left> ▁Delete Alarm Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Alarm <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Port ug ues e St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁F t C bl s Sub Record <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁reserved  <tuple_pattern,right> <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁EN CODE D _ SIZE ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁remove <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁mutex ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁c ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁object ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get D ed icated Ip Result ▁getD ed icated Ip <parameter_list,left> ▁( <parameter,left> ▁Get D ed icated Ip Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get D ed icated Ip <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁precedence ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Stream Processors Result ▁list Stream Processors <parameter_list,left> ▁( <parameter,left> ▁List Stream Processors Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Stream Processors <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete LoadBalancer Policy Request <tuple_pattern,left> ▁( ▁String ▁load Balancer Name ▁, ▁String ▁policy Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set LoadBalancer Name <argument_list,left> ▁( ▁load Balancer Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Policy Name <argument_list,left> ▁( ▁policy Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Window Prot ect Record <tuple_pattern,left> ▁( ▁int ▁options ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ options ▁= ▁options <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Un buffered Char Stream <tuple_pattern,left> ▁( ▁int ▁bufferSize ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁n ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁data ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁bufferSize ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Operations Result ▁get Operations <parameter_list,left> ▁( <parameter,left> ▁Get Operations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Operations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁copy Raw To <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, ▁o ▁, ▁w 1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁4 <binary_expression,right> ▁, ▁w 2 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁8 <binary_expression,right> ▁, ▁w 3 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁12 <binary_expression,right> ▁, ▁w 4 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁16 <binary_expression,right> ▁, ▁w 5 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Window One Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ h _ hold ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ v _ hold ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _3_ width ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _4_ height ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 5_ options ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _ 6_ active _ sheet ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _7 _ first _ visible _ tab ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _8 _ num _ selected _ tabs ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _9 _ tab _ width _ ratio ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Stop Work spaces Result ▁stop Work spaces <parameter_list,left> ▁( <parameter,left> ▁Stop Work spaces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Work spaces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁close <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( ▁isOpen ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁isOpen ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁dump <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁channel ▁. ▁truncate <member_access_expression,right> <argument_list,left> ▁( ▁file Length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁channel ▁. ▁close <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁fos ▁. ▁close <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Match m aking Rule Sets Result ▁describe Match m aking Rule Sets <parameter_list,left> ▁( <parameter,left> ▁Describe Match m aking Rule Sets Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Match m aking Rule Sets <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getP ron unc iation <parameter_list,left> ▁( <parameter,left> ▁int ▁word Id <parameter,right> ▁, <parameter,left> <array_type,left> ▁char ▁surface <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁off <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getPath <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁path Str ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁dev sq <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <member_access_expression,left> ▁Double ▁. ▁NaN <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁v ▁!= ▁null <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁>= ▁1 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁m <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁s <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n <equals_value_clause,left> ▁= <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁n <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s ▁+= <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁m ▁= <binary_expression,left> ▁s ▁/ ▁n <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁s ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁n <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s ▁+= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁- ▁m <binary_expression,right> ▁) <parenthesized_expression,right> ▁* <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁- ▁m <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁r ▁= <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁n ▁== ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁0 ▁: ▁s <conditional_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Resize Result ▁describe Resize <parameter_list,left> ▁( <parameter,left> ▁Describe Resize Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Resize <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁has Passed Through Non Gre edy Decision <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁passed Through Non Gre edy Decision ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁end <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁end <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁traverse <parameter_list,left> ▁( <parameter,left> ▁Cell Handler ▁handler <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁first Row <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁range ▁. ▁getFirst Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁last Row <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁range ▁. ▁getLast Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁first Column <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁range ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁last Column <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁range ▁. ▁getLast Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁width <equals_value_clause,left> ▁= <binary_expression,left> <binary_expression,left> ▁last Column ▁- ▁first Column <binary_expression,right> ▁+ ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Simple Cell Walk Context <variable_declarator,left> ▁ctx <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Simple Cell Walk Context <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Row <variable_declarator,left> ▁current Row <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁current Cell <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <assignment_expression,left> <member_access_expression,left> ▁ctx ▁. ▁row Number <member_access_expression,right> ▁= ▁first Row <assignment_expression,right> ▁; <binary_expression,left> <member_access_expression,left> ▁ctx ▁. ▁row Number <member_access_expression,right> ▁<= ▁last Row <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ <member_access_expression,left> ▁ctx ▁. ▁row Number <member_access_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current Row ▁= <invocation_expression,left> <member_access_expression,left> ▁sheet ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁ctx ▁. ▁row Number <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁current Row ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <for_statement,left> ▁for ▁( <assignment_expression,left> <member_access_expression,left> ▁ctx ▁. ▁col Number <member_access_expression,right> ▁= ▁first Column <assignment_expression,right> ▁; <binary_expression,left> <member_access_expression,left> ▁ctx ▁. ▁col Number <member_access_expression,right> ▁<= ▁last Column <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ <member_access_expression,left> ▁ctx ▁. ▁col Number <member_access_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current Cell ▁= <invocation_expression,left> <member_access_expression,left> ▁current Row ▁. ▁getCell <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁ctx ▁. ▁col Number <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁current Cell ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁isEmpty <argument_list,left> ▁( ▁current Cell ▁) <argument_list,right> <invocation_expression,right> ▁&& <prefix_unary_expression,left> ▁! ▁traverse Empty Cells <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <continue_statement,left> ▁continue ▁; <continue_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁row Size <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Arithmetic Utils ▁. ▁mul AndCheck <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁long ▁) <invocation_expression,left> <member_access_expression,left> ▁Arithmetic Utils ▁. ▁sub AndCheck <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁ctx ▁. ▁row Number <member_access_expression,right> ▁, ▁first Row ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁, <cast_expression,left> ▁( ▁long ▁) ▁width <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁ctx ▁. ▁ordinal Number <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁Arithmetic Utils ▁. ▁add AndCheck <member_access_expression,right> <argument_list,left> ▁( ▁row Size ▁, <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁ctx ▁. ▁col Number <member_access_expression,right> ▁- ▁first Column <binary_expression,right> ▁+ ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁handler ▁. ▁on Cell <member_access_expression,right> <argument_list,left> ▁( ▁current Cell ▁, ▁ctx ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getRead Index <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁pos ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁compareTo <parameter_list,left> ▁( <parameter,left> ▁Score Term ▁other <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁boost <member_access_expression,right> ▁== <member_access_expression,left> ▁other ▁. ▁boost <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁other ▁. ▁bytes <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁compareTo <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁bytes <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁else <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Float ▁. ▁compare <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁boost <member_access_expression,right> ▁, <member_access_expression,left> ▁other ▁. ▁boost <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁normalize <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char ▁s <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁len <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <switch_statement,left> ▁switch ▁( <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case ▁F AR SI _ Y E H ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁Y E H _ BAR REE ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁Y E H <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁K E HE H ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁K AF <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁HE H _ Y E H ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁HE H _ GO AL ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁HE H <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁H AM Z A _ AB O VE ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁len ▁= <invocation_expression,left> ▁delete <argument_list,left> ▁( ▁s ▁, ▁i ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Diagnostic Error Listener <tuple_pattern,left> ▁( ▁boolean ▁exact Only ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁exact Only <member_access_expression,right> ▁= ▁exact Only <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Key Schema Element <tuple_pattern,left> ▁( ▁String ▁attributeName ▁, ▁Key Type ▁keyType ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setAttribute Name <argument_list,left> ▁( ▁attributeName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setKey Type <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁keyType ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Assignment Result ▁get Assignment <parameter_list,left> ▁( <parameter,left> ▁Get Assignment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Assignment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁has Object <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁find Offset <argument_list,left> ▁( ▁id ▁) <argument_list,right> <invocation_expression,right> ▁!= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Group ing Search ▁setAll Groups <parameter_list,left> ▁( <parameter,left> ▁boolean ▁all Groups <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁all Groups <member_access_expression,right> ▁= ▁all Groups <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁void ▁set Multi Valued <parameter_list,left> ▁( <parameter,left> ▁String ▁dim Name <parameter,right> ▁, <parameter,left> ▁boolean ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Dim Config <variable_declarator,left> ▁ft <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁field Types ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁dim Name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁ft ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ft ▁= <object_creation_expression,left> ▁new ▁Dim Config <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁field Types ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁dim Name ▁, ▁ft ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁ft ▁. ▁multi Valued <member_access_expression,right> ▁= ▁v <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getCell s Val <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Character ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁cells ▁. ▁keySet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁size <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( ▁; <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Character <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁e <equals_value_clause,left> ▁= <invocation_expression,left> ▁at <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁e ▁. ▁cmd <member_access_expression,right> ▁>= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁size ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁size ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Voice Connector Result ▁delete Voice Connector <parameter_list,left> ▁( <parameter,left> ▁Delete Voice Connector Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Voice Connector <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Lifecycle Policy Result ▁delete Lifecycle Policy <parameter_list,left> ▁( <parameter,left> ▁Delete Lifecycle Policy Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Lifecycle Policy <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁len <equals_value_clause,left> ▁= <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁check Position <argument_list,left> ▁( ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁b ▁, ▁0 ▁, ▁_ buf ▁, ▁_ write Index ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ write Index ▁+= ▁len <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Reb ase Result ▁getR eb ase Result <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁re base Result <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁getN e arest Set Size <parameter_list,left> ▁( <parameter,left> ▁int ▁max NumberOf Values Expected <parameter,right> ▁, <parameter,left> ▁float ▁desired Sat uration <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁usable BitSet Sizes ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁num Set Bits At Desired Sat uration <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁usable BitSet Sizes <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁* ▁desired Sat uration <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁estimated Num Unique Values <equals_value_clause,left> ▁= <invocation_expression,left> ▁getE st imated Number Unique Values Allow ing For Coll isions <argument_list,left> ▁( <element_access_expression,left> ▁usable BitSet Sizes <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁num Set Bits At Desired Sat uration ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁estimated Num Unique Values ▁> ▁max NumberOf Values Expected <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁usable BitSet Sizes <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Dashboard Result ▁describe Dashboard <parameter_list,left> ▁( <parameter,left> ▁Describe Dashboard Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Dashboard <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Segment Result ▁create Segment <parameter_list,left> ▁( <parameter,left> ▁Create Segment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Segment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁int To Hex <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ row _ offset ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁k ▁< <member_access_expression,left> ▁field _2_ cell _ offsets ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁k ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁k ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁field _2_ cell _ offsets <bracketed_argument_list,left> ▁[ ▁k ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁get Und el eted List <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁und el eted List ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Merge Scheduler ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Plain Text Dictionary <tuple_pattern,left> ▁( ▁Reader ▁reader ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁in ▁= <object_creation_expression,left> ▁new ▁BufferedReader <argument_list,left> ▁( ▁reader ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁StringBuilder ▁append <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁cs q <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁cs q ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁append Null <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁append 0 <argument_list,left> ▁( ▁cs q ▁, ▁0 ▁, <invocation_expression,left> <member_access_expression,left> ▁cs q ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Associated Stack s Result ▁list Associated Stack s <parameter_list,left> ▁( <parameter,left> ▁List Associated Stack s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Associated Stack s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁av ed ev <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁r <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁m <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁s <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> ▁, <variable_declarator,left> ▁i Size <equals_value_clause,left> ▁= <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁i Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s ▁+= <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁m ▁= <binary_expression,left> ▁s ▁/ <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁s ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> ▁, <variable_declarator,left> ▁i Size <equals_value_clause,left> ▁= <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁i Size <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁s ▁+= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁abs <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁- ▁m <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁r ▁= <binary_expression,left> ▁s ▁/ <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe By o ip C id rs Result ▁describe By o ip C id rs <parameter_list,left> ▁( <parameter,left> ▁Describe By o ip C id rs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe By o ip C id rs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Disk Result ▁getDis k <parameter_list,left> ▁( <parameter,left> ▁Get Disk Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Disk <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁DB Cluster Parameter Group ▁create DB Cluster Parameter Group <parameter_list,left> ▁( <parameter,left> ▁Create DB Cluster Parameter Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create DB Cluster Parameter Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁CharBuffer ▁wrap <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁char Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> ▁, ▁start ▁, ▁char Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁CharBuffer <variable_declarator,left> ▁buf <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Read Write CharArray Buffer <argument_list,left> ▁( ▁array ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁position <member_access_expression,right> ▁= ▁start <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁limit <member_access_expression,right> ▁= <binary_expression,left> ▁start ▁+ ▁char Count <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁buf ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Sub module Status Type ▁getType <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁type ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Game Server Group Result ▁describe Game Server Group <parameter_list,left> ▁( <parameter,left> ▁Describe Game Server Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Game Server Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Pattern ▁pattern <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁pattern ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁V ▁setValue <parameter_list,left> ▁( <parameter,left> ▁V ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuilder ▁stem <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁word <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁CharSequence <variable_declarator,left> ▁cmd <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁stem mer ▁. ▁getLast On Path <member_access_expression,right> <argument_list,left> ▁( ▁word ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmd ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁null ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁setLength <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁word ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Diff ▁. ▁apply <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁cmd ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁buffer ▁; <return_statement,right> ▁else <return_statement,left> ▁return ▁null ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Rename Face Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁char ▁require Char <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Map <type_argument_list,left> ▁< ▁String ▁, ▁String ▁> <type_argument_list,right> <generic_name,right> ▁args <parameter,right> ▁, <parameter,left> ▁String ▁name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁require <argument_list,left> ▁( ▁args ▁, ▁name ▁) <argument_list,right> <invocation_expression,right> ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁toString Tree <parameter_list,left> ▁( <parameter,left> ▁Tree ▁t <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁toString Tree <argument_list,left> ▁( ▁t ▁, <cast_expression,left> ▁( <generic_name,left> ▁List <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁) ▁null <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Repo Web hook Log List Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Job Unlock Code Result ▁getJob Unlock Code <parameter_list,left> ▁( <parameter,left> ▁Get Job Unlock Code Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Job Unlock Code <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Remove Tags Request <tuple_pattern,left> ▁( ▁String ▁resourceId ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setResource Id <argument_list,left> ▁( ▁resourceId ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁short ▁get GB 23 12 Id <parameter_list,left> ▁( <parameter,left> ▁char ▁ch <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Character ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁ch ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getBytes <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> ▁!= ▁2 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁b 0 <equals_value_clause,left> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁buffer <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 x 0 FF <binary_expression,right> ▁) <parenthesized_expression,right> ▁- ▁16 1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁b 1 <equals_value_clause,left> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁buffer <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 x 0 FF <binary_expression,right> ▁) <parenthesized_expression,right> ▁- ▁16 1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <cast_expression,left> ▁( ▁short ▁) <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁b 0 ▁* ▁94 <binary_expression,right> ▁+ ▁b 1 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Unsupported Encoding Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( ▁e ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Batch Ref Update ▁add Command <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁Receive Command ▁> <type_argument_list,right> <generic_name,right> ▁cmd <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁commands ▁. ▁addAll <member_access_expression,right> <argument_list,left> ▁( ▁cmd ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁short ▁check Ex tern Sheet <parameter_list,left> ▁( <parameter,left> ▁int ▁sheet Number <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <cast_expression,left> ▁( ▁short ▁) <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getOrCreate Link Table <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁check Ex tern Sheet <member_access_expression,right> <argument_list,left> ▁( ▁sheet Number ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁c ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁object ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<ERROR,left> ▁public ▁Boolean Query ▁build <parameter_list,left> ▁( <parameter,left> ▁Query Node ▁query Node <parameter,right> ▁) <parameter_list,right> ▁throws ▁Query Node Exception ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Any Query Node <variable_declarator,left> ▁and Node <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Any Query Node ▁) ▁query Node <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁Boolean Query ▁. ▁Builder <qualified_name,right> <variable_declarator,left> ▁b Query <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <qualified_name,left> ▁Boolean Query ▁. ▁Builder <qualified_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Query Node ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁children <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁and Node ▁. ▁getChildren <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁if ▁( <binary_expression,left> ▁children ▁!= ▁null <binary_expression,right> ▁) ▁{ ▁for ▁( <variable_declaration,left> ▁Query Node <variable_declarator,left> ▁child <ERROR,left> ▁: ▁) ▁{ <ERROR,right> <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁child ▁. ▁getTag <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Query Tree Builder ▁. ▁QUERY _ TREE _ B UI LDER _ TAG ID <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁obj ▁!= ▁null <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁= <cast_expression,left> ▁( ▁Query ▁) ▁obj <cast_expression,right> <assignment_expression,right> ▁; <ERROR,left> ▁try <invocation_expression,left> <initializer_expression,left> ▁{ <invocation_expression,left> <member_access_expression,left> ▁b Query ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁query ▁, <member_access_expression,left> <member_access_expression,left> ▁Boolean Clause ▁. ▁Occ ur <member_access_expression,right> ▁. ▁SHOULD <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> ▁catch <argument_list,left> ▁( <declaration_expression,left> ▁Too Many C lauses ▁ex <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right> <initializer_expression,left> ▁{ <throw_expression,left> ▁throw <object_creation_expression,left> ▁new ▁Query Node Exception <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Message Impl <argument_list,left> ▁( <member_access_expression,left> ▁Query Parser Messages ▁. ▁EMPTY _ MESSAGE <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁, ▁ex ▁) <argument_list,right> <object_creation_expression,right> <throw_expression,right> ▁; ▁} <initializer_expression,right> ▁} ▁} ▁} <invocation_expression,left> <member_access_expression,left> ▁b Query ▁. ▁setMinimum Number Should Match <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁and Node ▁. ▁getMinimum Matching Elements <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁b Query ▁. ▁build <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Describe Stream Processor Result ▁describe Stream Processor <parameter_list,left> ▁( <parameter,left> ▁Describe Stream Processor Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Stream Processor <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Dashboard Permissions Result ▁describe Dashboard Permissions <parameter_list,left> ▁( <parameter,left> ▁Describe Dashboard Permissions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Dashboard Permissions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Ref ▁p eel <parameter_list,left> ▁( <parameter,left> ▁Ref ▁ref <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getRef Database <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁p eel <member_access_expression,right> <argument_list,left> ▁( ▁ref ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁IOException ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return ▁ref ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁align Object Size <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁NUM _ BYTES _ OBJECT _ HEADER <member_access_expression,right> ▁+ <binary_expression,left> ▁2 ▁* <member_access_expression,left> ▁Integer ▁. ▁BYTES <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁+ <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁NUM _ BYTES _ OBJECT _ REF <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁sizeOf <member_access_expression,right> <argument_list,left> ▁( ▁blocks ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Domain Suggestions Result ▁getDomain Suggestions <parameter_list,left> ▁( <parameter,left> ▁Get Domain Suggestions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Domain Suggestions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Stack Events Result ▁describe Stack Events <parameter_list,left> ▁( <parameter,left> ▁Describe Stack Events Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Stack Events <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Rule <parameter_list,left> ▁( <parameter,left> ▁int ▁idx <parameter,right> ▁, <parameter,left> ▁Conditional Formatting Rule ▁cf Rule <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Rule <argument_list,left> ▁( ▁idx ▁, <cast_expression,left> ▁( ▁H SSF Conditional Formatting Rule ▁) ▁cf Rule <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Resolver Rule Result ▁create Resolver Rule <parameter_list,left> ▁( <parameter,left> ▁Create Resolver Rule Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Resolver Rule <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Series Index Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ index ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Styles Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ grid set _ flag ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁obj ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁obj ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁To ff s <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁To ff s ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getStartOffset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁other ▁. ▁getStartOffset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getEndOffset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁other ▁. ▁getEndOffset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Gateway Group Result ▁create Gateway Group <parameter_list,left> ▁( <parameter,left> ▁Create Gateway Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Gateway Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Participant Connection Result ▁create Participant Connection <parameter_list,left> ▁( <parameter,left> ▁Create Participant Connection Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Participant Connection <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁ir r <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁income <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁ir r <argument_list,left> ▁( ▁income ▁, ▁0.1 d ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Register Workspace Directory Result ▁register Workspace Directory <parameter_list,left> ▁( <parameter,left> ▁Register Workspace Directory Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Register Workspace Directory <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev ert Command ▁include <parameter_list,left> ▁( <parameter,left> ▁Any ObjectId ▁commit <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁include <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁commit ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁commit ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁in umber VE <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Value Eval ▁ve Text 1 <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ve Text 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁getSingle Value <member_access_expression,right> <argument_list,left> ▁( ▁in umber VE ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁i Number <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁coerce Value ToString <member_access_expression,right> <argument_list,left> ▁( ▁ve Text 1 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Matcher <variable_declarator,left> ▁m <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁COMP LEX _ NUMBER _ PATTERN ▁. ▁matcher <member_access_expression,right> <argument_list,left> ▁( ▁i Number ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁m ▁. ▁matches <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁imag inary <equals_value_clause,left> ▁= <string_literal,left> ▁" ▁" <string_literal,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁result ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁imag inary Group <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁m ▁. ▁group <member_access_expression,right> <argument_list,left> ▁( ▁5 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁has Im ag inary Part <equals_value_clause,left> ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁imag inary Group ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> ▁imag inary Group ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁imag inary Group ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁String Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( ▁has Im ag inary Part ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁sign <equals_value_clause,left> ▁= <string_literal,left> ▁" ▁" <string_literal,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁imag inary Sign <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁m ▁. ▁group <member_access_expression,right> <argument_list,left> ▁( ▁GROUP 3_ IM AG IN ARY _ SIGN ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁imag inary Sign ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁0 <binary_expression,right> ▁&& <prefix_unary_expression,left> ▁! <parenthesized_expression,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁imag inary Sign ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁sign ▁= ▁imag inary Sign <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁group Im ag inary Number <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁m ▁. ▁group <member_access_expression,right> <argument_list,left> ▁( ▁GROUP 4_ IM AG IN ARY _ INTEGER _ OR _ DOUBLE ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁group Im ag inary Number ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁imag inary ▁= <binary_expression,left> ▁sign ▁+ ▁group Im ag inary Number <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁imag inary ▁= <binary_expression,left> ▁sign ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁NUM _ ERROR <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁String Eval <argument_list,left> ▁( ▁imag inary ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁poll Last <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁Map ▁. <generic_name,left> ▁Entry <type_argument_list,left> ▁< ▁E ▁, ▁Object ▁> <type_argument_list,right> <generic_name,right> <qualified_name,right> <variable_declarator,left> ▁entry <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁backing Map ▁. ▁poll Last Entry <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁entry ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁null ▁: <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getKey <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁read U Short <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁ch 1 <equals_value_clause,left> ▁= <invocation_expression,left> ▁read U Byte <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁ch 2 <equals_value_clause,left> ▁= <invocation_expression,left> ▁read U Byte <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁ch 2 ▁<< ▁8 <binary_expression,right> ▁) <parenthesized_expression,right> ▁+ <parenthesized_expression,left> ▁( <binary_expression,left> ▁ch 1 ▁<< ▁0 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Modify Snapshot Attribute Request <tuple_pattern,left> ▁( ▁String ▁snapshotId ▁, ▁Snapshot AttributeName ▁attribute ▁, ▁Operation Type ▁operation Type ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setS napshot Id <argument_list,left> ▁( ▁snapshotId ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁attribute ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Operation Type <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁operation Type ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List B onus Pay ments Result ▁list B onus Pay ments <parameter_list,left> ▁( <parameter,left> ▁List B onus Pay ments Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List B onus Pay ments <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁V ▁get <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁cs <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁cs ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Null PointerException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Token Filter ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Common G rams Filter <variable_declarator,left> ▁common G rams <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Common G rams Filter ▁) <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁input ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Common G rams Query Filter <argument_list,left> ▁( ▁common G rams ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getPath <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁path ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Init iate Multipart Upload Result ▁initiate Multipart Upload <parameter_list,left> ▁( <parameter,left> ▁Init iate Multipart Upload Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Init iate Multipart Upload <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuilder ▁insert <parameter_list,left> ▁( <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁i <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁insert 0 <argument_list,left> ▁( ▁offset ▁, <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁block <equals_value_clause,left> ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁shift <equals_value_clause,left> ▁= ▁62 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁shift ▁>= ▁0 <binary_expression,right> ▁; <assignment_expression,left> ▁shift ▁-= ▁2 <assignment_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁E lision Filter <argument_list,left> ▁( ▁input ▁, ▁articles ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁eat <parameter_list,left> ▁( <parameter,left> ▁Row ▁in <parameter,right> ▁, <parameter,left> <array_type,left> ▁int ▁rem ap <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁sum <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Cell ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁in ▁. ▁cells <member_access_expression,right> ▁. ▁values <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁sum ▁+= <member_access_expression,left> ▁c ▁. ▁cnt <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁c ▁. ▁ref <member_access_expression,right> ▁>= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁rem ap <bracketed_argument_list,left> ▁[ <member_access_expression,left> ▁c ▁. ▁ref <member_access_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁c ▁. ▁ref <member_access_expression,right> ▁= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁frame <equals_value_clause,left> ▁= <binary_expression,left> ▁sum ▁/ ▁10 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁live <equals_value_clause,left> ▁= ▁false <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Cell ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁in ▁. ▁cells <member_access_expression,right> ▁. ▁values <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁c ▁. ▁cnt <member_access_expression,right> ▁< ▁frame <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁c ▁. ▁cmd <member_access_expression,right> ▁>= ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁c ▁. ▁cnt <member_access_expression,right> ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁c ▁. ▁cmd <member_access_expression,right> ▁= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁c ▁. ▁cmd <member_access_expression,right> ▁>= ▁0 <binary_expression,right> ▁|| <binary_expression,left> <member_access_expression,left> ▁c ▁. ▁ref <member_access_expression,right> ▁>= ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁live ▁|= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁! ▁live <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁final ▁public ▁Token ▁getToken <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Token <variable_declarator,left> ▁t <equals_value_clause,left> ▁= <conditional_expression,left> ▁jj _ look ing Ahead ▁? ▁jj _ scanpos ▁: ▁token <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁index <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁t ▁. ▁next <member_access_expression,right> ▁!= ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁t ▁= <member_access_expression,left> ▁t ▁. ▁next <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁else <expression_statement,left> <assignment_expression,left> ▁t ▁= <assignment_expression,left> <member_access_expression,left> ▁t ▁. ▁next <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁token _ source ▁. ▁getNextToken <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁t ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRange <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁int To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ field 3 not Used ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁P tg <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁pt gs <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ formula ▁. ▁get Tokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁pt gs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁P tg <variable_declarator,left> ▁pt g <equals_value_clause,left> ▁= <element_access_expression,left> ▁pt gs <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁pt g ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁pt g ▁. ▁getR VA Type <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Folder Result ▁getF older <parameter_list,left> ▁( <parameter,left> ▁Get Folder Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Folder <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁void ▁add <parameter_list,left> ▁( <parameter,left> ▁int ▁location <parameter,right> ▁, <parameter,left> ▁E ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Positive Scores Only Collector <tuple_pattern,left> ▁( ▁Collector ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁super <tuple_pattern,left> ▁( ▁in ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Repo Build Rule Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁PUT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Base Ref <tuple_pattern,left> ▁( ▁Area Eval ▁ae ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ ref Eval ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ area Eval ▁= ▁ae <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ first Row Index ▁= <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ first ColumnIndex ▁= <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ height ▁= <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getLast Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ width ▁= <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getLast Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Drawing Manager 2 <tuple_pattern,left> ▁( ▁E sch er D gg Record ▁d gg ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁d gg <member_access_expression,right> ▁= ▁d gg <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁first <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> ▁reset <argument_list,left> ▁( ▁raw ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁Charset Decoder ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁status ▁= ▁INIT <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁impl Reset <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁BufferedReader <tuple_pattern,left> ▁( ▁Reader ▁in ▁, ▁int ▁size ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁super <tuple_pattern,left> ▁( ▁in ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁size ▁<= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁in <member_access_expression,right> ▁= ▁in <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁buf ▁= <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁size ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Code Repository Result ▁describe Code Repository <parameter_list,left> ▁( <parameter,left> ▁Describe Code Repository Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Code Repository <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁DB Subnet Group ▁create DB Subnet Group <parameter_list,left> ▁( <parameter,left> ▁Create DB Subnet Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create DB Subnet Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rename Branch Command ▁set Old Name <parameter_list,left> ▁( <parameter,left> ▁String ▁oldName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Callable <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁oldName <member_access_expression,right> ▁= ▁oldName <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Branch Command ▁set Force <parameter_list,left> ▁( <parameter,left> ▁boolean ▁force <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Callable <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁force <member_access_expression,right> ▁= ▁force <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Compilation Job Result ▁stop Compilation Job <parameter_list,left> ▁( <parameter,left> ▁Stop Compilation Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Compilation Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁synchronized ▁final <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁void ▁increment Secondary Progress By <parameter_list,left> ▁( <parameter,left> ▁int ▁diff <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Secondary Progress <argument_list,left> ▁( <binary_expression,left> ▁m Secondary Progress ▁+ ▁diff <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <assignment_expression,left> ▁bytes Start ▁= ▁null <assignment_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getRaw Path <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁path ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get User Source Account Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Export Job Result ▁create Export Job <parameter_list,left> ▁( <parameter,left> ▁Create Export Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Export Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create D ed icated Ip Pool Result ▁create D ed icated Ip Pool <parameter_list,left> ▁( <parameter,left> ▁Create D ed icated Ip Pool Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create D ed icated Ip Pool <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁obj <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁obj ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( ▁obj ▁instanceof ▁H SSF Cell Style ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁H SSF Cell Style ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁H SSF Cell Style ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ format ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁other ▁. ▁_ format <member_access_expression,right> ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁_ format ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁other ▁. ▁_ format <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ index ▁!= <member_access_expression,left> ▁other ▁. ▁_ index <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Release Hosts Result ▁release Hosts <parameter_list,left> ▁( <parameter,left> ▁Release Hosts Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Release Hosts <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁this <ERROR,left> ▁== ▁object <ERROR,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <predefined_type,left> <predefined_type,right> ▁Set ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁s <equals_value_clause,left> ▁= <cast_expression,left> ▁( <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> ▁) <ERROR,left> ▁object ▁; ▁try <ERROR,right> <initializer_expression,left> ▁{ <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁return ▁size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> ▁containsAll <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right>  <initializer_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁catch <argument_list,left> ▁( <declaration_expression,left> ▁Null PointerException ▁ignored <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <expression_statement,left> <invocation_expression,left> ▁catch <argument_list,left> ▁( <declaration_expression,left> ▁Class CastException ▁ignored <declaration_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁set Ref Log Message <parameter_list,left> ▁( <parameter,left> ▁String ▁msg <parameter,right> ▁, <parameter,left> ▁boolean ▁append Status <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁custom Ref Log ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁msg ▁== ▁null <binary_expression,right> ▁&& <prefix_unary_expression,left> ▁! ▁append Status <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁disable Ref Log <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁msg ▁== ▁null <binary_expression,right> ▁&& ▁append Status <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ref Log Message ▁= <string_literal,left> ▁" ▁" <string_literal,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ref Log Include Result ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ref Log Message ▁= ▁msg <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ref Log Include Result ▁= ▁append Status <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Stream ID Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁id st m ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Rec ogn ize Car Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( <ERROR,left> ▁" ▁- <ERROR,right> ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁ByteOrder ▁order <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁ByteOrder ▁. ▁native Order <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getA head Count <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁ahead Count ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁isNew Fragment <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Cloud Front Origin Access Identity Config Result ▁getCl oud Front Origin Access Identity Config <parameter_list,left> ▁( <parameter,left> ▁Get Cloud Front Origin Access Identity Config Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Cloud Front Origin Access Identity Config <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁matches <parameter_list,left> ▁( <parameter,left> ▁int ▁symbol <parameter,right> ▁, <parameter,left> ▁int ▁min V ocab Symbol <parameter,right> ▁, <parameter,left> ▁int ▁max V ocab Symbol <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁label ▁== ▁symbol <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Trans it Gateway Result ▁delete Trans it Gateway <parameter_list,left> ▁( <parameter,left> ▁Delete Trans it Gateway Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Trans it Gateway <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁int ▁minSize <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁minSize <variable_declaration,right> ▁>= ▁0 ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁minSize <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> ▁< ▁minSize <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁grow Exact <argument_list,left> ▁( ▁array ▁, <invocation_expression,left> ▁overs ize <argument_list,left> ▁( ▁minSize ▁, <member_access_expression,left> ▁Byte ▁. ▁BYTES <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <return_statement,left> ▁return ▁array ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Transaction Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Batch Ref Update ▁set Ref Log Ident <parameter_list,left> ▁( <parameter,left> ▁Person Ident ▁pi <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ref Log Ident ▁= ▁pi <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Launch Template Data Result ▁getL aunch Template Data <parameter_list,left> ▁( <parameter,left> ▁Get Launch Template Data Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Launch Template Data <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Parse Info <tuple_pattern,left> ▁( ▁Pro filing AT NS im ulator ▁at n Sim ulator ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁at n Sim ulator <member_access_expression,right> ▁= ▁at n Sim ulator <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Simple QQ Parser <tuple_pattern,left> ▁( ▁String <ERROR,left> ▁[ ▁] <ERROR,right> ▁, ▁String ▁index Field ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁q q Names <member_access_expression,right> ▁= ▁q q Names <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁index Field <member_access_expression,right> ▁= ▁index Field <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁DB Cluster ▁promote Read Replica DB Cluster <parameter_list,left> ▁( <parameter,left> ▁Prom ote Read Replica DB Cluster Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Prom ote Read Replica DB Cluster <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Capacity Reser v ations Result ▁describe Capacity Reser v ations <parameter_list,left> ▁( <parameter,left> ▁Describe Capacity Reser v ations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Capacity Reser v ations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁reader <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁executor <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁slice Executor <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁increment Token <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁main ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁sub From ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁sub To ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁bits Per Value ▁> ▁32 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁bits Per Value <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁block <equals_value_clause,left> ▁= <invocation_expression,left> ▁readLong <argument_list,left> ▁( ▁blocks ▁, ▁blocks Offset ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁blocks Offset ▁+= ▁8 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁values Offset ▁= <invocation_expression,left> ▁decode <argument_list,left> ▁( ▁block ▁, ▁values ▁, ▁values Offset ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Expected Token <parameter_list,left> ▁( <parameter,left> ▁int ▁symbol <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁AT N <variable_declarator,left> ▁at n <equals_value_clause,left> ▁= <member_access_expression,left> <invocation_expression,left> ▁get Interpreter <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁at n <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Parser Rule Context <variable_declarator,left> ▁ctx <equals_value_clause,left> ▁= ▁_ ctx <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁AT N State <variable_declarator,left> ▁s <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁at n ▁. ▁states <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getState <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Interval Set <variable_declarator,left> ▁following <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁at n ▁. ▁next Tokens <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁following ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( ▁symbol ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁following ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Token ▁. ▁EP SILON <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁ctx ▁!= ▁null <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁ctx ▁. ▁invoking State <member_access_expression,right> ▁>= ▁0 <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁following ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Token ▁. ▁EP SILON <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁AT N State <variable_declarator,left> ▁invoking State <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁at n ▁. ▁states <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁ctx ▁. ▁invoking State <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Rule Transition <variable_declarator,left> ▁rt <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Rule Transition ▁) <invocation_expression,left> <member_access_expression,left> ▁invoking State ▁. ▁transition <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁following ▁= <invocation_expression,left> <member_access_expression,left> ▁at n ▁. ▁next Tokens <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁rt ▁. ▁follow State <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁following ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( ▁symbol ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁ctx ▁= <cast_expression,left> ▁( ▁Parser Rule Context ▁) <member_access_expression,left> ▁ctx ▁. ▁parent <member_access_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁following ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Token ▁. ▁EP SILON <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁&& <binary_expression,left> ▁symbol ▁== <member_access_expression,left> ▁Token ▁. ▁EOF <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Stream Result ▁update Stream <parameter_list,left> ▁( <parameter,left> ▁Update Stream Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Stream <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁getSingle Value <member_access_expression,right> <argument_list,left> ▁( ▁arg 0 ▁, ▁src Row Index ▁, ▁src ColumnIndex ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁NA <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁translate ErrorCode To Error Type Value <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getErrorCode <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Number Eval <argument_list,left> ▁( ▁result ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁_ index <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁_ name <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Assignments For H IT Result ▁list Assignments For H IT <parameter_list,left> ▁( <parameter,left> ▁List Assignments For H IT Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Assignments For H IT <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete AccessControl Rule Result ▁delete AccessControl Rule <parameter_list,left> ▁( <parameter,left> ▁Delete AccessControl Rule Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete AccessControl Rule <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Arc <type_argument_list,left> ▁< ▁Long ▁> <type_argument_list,right> <generic_name,right> ▁getFirst Arc <parameter_list,left> ▁( <parameter,left> <qualified_name,left> ▁F ST ▁. <generic_name,left> ▁Arc <type_argument_list,left> ▁< ▁Long ▁> <type_argument_list,right> <generic_name,right> <qualified_name,right> ▁arc <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁fst ▁. ▁getFirst Arc <member_access_expression,right> <argument_list,left> ▁( ▁arc ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁block <equals_value_clause,left> ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁shift <equals_value_clause,left> ▁= ▁48 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁shift ▁>= ▁0 <binary_expression,right> ▁; <assignment_expression,left> ▁shift ▁-= ▁16 <assignment_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁65535 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁skip <parameter_list,left> ▁( <parameter,left> ▁long ▁char Count <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁char Count ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁char Count <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Not Closed <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁char Count ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁0 ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long ▁in Sk ipped <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁available From Buffer <equals_value_clause,left> ▁= <binary_expression,left> <member_access_expression,left> ▁buf ▁. ▁length <member_access_expression,right> ▁- ▁pos <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁available From Buffer ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁required From In <equals_value_clause,left> ▁= <binary_expression,left> ▁char Count ▁- ▁available From Buffer <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁required From In ▁<= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁pos ▁+= ▁char Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁char Count ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos ▁+= ▁available From Buffer <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁in Sk ipped ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁skip <member_access_expression,right> <argument_list,left> ▁( ▁required From In ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁in Sk ipped ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁skip <member_access_expression,right> <argument_list,left> ▁( ▁char Count ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <binary_expression,left> ▁in Sk ipped ▁+ ▁available From Buffer <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Map <type_argument_list,left> ▁< ▁String ▁, ▁Ref ▁> <type_argument_list,right> <generic_name,right> ▁get Refs Map <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁advert ised Refs ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Api Key Result ▁update Api Key <parameter_list,left> ▁( <parameter,left> ▁Update Api Key Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Api Key <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_function_statement,left> ▁public ▁Object Stream ▁openStream <parameter_list,left> ▁( ▁) <parameter,left> ▁throws ▁Missing ObjectException <parameter,right> ▁, <parameter,left> ▁IOException <ERROR,left> ▁{ ▁Pack InputStream <ERROR,right> ▁pack In <parameter,right>  <parameter_list,right> ▁; <local_function_statement,right> <expression_statement,left> <assignment_expression,left> <invocation_expression,left> ▁@ SuppressWarnings <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁D fs Reader ▁ctx ▁= <invocation_expression,left> <member_access_expression,left> ▁db ▁. ▁new Reader <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <try_statement,left> ▁try <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁pack In ▁= <object_creation_expression,left> ▁new ▁Pack InputStream <argument_list,left> ▁( ▁pack ▁, <binary_expression,left> ▁object Offset ▁+ ▁header Length <binary_expression,right> ▁, ▁ctx ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ctx ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁IOException ▁pack G one ▁) <catch_declaration,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁ObjectId <variable_declarator,left> ▁obj <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁pack ▁. ▁get Reverse Idx <member_access_expression,right> <argument_list,left> ▁( ▁ctx ▁) <argument_list,right> <invocation_expression,right> ▁. ▁find Object <member_access_expression,right> <argument_list,left> ▁( ▁object Offset ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ctx ▁. ▁open <member_access_expression,right> <argument_list,left> ▁( ▁obj ▁, ▁type ▁) <argument_list,right> <invocation_expression,right> ▁. ▁openStream <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <finally_clause,left> ▁finally <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁ctx ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁ctx ▁. ▁close <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁buf sz <equals_value_clause,left> ▁= ▁8192 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁InputStream <variable_declarator,left> ▁in <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Buffered InputStream <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Inf later InputStream <argument_list,left> ▁( ▁pack In ▁, <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁pack In ▁. ▁ctx <member_access_expression,right> ▁. ▁inflater <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁buf sz ▁) <argument_list,right> <object_creation_expression,right> ▁, ▁buf sz ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new <qualified_name,left> ▁Object Stream ▁. ▁Filter <qualified_name,right> <argument_list,left> ▁( ▁type ▁, ▁size ▁, <argument,left> ▁in  <argument,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <compilation_unit,right> 
<ERROR,left> ▁public ▁ArrayList ▁( <ERROR,left> ▁) ▁{ ▁array ▁= ▁Empty Array ▁. <ERROR,right> ▁OBJECT ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Update Detector Version Result ▁update Detector Version <parameter_list,left> ▁( <parameter,left> ▁Update Detector Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Detector Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁resize <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁resize <argument_list,left> ▁( <member_access_expression,left> ▁Double ▁. ▁MAX _ VALUE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Rev Flag Set <tuple_pattern,left> ▁( ▁Collection <ERROR,left> ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁addAll <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁size <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁size ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁long ▁getLong <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁new Position <equals_value_clause,left> ▁= <binary_expression,left> ▁position ▁+ <member_access_expression,left> ▁Size Of ▁. ▁LONG <member_access_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁new Position ▁> ▁limit <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Under flow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Memory ▁. ▁peek Long <member_access_expression,right> <argument_list,left> ▁( ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁, ▁order ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁position ▁= ▁new Position <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuilder ▁insert <parameter_list,left> ▁( <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁long ▁l <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁insert 0 <argument_list,left> ▁( ▁offset ▁, <invocation_expression,left> <member_access_expression,left> ▁Long ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁l ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁T ur k ish LowerCase Filter <tuple_pattern,left> ▁( ▁TokenStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁super <tuple_pattern,left> ▁( ▁in ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁ParseTree Match ▁match <parameter_list,left> ▁( <parameter,left> ▁ParseTree ▁tree <parameter,right> ▁, <parameter,left> ▁ParseTree Pattern ▁pattern <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Multi Map <type_argument_list,left> ▁< ▁String ▁, ▁ParseTree ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁labels <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁Multi Map <type_argument_list,left> ▁< ▁String ▁, ▁ParseTree ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁ParseTree <variable_declarator,left> ▁mismatch ed Node <equals_value_clause,left> ▁= <invocation_expression,left> ▁match Impl <argument_list,left> ▁( ▁tree ▁, <invocation_expression,left> <member_access_expression,left> ▁pattern ▁. ▁getPattern Tree <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁labels ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁ParseTree Match <argument_list,left> ▁( ▁tree ▁, ▁pattern ▁, ▁labels ▁, ▁mismatch ed Node ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add If No Overlap <parameter_list,left> ▁( <parameter,left> ▁Weight ed Phrase Info ▁w pi <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Weight ed Phrase Info ▁exist W pi <variable_declaration,right> ▁: ▁( ▁) ▁) ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁exist W pi ▁. ▁is Offset Overlap <member_access_expression,right> <argument_list,left> ▁( ▁w pi ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁get Terms Infos <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁addAll <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁w pi ▁. ▁get Terms Infos <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; ▁return ▁; <ERROR,left> ▁} ▁} <ERROR,right> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getPh rase List <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁w pi ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Three Way Merger ▁new Merger <parameter_list,left> ▁( <parameter,left> ▁Repository ▁db <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁In Core Merger <argument_list,left> ▁( ▁db ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁float ▁doc Score <parameter_list,left> ▁( <parameter,left> ▁int ▁docId <parameter,right> ▁, <parameter,left> ▁String ▁field <parameter,right> ▁, <parameter,left> ▁int ▁num Payload s Seen <parameter,right> ▁, <parameter,left> ▁float ▁payload Score <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <conditional_expression,left> <binary_expression,left> ▁num Payload s Seen ▁> ▁0 <binary_expression,right> ▁? <parenthesized_expression,left> ▁( <binary_expression,left> ▁payload Score ▁/ ▁num Payload s Seen <binary_expression,right> ▁) <parenthesized_expression,right> ▁: ▁1 <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁ParseTree ▁> <type_argument_list,right> <generic_name,right> ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁ParseTree ▁t <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁T rees ▁. ▁findAll Rule Nodes <member_access_expression,right> <argument_list,left> ▁( ▁t ▁, ▁rule Index ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getCondition Type <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getOptions <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁contains Font Formatting Block <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁_ font Formatting ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁contains Border Formatting Block <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁_ border Formatting ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁contains Pattern Formatting Block <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁_ pattern Formatting ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁get Formula 1 <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Tokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁get Formula 2 <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁get Tokens <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Service Updates Result ▁describe Service Updates <parameter_list,left> ▁( <parameter,left> ▁Describe Service Updates Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Service Updates <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getName Name <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getName At <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName Name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Locations Result ▁describe Locations <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Locations <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Locations Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> ▁getValue String <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getChild <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dir CacheEntry ▁getDir CacheEntry <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <conditional_expression,left> <binary_expression,left> ▁current Sub tree ▁== ▁null <binary_expression,right> ▁? ▁current Entry ▁: ▁null <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁IntBuffer ▁put <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁src Offset <parameter,right> ▁, <parameter,left> ▁int ▁int Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁src ▁. ▁length <member_access_expression,right> ▁, ▁src Offset ▁, ▁int Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁int Count ▁> <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Overflow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁src Offset <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <binary_expression,left> ▁src Offset ▁+ ▁int Count <binary_expression,right> <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁put <argument_list,left> ▁( <element_access_expression,left> ▁src <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁trim To Size <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁s <equals_value_clause,left> ▁= ▁size <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁s ▁== <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁s ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁array ▁= <member_access_expression,left> ▁Empty Array ▁. ▁OBJECT <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁newArray <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁s ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁array ▁, ▁0 ▁, ▁newArray ▁, ▁0 ▁, ▁s ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁array ▁= ▁newArray <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁mod Count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Local Gateway Virtual Interfaces Result ▁describe Local Gateway Virtual Interfaces <parameter_list,left> ▁( <parameter,left> ▁Describe Local Gateway Virtual Interfaces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Local Gateway Virtual Interfaces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁R uss ian Light St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁toArray <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁final ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁a <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁rval <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁a ▁. ▁length <member_access_expression,right> ▁== ▁_ limit <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁_ array ▁, ▁0 ▁, ▁a ▁, ▁0 ▁, ▁_ limit ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁rval ▁= ▁a <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁rval ▁= <invocation_expression,left> ▁toArray <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁rval ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Basic Session Credentials <tuple_pattern,left> ▁( ▁String ▁access KeyId ▁, ▁String ▁access Key Secret ▁, ▁String ▁session Token ▁, ▁long ▁role Session Duration Seconds ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁access KeyId ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁access Key Secret ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁access KeyId <member_access_expression,right> ▁= ▁access KeyId <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁access Key Secret <member_access_expression,right> ▁= ▁access Key Secret <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁session Token <member_access_expression,right> ▁= ▁session Token <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁role Session Duration Seconds <member_access_expression,right> ▁= ▁role Session Duration Seconds <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁session Started Time In Milli Seconds <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁current TimeMillis <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁Short Buffer ▁get <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁short <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁dst <parameter,right> ▁, <parameter,left> ▁int ▁dst Offset <parameter,right> ▁, <parameter,left> ▁int ▁short Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁short Count ▁> <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Under flow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁, ▁dst ▁, ▁dst Offset ▁, ▁short Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁position ▁+= ▁short Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Activ ate Event Source Result ▁activate Event Source <parameter_list,left> ▁( <parameter,left> ▁Activ ate Event Source Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Activate Event Source <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Receipt Rule Set Result ▁describe Receipt Rule Set <parameter_list,left> ▁( <parameter,left> ▁Describe Receipt Rule Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Receipt Rule Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Filter <tuple_pattern,left> ▁( ▁String ▁name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setName <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Double Buffer ▁put <parameter_list,left> ▁( <parameter,left> ▁double ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Traffic Policy Instance Result ▁create Traffic Policy Instance <parameter_list,left> ▁( <parameter,left> ▁Create Traffic Policy Instance Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Traffic Policy Instance <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁J apanese Iteration Mark Char Filter <tuple_pattern,left> ▁( ▁Reader ▁input ▁, ▁boolean ▁normalize K an ji ▁, ▁boolean ▁normalize K ana ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁input ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁normalize K an ji <member_access_expression,right> ▁= ▁normalize K an ji <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁normalize K ana <member_access_expression,right> ▁= ▁normalize K ana <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁reset <member_access_expression,right> <argument_list,left> ▁( ▁input ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁writeLong <parameter_list,left> ▁( <parameter,left> ▁long ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁writeInt <argument_list,left> ▁( <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁v ▁>> ▁0 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁writeInt <argument_list,left> ▁( <cast_expression,left> ▁( ▁int ▁) <parenthesized_expression,left> ▁( <binary_expression,left> ▁v ▁>> ▁32 <binary_expression,right> ▁) <parenthesized_expression,right> <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁File Resolver <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁exports  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁Concurrent HashMap <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁export Base ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁Copy OnWrite ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁getRef 3 DE val <parameter_list,left> ▁( <parameter,left> ▁Ref 3 DP x g ▁r pt g <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Sheet Range Evaluator <variable_declarator,left> ▁s re <equals_value_clause,left> ▁= <invocation_expression,left> ▁create Ex tern Sheet Ref Evaluator <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getSh eet Name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getLast Sheet Name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getExternal Workbook Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Lazy Ref Eval <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁r pt g ▁. ▁getColumn <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁s re ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Dataset Result ▁delete Dataset <parameter_list,left> ▁( <parameter,left> ▁Delete Dataset Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Dataset <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Start Rel ational Database Result ▁start Rel ational Database <parameter_list,left> ▁( <parameter,left> ▁Start Rel ational Database Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start Rel ational Database <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Reserved Cache Nodes Offer ings Result ▁describe Reserved Cache Nodes Offer ings <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Reserved Cache Nodes Offer ings <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Reserved Cache Nodes Offer ings Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁static ▁public ▁double ▁p mt <parameter_list,left> ▁( <parameter,left> ▁double ▁r <parameter,right> ▁, <parameter,left> ▁int ▁n per <parameter,right> ▁, <parameter,left> ▁double ▁pv <parameter,right> ▁, <parameter,left> ▁double ▁fv <parameter,right> ▁, <parameter,left> ▁int ▁type <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <prefix_unary_expression,left> ▁- ▁r <prefix_unary_expression,right> ▁* <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁pv ▁* <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁pow <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁1 ▁+ ▁r <binary_expression,right> ▁, ▁n per ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ ▁fv <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁/ <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁1 ▁+ <binary_expression,left> ▁r ▁* ▁type <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁* <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁pow <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁1 ▁+ ▁r <binary_expression,right> ▁, ▁n per ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Document Versions Result ▁describe Document Versions <parameter_list,left> ▁( <parameter,left> ▁Describe Document Versions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Document Versions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Publish ing Dest inations Result ▁list Publish ing Dest inations <parameter_list,left> ▁( <parameter,left> ▁List Publish ing Dest inations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Publish ing Dest inations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete Account Alias Request <tuple_pattern,left> ▁( ▁String ▁account Alias ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Account Alias <argument_list,left> ▁( ▁account Alias ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁grow <argument_list,left> ▁( ▁array ▁, <binary_expression,left> ▁1 ▁+ <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁output ToString <parameter_list,left> ▁( <parameter,left> ▁Object ▁output <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <ERROR,left> <parameter_list,left> ▁( <parameter,left> ▁output ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ ▁return <invocation_expression,left> <member_access_expression,left> ▁outputs ▁. ▁output ToString <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁T ▁) ▁output <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> ▁else <ERROR,right> <initializer_expression,left> ▁{ <postfix_unary_expression,left> <binary_expression,left> <assignment_expression,left> <invocation_expression,left> <invocation_expression,left> <member_access_expression,left> <assignment_expression,left> <assignment_expression,left> <binary_expression,left> <binary_expression,left> ▁List ▁< ▁T <binary_expression,right> ▁> ▁output List <binary_expression,right> ▁= <cast_expression,left> ▁( <generic_name,left> ▁List <type_argument_list,left> ▁< ▁T ▁> <type_argument_list,right> <generic_name,right> ▁) ▁output <cast_expression,right> <assignment_expression,right> <;,left> <;,right> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁for <ERROR,right> <argument_list,left> ▁( <declaration_expression,left> ▁int ▁i <declaration_expression,right>  <argument_list,right> <invocation_expression,right> ▁= ▁0 <assignment_expression,right> <;,left> <;,right> ▁< <invocation_expression,left> <member_access_expression,left> ▁output List ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <;,left> <;,right> ▁++ <postfix_unary_expression,right>  <initializer_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁outputs ▁. ▁output ToString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁output List ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁notify Delete Cell <parameter_list,left> ▁( <parameter,left> ▁Cell ▁cell <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ book Evaluator ▁. ▁notify Delete Cell <member_access_expression,right> <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁H SSF Evaluation Cell <argument_list,left> ▁( <cast_expression,left> ▁( ▁H SSF Cell ▁) ▁cell <cast_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁StringBuilder ▁replace <parameter_list,left> ▁( <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁, <parameter,left> ▁String ▁str <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁replace 0 <argument_list,left> ▁( ▁start ▁, ▁end ▁, ▁str ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Set Identity Pool Configuration Result ▁set Identity Pool Configuration <parameter_list,left> ▁( <parameter,left> ▁Set Identity Pool Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Set Identity Pool Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁k th Small est <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁, <parameter,left> ▁int ▁k <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <member_access_expression,left> ▁Double ▁. ▁NaN <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= <binary_expression,left> ▁k ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁v ▁!= ▁null <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁> ▁index <binary_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁index ▁>= ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁sort <member_access_expression,right> <argument_list,left> ▁( ▁v ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁r ▁= <element_access_expression,left> ▁v <bracketed_argument_list,left> ▁[ ▁index ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁>> ▁> ▁5 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁& ▁31 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁<< ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& <prefix_unary_expression,left> ▁~ <parenthesized_expression,left> ▁( <binary_expression,left> ▁3 L ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁value ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁getChildren <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getChildren <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Query Node ▁child <variable_declaration,right> ▁: ▁( ▁) ▁) ▁{ <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁child ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁sum Token Sizes <parameter_list,left> ▁( <parameter,left> ▁int ▁from I x <parameter,right> ▁, <parameter,left> ▁int ▁to I x <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁from I x <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁to I x <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁result ▁+= <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁_ pt gs <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁getSize <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setRead only <parameter_list,left> ▁( <parameter,left> ▁boolean ▁readonly <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁readonly <member_access_expression,right> ▁&& <prefix_unary_expression,left> ▁! ▁readonly <prefix_unary_expression,right> <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁readonly <member_access_expression,right> ▁= ▁readonly <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁clear Consum ing Cell <parameter_list,left> ▁( <parameter,left> ▁Formula Cell CacheEntry ▁c ce <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁_ consum ing Cells ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁c ce ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> ▁subList <parameter_list,left> ▁( <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁mutex ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new <generic_name,left> ▁Synchronized Random Access List <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁list ▁. ▁subList <member_access_expression,right> <argument_list,left> ▁( ▁start ▁, ▁end ▁) <argument_list,right> <invocation_expression,right> ▁, ▁mutex ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁File Header ▁getFile Header <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁file ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Attach Load B alancers Result ▁attach Load B alancers <parameter_list,left> ▁( <parameter,left> ▁Attach Load B alancers Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Attach Load B alancers <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Init iate Job Request <tuple_pattern,left> ▁( ▁String ▁accountId ▁, ▁String ▁vault Name ▁, ▁Job Parameters ▁job Parameters ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Account Id <argument_list,left> ▁( ▁accountId ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setV ault Name <argument_list,left> ▁( ▁vault Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setJob Parameters <argument_list,left> ▁( ▁job Parameters ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Replace able Attribute <tuple_pattern,left> ▁( ▁String ▁name ▁, ▁String ▁value ▁, ▁Boolean ▁replace ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setName <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setValue <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Replace <argument_list,left> ▁( ▁replace ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁add <parameter_list,left> ▁( <parameter,left> ▁Index able Field ▁field <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁fields ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁field ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Stack Set Result ▁delete Stack Set <parameter_list,left> ▁( <parameter,left> ▁Delete Stack Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Stack Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Repo Build Rule List Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Sparse Array <tuple_pattern,left> ▁( ▁int ▁initialCapacity ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁initialCapacity ▁= <invocation_expression,left> <member_access_expression,left> ▁ArrayUtils ▁. ▁ideal Int Array Size <member_access_expression,right> <argument_list,left> ▁( ▁initialCapacity ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Keys ▁= <array_creation_expression,left> ▁new <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁initialCapacity ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Values ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁initialCapacity ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Size ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Invoke Service Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( <ERROR,left> ▁" ▁- <ERROR,right> ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁List Album Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁has Previous <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁link ▁!= <member_access_expression,left> ▁list ▁. ▁void Link <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete H sm Configuration Result ▁delete H sm Configuration <parameter_list,left> ▁( <parameter,left> ▁Delete H sm Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete H sm Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Create LoadBalancer Request <tuple_pattern,left> ▁( ▁String ▁load Balancer Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set LoadBalancer Name <argument_list,left> ▁( ▁load Balancer Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁getUser Info <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁decode <argument_list,left> ▁( ▁userInfo ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Tag Att end ee Result ▁tag Att end ee <parameter_list,left> ▁( <parameter,left> ▁Tag Att end ee Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Tag Att end ee <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getRef Name <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁name ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Span Near Query ▁build <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Span Near Query <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁clauses ▁. ▁toArray <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁Span Query <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁clauses ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁, ▁slo p ▁, ▁ordered ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Sub Total <parameter_list,left> ▁( <parameter,left> ▁int ▁rowIndex <parameter,right> ▁, <parameter,left> ▁int ▁columnIndex <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DB Pro xies Result ▁describe DB Pro xies <parameter_list,left> ▁( <parameter,left> ▁Describe DB Pro xies Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe DB Pro xies <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Voice Connector Proxy Result ▁get Voice Connector Proxy <parameter_list,left> ▁( <parameter,left> ▁Get Voice Connector Proxy Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Voice Connector Proxy <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Window Cache Config ▁from Config <parameter_list,left> ▁( <parameter,left> ▁Config ▁rc <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Packed Git Use Str ong Refs <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getBoolean <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁CONFIG _ KEY _ PACK ED _ G IT _ USE _ STR ONG RE FS ▁, <invocation_expression,left> ▁is Packed Git Use Str ong Refs <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Packed Git Open Files <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ PACK ED _ G IT _ OPEN FILES ▁, <invocation_expression,left> ▁getPack ed Git Open Files <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Packed Git Limit <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getLong <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ PACK ED _ G IT _ LIMIT ▁, <invocation_expression,left> ▁getPack ed Git Limit <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Packed Git WindowSize <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ PACK ED _ G IT _ WINDOW SIZE ▁, <invocation_expression,left> ▁getPack ed Git WindowSize <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Packed Git MM AP <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getBoolean <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ PACK ED _ G IT _ MM AP ▁, <invocation_expression,left> ▁is Packed Git MM AP <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Delta Base Cache Limit <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ DE L TA _ BASE _ CACHE _ LIMIT ▁, <invocation_expression,left> ▁getD elta Base Cache Limit <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁max Mem <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Runtime ▁. ▁getRuntime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁max Memory <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁s ft <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁rc ▁. ▁getLong <member_access_expression,right> <argument_list,left> ▁( ▁CONFIG _ CORE _ SECTION ▁, ▁null ▁, ▁CONFIG _ KEY _ STREAM _ FILE _ T RESHOLD ▁, <invocation_expression,left> ▁getStream File Threshold <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁s ft ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁s ft ▁, <binary_expression,left> ▁max Mem ▁/ ▁4 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁s ft ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁s ft ▁, <member_access_expression,left> ▁Integer ▁. ▁MAX _ VALUE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Stream File Threshold <argument_list,left> ▁( <cast_expression,left> ▁( ▁int ▁) ▁s ft <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Date ▁getJava Date <parameter_list,left> ▁( <parameter,left> ▁double ▁date <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getJava Date <argument_list,left> ▁( ▁date ▁, ▁false ▁, ▁null ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Start Person Tracking Result ▁start Person Tracking <parameter_list,left> ▁( <parameter,left> ▁Start Person Tracking Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start Person Tracking <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public <predefined_type,left> <predefined_type,right> <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁totalSize ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Route Result ▁getRoute <parameter_list,left> ▁( <parameter,left> ▁Get Route Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Route <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Cluster Result ▁delete Cluster <parameter_list,left> ▁( <parameter,left> ▁Delete Cluster Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Cluster <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get Add Menu Count <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getDel Menu Count <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁File Based Config <tuple_pattern,left> ▁( ▁Config ▁base ▁, ▁File ▁cfg Location ▁, ▁FS ▁fs ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁base ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁configFile ▁= ▁cfg Location <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁fs <member_access_expression,right> ▁= ▁fs <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁snapshot <member_access_expression,right> ▁= <member_access_expression,left> ▁File Snapshot ▁. ▁DIR TY <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁hash <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁ObjectId ▁. ▁zero Id <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁following <parameter_list,left> ▁( <parameter,left> ▁int ▁pos <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁pos ▁< <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁getB egin Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁pos ▁> <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁getEnd Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁0 ▁== <member_access_expression,left> ▁sentence Start s ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁setIndex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁getB egin Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁DONE ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁pos ▁>= <element_access_expression,left> ▁sentence Start s <bracketed_argument_list,left> ▁[ <binary_expression,left> <member_access_expression,left> ▁sentence Start s ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁setIndex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁getEnd Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁current Sentence ▁= <binary_expression,left> <member_access_expression,left> ▁sentence Start s ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁DONE ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁current Sentence ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <member_access_expression,left> ▁sentence Start s ▁. ▁length <member_access_expression,right> ▁- ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁/ ▁2 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁moveTo Sentence At <argument_list,left> ▁( ▁pos ▁, ▁0 ▁, <binary_expression,left> <member_access_expression,left> ▁sentence Start s ▁. ▁length <member_access_expression,right> ▁- ▁2 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁text ▁. ▁setIndex <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁sentence Start s <bracketed_argument_list,left> ▁[ <prefix_unary_expression,left> ▁++ ▁current Sentence <prefix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁current <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Parameter Group Result ▁update Parameter Group <parameter_list,left> ▁( <parameter,left> ▁Update Parameter Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Parameter Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Series Chart Group Index Record ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁calc Distance From Err P ct <parameter_list,left> ▁( <parameter,left> ▁Shape ▁shape <parameter,right> ▁, <parameter,left> ▁double ▁dist Err P ct <parameter,right> ▁, <parameter,left> ▁Spatial Context ▁ctx <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁dist Err P ct ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁dist Err P ct ▁> ▁0.5 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁dist Err P ct <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁dist Err P ct ▁== ▁0 <binary_expression,right> ▁|| ▁shape ▁instanceof ▁Point <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁0 ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Rectangle <variable_declarator,left> ▁bbox <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁shape ▁. ▁getBound ingBox <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Point <variable_declarator,left> ▁ctr <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁bbox ▁. ▁getC enter <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁y <equals_value_clause,left> ▁= <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ctr ▁. ▁getY <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁>= ▁0 <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁bbox ▁. ▁getMax Y <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: <invocation_expression,left> <member_access_expression,left> ▁bbox ▁. ▁getMin Y <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁) <parenthesized_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁diagonal Dist <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ctx ▁. ▁getDist Calc <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁distance <member_access_expression,right> <argument_list,left> ▁( ▁ctr ▁, <invocation_expression,left> <member_access_expression,left> ▁bbox ▁. ▁getMax X <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁y ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> ▁diagonal Dist ▁* ▁dist Err P ct <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁codePoint At <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁index ▁< ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁index ▁>= ▁count <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <invocation_expression,left> ▁index And Length <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Character ▁. ▁codePoint At <member_access_expression,right> <argument_list,left> ▁( ▁value ▁, ▁index ▁, ▁count ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setPassword Verifier <parameter_list,left> ▁( <parameter,left> ▁int ▁password Verifier <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁password Verifier <member_access_expression,right> ▁= ▁password Verifier <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁List Vault s Request <tuple_pattern,left> ▁( ▁String ▁accountId ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Account Id <argument_list,left> ▁( ▁accountId ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁S qu ash Message Formatter <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁date Formatter  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Git Date Formatter <argument_list,left> ▁( <member_access_expression,left> ▁Format ▁. ▁DEFAULT <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Video Cover Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁lastIndexOf <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁pos <equals_value_clause,left> ▁= ▁size <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁link <equals_value_clause,left> ▁= <member_access_expression,left> ▁void Link ▁. ▁previous <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <ERROR,left> ▁object ▁!= <ERROR,right> ▁null ▁) <block,left> ▁{ <while_statement,left> ▁while ▁( <binary_expression,left> ▁link ▁!= ▁void Link <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁pos ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁object ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁link ▁. ▁data <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁pos ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁link ▁= <member_access_expression,left> ▁link ▁. ▁previous <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <while_statement,left> ▁while ▁( <binary_expression,left> ▁link ▁!= ▁void Link <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁pos ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁link ▁. ▁data <member_access_expression,right> ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁pos ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁link ▁= <member_access_expression,left> ▁link ▁. ▁previous <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Spot F leet Requests Result ▁describe Spot F leet Requests <parameter_list,left> ▁( <parameter,left> ▁Describe Spot F leet Requests Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Spot F leet Requests <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Index Faces Result ▁index Faces <parameter_list,left> ▁( <parameter,left> ▁Index Faces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Index Faces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rule Based Break Iterator ▁getB reak Iterator <parameter_list,left> ▁( <parameter,left> ▁int ▁script <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <switch_statement,left> ▁switch ▁( ▁script ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case <member_access_expression,left> ▁U Script ▁. ▁J AP A NE SE <member_access_expression,right> ▁: <case_switch_label,right> <return_statement,left> ▁return <cast_expression,left> ▁( ▁Rule Based Break Iterator ▁) <invocation_expression,left> <member_access_expression,left> ▁c jk Break Iterator ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case <member_access_expression,left> ▁U Script ▁. ▁MY AN MAR <member_access_expression,right> ▁: <case_switch_label,right> <if_statement,left> ▁if ▁( ▁my an mar As Words ▁) <block,left> ▁{ <return_statement,left> ▁return <cast_expression,left> ▁( ▁Rule Based Break Iterator ▁) <invocation_expression,left> <member_access_expression,left> ▁default Break Iterator ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <cast_expression,left> ▁( ▁Rule Based Break Iterator ▁) <invocation_expression,left> <member_access_expression,left> ▁my an mar Sy l lable Iterator ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <return_statement,left> ▁return <cast_expression,left> ▁( ▁Rule Based Break Iterator ▁) <invocation_expression,left> <member_access_expression,left> ▁default Break Iterator ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> ▁; <return_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁b <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁first Row ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁last Row ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁first Col ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁last Col ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁char Count ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁char Type ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get Readable Path <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getPack ed Git Open Files <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁packed Git Open Files ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getTo Unicode LE <parameter_list,left> ▁( <parameter,left> ▁String ▁string <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁string ▁. ▁getBytes <member_access_expression,right> <argument_list,left> ▁( ▁UTF 16 LE ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁List <type_parameter_list,left> ▁< ▁String ▁> <type_parameter_list,right> ▁getF ooter Lines <parameter_list,left> ▁( <parameter,left> ▁String ▁keyName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getF ooter Lines <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁F ooter Key <argument_list,left> ▁( ▁keyName ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁refresh <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁refresh <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁clear References <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁float ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁getFloat <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁index ▁* <member_access_expression,left> ▁Size Of ▁. ▁FLOAT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Detector Result ▁delete Detector <parameter_list,left> ▁( <parameter,left> ▁Delete Detector Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Detector <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁grow <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁bytes Start <variable_declaration,right> <ERROR,left> ▁!= ▁null <ERROR,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <assignment_expression,left> ▁bytes Start ▁= <invocation_expression,left> <member_access_expression,left> ▁ArrayUtil ▁. ▁grow <member_access_expression,right> <argument_list,left> ▁( ▁bytes Start ▁, <binary_expression,left> <member_access_expression,left> ▁bytes Start ▁. ▁length <member_access_expression,right> ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Ex clusions Result ▁list Ex clusions <parameter_list,left> ▁( <parameter,left> ▁List Ex clusions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Ex clusions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Spatial Strategy ▁getSp atial Strategy <parameter_list,left> ▁( <parameter,left> ▁int ▁round Number <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Spatial Strategy <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁spatial Strategy Cache ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁round Number ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁result ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁DB Cluster ▁restore DB Cluster To Point In Time <parameter_list,left> ▁( <parameter,left> ▁Restore DB Cluster To Point In Time Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Restore DB Cluster To Point In Time <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ category DataType ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _2_ values DataType ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _3_ num Categories ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _4_ num Values ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _ 5_ b ubble Series Type ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _ 6_ num B ubble Values ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Post Agent Profile Result ▁post Agent Profile <parameter_list,left> ▁( <parameter,left> ▁Post Agent Profile Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Post Agent Profile <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ParseTree Pattern ▁compile Parse Tree Pattern <parameter_list,left> ▁( <parameter,left> ▁String ▁pattern <parameter,right> ▁, <parameter,left> ▁int ▁pattern Rule Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> ▁getToken Stream <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Token Source <variable_declarator,left> ▁token Source <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getToken Stream <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getToken Source <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁token Source ▁instanceof ▁Lex er ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Lex er <variable_declarator,left> ▁lexer <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Lex er ▁) ▁token Source <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁compile Parse Tree Pattern <argument_list,left> ▁( ▁pattern ▁, ▁pattern Rule Index ▁, ▁lexer ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Back track DB Cluster Result ▁back track DB Cluster <parameter_list,left> ▁( <parameter,left> ▁Back track DB Cluster Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Back track DB Cluster <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getName <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁strategy Name ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁copyTo <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁format Hex Byte <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁0 <binary_expression,right> ▁, ▁w 1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁format Hex Byte <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁8 <binary_expression,right> ▁, ▁w 2 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁format Hex Byte <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁16 <binary_expression,right> ▁, ▁w 3 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁format Hex Byte <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁24 <binary_expression,right> ▁, ▁w 4 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁format Hex Byte <argument_list,left> ▁( ▁b ▁, <binary_expression,left> ▁o ▁+ ▁32 <binary_expression,right> ▁, ▁w 5 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁Int List ▁line Map <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁buf <parameter,right> ▁, <parameter,left> ▁int ▁ptr <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Int List <variable_declarator,left> ▁map <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Int List <argument_list,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁end ▁- ▁ptr <binary_expression,right> ▁) <parenthesized_expression,right> ▁/ ▁36 <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁map ▁. ▁fill To <member_access_expression,right> <argument_list,left> ▁( ▁1 ▁, <member_access_expression,left> ▁Integer ▁. ▁MIN _ VALUE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( ▁; <binary_expression,left> ▁ptr ▁< ▁end <binary_expression,right> ▁; <assignment_expression,left> ▁ptr ▁= <invocation_expression,left> ▁next LF <argument_list,left> ▁( ▁buf ▁, ▁ptr ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁map ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁ptr ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁map ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁end ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁map ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁ObjectId ▁> <type_argument_list,right> <generic_name,right> ▁get Additional H aves <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁emptySet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁synchronized ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁size InBytes <equals_value_clause,left> ▁= <binary_expression,left> ▁BASE _ RAM _ BYTES _ USED ▁+ <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁fields ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁* ▁2 <binary_expression,right> ▁* <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁NUM _ BYTES _ OBJECT _ REF <member_access_expression,right> <binary_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Simple Text Terms ▁simple Text Terms <variable_declaration,right> <ERROR,left> ▁: ▁. ▁( ▁) <ERROR,right> ▁) ▁{ <assignment_expression,left> ▁size InBytes ▁+= <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁simple Text Terms ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁simple Text Terms ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁0 <conditional_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁size InBytes ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁String ▁to Xml <parameter_list,left> ▁( <parameter,left> ▁String ▁tab <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁builder <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁builder ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁tab ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRecord Name <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁E sch er Record ▁es ch er Record <variable_declaration,right> ▁: ▁( ▁) ▁) ▁{ <invocation_expression,left> <member_access_expression,left> ▁builder ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁es ch er Record ▁. ▁to Xml <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁tab ▁+ <string_literal,left> ▁" ▁\ t ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; ▁} <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁builder ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁tab ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRecord Name <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; ▁return <invocation_expression,left> <member_access_expression,left> ▁builder ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁G alic ian Min imal St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁tree Id ▁!= ▁null <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁tree Id ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁ObjectId ▁p <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁p ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁author ▁!= ▁null <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁author ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁committer ▁!= ▁null <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁committer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁gpg Signature ▁!= ▁null <binary_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁gpg Signature ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁encoding ▁!= ▁null <binary_expression,right> ▁&& <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁References ▁. ▁isSame Object <member_access_expression,right> <argument_list,left> ▁( ▁encoding ▁, ▁UTF _8 ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁encoding ▁. ▁name <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁} <ERROR,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> ▁message ▁!= ▁null <binary_expression,right> ▁? ▁message ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> <;,left> <;,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁return <ERROR,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ind ic Normal ization FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Option Group ▁create Option Group <parameter_list,left> ▁( <parameter,left> ▁Create Option Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Option Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Member Account Result ▁associate Member Account <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Member Account Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Member Account <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁run <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁do Refresh Progress <argument_list,left> ▁( ▁m Id ▁, ▁mProgress ▁, ▁m From User ▁, ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Refresh Progress Runnable ▁= ▁this <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Set Termination Protection Result ▁set Termination Protection <parameter_list,left> ▁( <parameter,left> ▁Set Termination Protection Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Set Termination Protection <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getError Header <parameter_list,left> ▁( <parameter,left> ▁Recognition Exception ▁e <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁line <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁get Off ending Token <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getLine <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁char Position In Line <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁get Off ending Token <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getChar Position In Line <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁line <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁char Position In Line <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁CharBuffer ▁as ReadOnly Buffer <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Char To ByteBuffer Adapter <variable_declarator,left> ▁buf <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Char To ByteBuffer Adapter <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁as ReadOnly Buffer <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁limit <member_access_expression,right> ▁= ▁limit <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁position <member_access_expression,right> ▁= ▁position <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁buf ▁. ▁mark <member_access_expression,right> ▁= ▁mark <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> <member_access_expression,left> ▁buf ▁. ▁byteBuffer <member_access_expression,right> ▁. ▁order <member_access_expression,right> ▁= <member_access_expression,left> ▁byteBuffer ▁. ▁order <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁buf ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Sent iment Detection Job Result ▁stop Sent iment Detection Job <parameter_list,left> ▁( <parameter,left> ▁Stop Sent iment Detection Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Sent iment Detection Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁ObjectId Subclass Map <type_argument_list,left> ▁< ▁ObjectId ▁> <type_argument_list,right> <generic_name,right> ▁getNew Object Ids <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁new Object Ids ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁new Object Ids ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new <generic_name,left> ▁ObjectId Subclass Map <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁hash ▁= <invocation_expression,left> ▁hash <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Not Closed <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁mark ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IOException <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos ▁= ▁mark <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ref Error Pt g <tuple_pattern,left> ▁( ▁L ittle Endian Input ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ reserved ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁S uspend Game Server Group Result ▁suspend Game Server Group <parameter_list,left> ▁( <parameter,left> ▁S uspend Game Server Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Suspend Game Server Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁!= ▁3 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁evaluate <argument_list,left> ▁( ▁src Row Index ▁, ▁src ColumnIndex ▁, <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁2 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Repo Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁setDate <parameter_list,left> ▁( <parameter,left> ▁Date ▁date <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁date ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setDate <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Date Tools ▁. ▁date ToString <member_access_expression,right> <argument_list,left> ▁( ▁date ▁, <member_access_expression,left> <member_access_expression,left> ▁Date Tools ▁. ▁Resolution <member_access_expression,right> ▁. ▁SECOND <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁date <member_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁G erman Min imal St em Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁toArray <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁a ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁check Offset And Count <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁synchronized <argument_list,left> ▁( ▁lock ▁) <argument_list,right> <invocation_expression,right>  <expression_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁expand <argument_list,left> ▁( ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁arraycopy <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁, ▁offset ▁, <member_access_expression,left> ▁this ▁. ▁buf <member_access_expression,right> ▁, <member_access_expression,left> ▁this ▁. ▁count <member_access_expression,right> ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁count <member_access_expression,right> ▁+= ▁len <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁Rev Filter ▁after <parameter_list,left> ▁( <parameter,left> ▁Date ▁ts <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁after <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁ts ▁. ▁getTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete Group Policy Request <tuple_pattern,left> ▁( ▁String ▁groupName ▁, ▁String ▁policy Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set GroupName <argument_list,left> ▁( ▁groupName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Policy Name <argument_list,left> ▁( ▁policy Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁D eregister Trans it Gateway Multicast Group Members Result ▁d eregister Trans it Gateway Multicast Group Members <parameter_list,left> ▁( <parameter,left> ▁D eregister Trans it Gateway Multicast Group Members Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute D eregister Trans it Gateway Multicast Group Members <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Batch Delete Scheduled Action Result ▁batch Delete Scheduled Action <parameter_list,left> ▁( <parameter,left> ▁Batch Delete Scheduled Action Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Batch Delete Scheduled Action <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Algorithm Result ▁create Algorithm <parameter_list,left> ▁( <parameter,left> ▁Create Algorithm Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Algorithm <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁read U Byte <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁readByte <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁& ▁0 x 00 FF <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setLength <parameter_list,left> ▁( <parameter,left> ▁int ▁sz <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁encode Int 32 <member_access_expression,right> <argument_list,left> ▁( ▁info ▁, <binary_expression,left> ▁info Offset ▁+ ▁P _ SIZE <binary_expression,right> ▁, ▁sz ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Scaling Process Types Result ▁describe Scaling Process Types <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Scaling Process Types <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Scaling Process Types Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Resource Record Sets Result ▁list Resource Record Sets <parameter_list,left> ▁( <parameter,left> ▁List Resource Record Sets Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Resource Record Sets <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Token ▁recover Inline <parameter_list,left> ▁( <parameter,left> ▁Parser ▁recogn izer <parameter,right> ▁) <parameter_list,right> ▁throws ▁Recognition Exception <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Input Mismatch Exception <variable_declarator,left> ▁e <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Input Mismatch Exception <argument_list,left> ▁( ▁recogn izer ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁Parser Rule Context <variable_declarator,left> ▁context <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁getContext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁context ▁!= ▁null <binary_expression,right> ▁; <assignment_expression,left> ▁context ▁= <invocation_expression,left> <member_access_expression,left> ▁context ▁. ▁getParent <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁context ▁. ▁exception <member_access_expression,right> ▁= ▁e <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Parse Can cellation Exception <argument_list,left> ▁( ▁e ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Set Tags For Resource Result ▁set Tags For Resource <parameter_list,left> ▁( <parameter,left> ▁Set Tags For Resource Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Set Tags For Resource <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Modify Strategy Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe V pc Endpoint Services Result ▁describe V pc Endpoint Services <parameter_list,left> ▁( <parameter,left> ▁Describe V pc Endpoint Services Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe V pc Endpoint Services <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Enable Logging Result ▁enable Logging <parameter_list,left> ▁( <parameter,left> ▁Enable Logging Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Enable Logging <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁contains <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Concurrent HashMap ▁. ▁this <member_access_expression,right> ▁. ▁containsValue <member_access_expression,right> <argument_list,left> ▁( ▁o ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Sheet Range Identifier <tuple_pattern,left> ▁( ▁String ▁book Name ▁, ▁Name Identifier ▁first Sheet Identifier ▁, ▁Name Identifier ▁last Sheet Identifier ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁book Name ▁, ▁first Sheet Identifier ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ last Sheet Identifier ▁= ▁last Sheet Identifier <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Domain Metadata Request <tuple_pattern,left> ▁( ▁String ▁domain Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Domain Name <argument_list,left> ▁( ▁domain Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<ERROR,left> ▁public <array_type,left> <array_type,left> ▁ParseException <ERROR,left> ▁( ▁Token ▁currentToken Val ▁, ▁int <ERROR,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁expected Token Sequ ences Val ▁, ▁String ▁[ <ERROR,left> ▁] ▁token Image Val ▁) <ERROR,right> <initializer_expression,left> ▁{ <assignment_expression,left> <member_access_expression,left> <assignment_expression,left> <member_access_expression,left> <assignment_expression,left> <member_access_expression,left> <invocation_expression,left> ▁super <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Message Impl <argument_list,left> ▁( <member_access_expression,left> ▁Query Parser Messages ▁. ▁INVALID _ SY NT AX <member_access_expression,right> ▁, <invocation_expression,left> ▁initialise <argument_list,left> ▁( ▁currentToken Val ▁, ▁expected Token Sequ ences Val ▁, ▁token Image Val ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁; ▁this <ERROR,right> ▁. ▁currentToken <member_access_expression,right> ▁= ▁currentToken Val <assignment_expression,right> <ERROR,left> ▁; ▁this <ERROR,right> ▁. ▁expected Token Sequ ences <member_access_expression,right> ▁= ▁expected Token Sequ ences Val <assignment_expression,right> <ERROR,left> ▁; ▁this <ERROR,right> ▁. ▁token Image <member_access_expression,right> ▁= ▁token Image Val <assignment_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Fetch Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁PrintWriter ▁writer <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁writer ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁N G ram Tokenizer Factory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁min G ram Size ▁= <invocation_expression,left> ▁getInt <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <member_access_expression,left> ▁N G ram Tokenizer ▁. ▁DEFAULT _ MIN _ NG RAM _ SIZE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁max G ram Size ▁= <invocation_expression,left> ▁getInt <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <member_access_expression,left> ▁N G ram Tokenizer ▁. ▁DEFAULT _ MAX _ NG RAM _ SIZE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁isDirectory File Conflict <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁df Conflict ▁!= ▁null <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Ind ones ian St em Filter <tuple_pattern,left> ▁( ▁TokenStream ▁input ▁, ▁boolean ▁stem Der iv ational ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁input ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁stem Der iv ational <member_access_expression,right> ▁= ▁stem Der iv ational <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Traffic Policy Result ▁create Traffic Policy <parameter_list,left> ▁( <parameter,left> ▁Create Traffic Policy Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Traffic Policy <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeInt <member_access_expression,right> <argument_list,left> ▁( ▁f SD ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeInt <member_access_expression,right> <argument_list,left> ▁( ▁password Verifier ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁write Unicode String <qualified_name,right> <tuple_pattern,left> ▁( ▁out ▁, ▁title ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁write <member_access_expression,right> <argument_list,left> ▁( ▁security Descriptor ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁floor <parameter_list,left> ▁( <parameter,left> ▁double ▁n <parameter,right> ▁, <parameter,left> ▁double ▁s <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁s ▁== ▁0 <binary_expression,right> ▁&& <binary_expression,left> ▁n ▁!= ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Double ▁. ▁NaN <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁n ▁== ▁0 <binary_expression,right> ▁|| <binary_expression,left> ▁s ▁== ▁0 <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁0 ▁: <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁floor <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁n ▁/ ▁s <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁* ▁s <binary_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public <variable_declaration,left> <array_type,left> ▁ByteArray Data Output <ERROR,left> ▁( ▁byte <ERROR,right> <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁bytes ▁, ▁int ▁offset ▁, ▁int <variable_declaration,right> ▁) <ERROR,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁reset <argument_list,left> ▁( ▁bytes ▁, ▁offset ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Tree ▁> <type_argument_list,right> <generic_name,right> ▁getChildren <parameter_list,left> ▁( <parameter,left> ▁Tree ▁t <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Tree ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁kids <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁Tree ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁t ▁. ▁getChildCount <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁kids ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁t ▁. ▁getChild <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁kids ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Hashtable ▁. ▁this <member_access_expression,right> ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Refresh All Record <tuple_pattern,left> ▁( ▁boolean ▁refresh All ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Refresh All <argument_list,left> ▁( ▁refresh All ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete Named Query Result ▁delete Named Query <parameter_list,left> ▁( <parameter,left> ▁Delete Named Query Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Named Query <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Graph viz Formatter <tuple_pattern,left> ▁( ▁Connection Cost s ▁costs ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁costs <member_access_expression,right> ▁= ▁costs <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁best Path Map <member_access_expression,right> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashMap <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁format Header <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁+ ▁B OS _ LABEL <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁\ n ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Check Multi agent Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( <ERROR,left> ▁" ▁- <ERROR,right> ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List User Profiles Result ▁list User Profiles <parameter_list,left> ▁( <parameter,left> ▁List User Profiles Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List User Profiles <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Rel ational Database From Snapshot Result ▁create Rel ational Database From Snapshot <parameter_list,left> ▁( <parameter,left> ▁Create Rel ational Database From Snapshot Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Rel ational Database From Snapshot <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Start Task Result ▁start Task <parameter_list,left> ▁( <parameter,left> ▁Start Task Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start Task <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁get Ignored Paths <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁ignored Paths ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁F eat Smart Tag <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁data ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read Rem ainder <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Change <tuple_pattern,left> ▁( ▁Change Action ▁action ▁, ▁Resource Record Set ▁resource Record Set ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setAction <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁action ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setResource Record Set <argument_list,left> ▁( ▁resource Record Set ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete Image Result ▁delete Image <parameter_list,left> ▁( <parameter,left> ▁Delete Image Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Image <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Configuration Set Result ▁create Configuration Set <parameter_list,left> ▁( <parameter,left> ▁Create Configuration Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Configuration Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> ▁iterator <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁snapshot <equals_value_clause,left> ▁= ▁elements <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new <generic_name,left> ▁C ow Iterator <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁snapshot ▁, ▁0 ▁, <member_access_expression,left> ▁snapshot ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁visit Contain ed Records <parameter_list,left> ▁( <parameter,left> ▁Record Visitor ▁rv <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁_ rec s ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁rv ▁. ▁visit Record <member_access_expression,right> <argument_list,left> ▁( ▁_ bo f Rec ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁_ rec s ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Record Base <variable_declarator,left> ▁rb <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ rec s ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁rb ▁instanceof ▁Record Aggregate ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Record Aggregate ▁) ▁rb <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁visit Contain ed Records <member_access_expression,right> <argument_list,left> ▁( ▁rv ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁rv ▁. ▁visit Record <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁apache <qualified_name,right> ▁. ▁poi <qualified_name,right> ▁. ▁h ss f <qualified_name,right> ▁. ▁record <qualified_name,right> ▁. ▁Record <qualified_name,right> ▁) ▁rb <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁rv ▁. ▁visit Record <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁EOF Record ▁. ▁instance <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getData Size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( ▁reserved ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁B AT Block ▁createEmpty B AT Block <parameter_list,left> ▁( <parameter,left> ▁final ▁POI FS Big BlockSize <parameter,right> ▁big BlockSize ▁, <parameter,left> ▁boolean ▁is X B AT <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁B AT Block <variable_declarator,left> ▁block <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁B AT Block <argument_list,left> ▁( ▁big BlockSize ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁is X B AT ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁_ entries _ per _ x bat _ block <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁big BlockSize ▁. ▁getX B AT Entries Per Block <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> <member_access_expression,left> ▁block ▁. ▁_ values <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁_ entries _ per _ x bat _ block ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <member_access_expression,left> ▁POI FS Constants ▁. ▁END _ OF _ CH AIN <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁block ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Tag Resource Result ▁tag Resource <parameter_list,left> ▁( <parameter,left> ▁Tag Resource Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Tag Resource <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Mail box Permissions Result ▁delete Mail box Permissions <parameter_list,left> ▁( <parameter,left> ▁Delete Mail box Permissions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Mail box Permissions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Dataset Groups Result ▁list Dataset Groups <parameter_list,left> ▁( <parameter,left> ▁List Dataset Groups Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Dataset Groups <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Res ume Processes Result ▁resume Processes <parameter_list,left> ▁( <parameter,left> ▁Res ume Processes Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Resume Processes <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Person Tracking Result ▁getPerson Tracking <parameter_list,left> ▁( <parameter,left> ▁Get Person Tracking Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Person Tracking <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to Formula String <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁operands <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁space ▁. ▁isSet <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁opt i If ▁. ▁isSet <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁to Formula String <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁opt i Skip ▁. ▁isSet <member_access_expression,right> <argument_list,left> ▁( ▁_ options ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> ▁to Formula String <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁to Formula String <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁T ▁merge <parameter_list,left> ▁( <parameter,left> ▁T ▁first <parameter,right> ▁, <parameter,left> ▁T ▁second <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁message <member_access_expression,right> ▁. ▁getKey <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getLocalized Message <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁XPath <tuple_pattern,left> ▁( ▁Parser ▁parser ▁, ▁String ▁path ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁parser <member_access_expression,right> ▁= ▁parser <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁path <member_access_expression,right> ▁= ▁path <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁elements ▁= <invocation_expression,left> ▁split <argument_list,left> ▁( ▁path ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Create Account Alias Request <tuple_pattern,left> ▁( ▁String ▁account Alias ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Account Alias <argument_list,left> ▁( ▁account Alias ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁j <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁byte ▁block <equals_value_clause,left> ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁7 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁6 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁5 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁block ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Push Connection ▁open Push <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁Transport Exception <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Tcp Push Connection <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁str c py <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁dst <parameter,right> ▁, <parameter,left> ▁int ▁di <parameter,right> ▁, <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁si <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <while_statement,left> ▁while ▁( <binary_expression,left> <element_access_expression,left> ▁src <bracketed_argument_list,left> ▁[ ▁si ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁!= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁dst <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁di ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <element_access_expression,left> ▁src <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁si ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁dst <bracketed_argument_list,left> ▁[ ▁di ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public ▁K ▁getKey <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁map Entry ▁. ▁getKey <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁int ▁num Non null <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁data ▁== ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁n ▁; <return_statement,right> <if_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Object ▁o <variable_declaration,right> ▁: ▁) ▁{ <postfix_unary_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁o ▁!= ▁null <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁n ▁++ <postfix_unary_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁n ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁void ▁add <parameter_list,left> ▁( <parameter,left> ▁int ▁location <parameter,right> ▁, <parameter,left> ▁E ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁location ▁>= ▁0 <binary_expression,right> ▁&& <binary_expression,left> ▁location ▁<= ▁size <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁link <equals_value_clause,left> ▁= ▁void Link <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁location ▁< <parenthesized_expression,left> ▁( <binary_expression,left> ▁size ▁/ ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁<= ▁location <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁link ▁= <member_access_expression,left> ▁link ▁. ▁next <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁size <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁> ▁location <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁link ▁= <member_access_expression,left> ▁link ▁. ▁previous <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁previous <equals_value_clause,left> ▁= <member_access_expression,left> ▁link ▁. ▁previous <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁new Link <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁Link <type_argument_list,left> ▁< ▁E ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( <declaration_expression,left> ▁object ▁, ▁previous <declaration_expression,right> ▁, ▁link ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁previous ▁. ▁next <member_access_expression,right> ▁= ▁new Link <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁link ▁. ▁previous <member_access_expression,right> ▁= ▁new Link <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁size ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁mod Count ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Index OutOfBounds Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Domain Result ▁describe Domain <parameter_list,left> ▁( <parameter,left> ▁Describe Domain Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Domain <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁flush <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁flush <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁P ers ian Char FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁increment Token <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁used ▁) <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁clear Attributes <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁term Attribute ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁offset Attribute ▁. ▁set Offset <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁used ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Float Buffer ▁allocate <parameter_list,left> ▁( <parameter,left> ▁int ▁capacity <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁capacity ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Read Write Float Array Buffer <argument_list,left> ▁( ▁capacity ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁Edit ▁after <parameter_list,left> ▁( <parameter,left> ▁Edit ▁cut <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Edit <argument_list,left> ▁( <member_access_expression,left> ▁cut ▁. ▁end A <member_access_expression,right> ▁, ▁end A ▁, <member_access_expression,left> ▁cut ▁. ▁end B <member_access_expression,right> ▁, ▁end B ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Rule Version Result ▁update Rule Version <parameter_list,left> ▁( <parameter,left> ▁Update Rule Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Rule Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Voice Connector Termination Credentials Result ▁list Voice Connector Termination Credentials <parameter_list,left> ▁( <parameter,left> ▁List Voice Connector Termination Credentials Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Voice Connector Termination Credentials <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Deployment Target Result ▁getDep loyment Target <parameter_list,left> ▁( <parameter,left> ▁Get Deployment Target Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Deployment Target <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set No Child Report <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁let Child Report ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁final ▁Perf Task <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <declaration_expression,left> ▁task ▁instanceof <declaration_expression,right> ▁Task Sequence ▁) <argument_list,right> <invocation_expression,right> ▁{ <argument_list,left> ▁( <cast_expression,left> ▁( ▁Task Sequence ▁) ▁task <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁set No Child Report <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; ▁} ▁} <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁location <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁a <bracketed_argument_list,left> ▁[ ▁location ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Array IndexOutOfBounds Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> <member_access_expression,left> java ▁. ▁util <member_access_expression,right> ▁. ▁ArrayList <member_access_expression,right> ▁. ▁throw IndexOutOfBounds Exception <member_access_expression,right> <argument_list,left> ▁( ▁location ▁, <member_access_expression,left> ▁a ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DataSet Result ▁describe DataSet <parameter_list,left> ▁( <parameter,left> ▁Describe DataSet Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe DataSet <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Skip Work Tree Filter <tuple_pattern,left> ▁( ▁int ▁tree Idx ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁tree Idx <member_access_expression,right> ▁= ▁tree Idx <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Network Interfaces Result ▁describe Network Interfaces <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe Network Interfaces <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe Network Interfaces Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁contains <parameter_list,left> ▁( <parameter,left> ▁int ▁row <parameter,right> ▁, <parameter,left> ▁int ▁col <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁_ first Row ▁<= ▁row <binary_expression,right> ▁&& <binary_expression,left> ▁_ last Row ▁>= ▁row <binary_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁_ first Column ▁<= ▁col <binary_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁_ last Column ▁>= ▁col <binary_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁String <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁chars <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Patch Type ▁getP atch Type <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁patch Type ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁K ▁> <type_argument_list,right> <generic_name,right> ▁iterator <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Key Iterator <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Script Result ▁create Script <parameter_list,left> ▁( <parameter,left> ▁Create Script Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Script <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁BytesRef ▁next <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁term U pto ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁term U pto ▁>= <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁info ▁. ▁terms <member_access_expression,right> ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁info ▁. ▁terms <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> <member_access_expression,left> ▁info ▁. ▁sorted Terms <member_access_expression,right> <bracketed_argument_list,left> ▁[ ▁term U pto ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁br ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁br ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁output ToString <parameter_list,left> ▁( <parameter,left> ▁Ch ars Ref ▁output <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁output ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Web site Authorization Provider Result ▁associate Web site Authorization Provider <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Web site Authorization Provider Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Web site Authorization Provider <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁un pop <parameter_list,left> ▁( <parameter,left> ▁Rev Commit ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Block <variable_declarator,left> ▁b <equals_value_clause,left> ▁= ▁head <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁b ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁b ▁= <invocation_expression,left> <member_access_expression,left> ▁free ▁. ▁new Block <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁reset To Middle <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁head ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tail ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁can Un pop <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁un pop <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁b ▁= <invocation_expression,left> <member_access_expression,left> ▁free ▁. ▁new Block <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁reset To End <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁un pop <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁b ▁. ▁next <member_access_expression,right> ▁= ▁head <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁head ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Edge NG ram Tokenizer Factory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁min G ram Size ▁= <invocation_expression,left> ▁getInt <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <member_access_expression,left> ▁Edge NG ram Tokenizer ▁. ▁DEFAULT _ MIN _ GRAM _ SIZE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁max G ram Size ▁= <invocation_expression,left> ▁getInt <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <member_access_expression,left> ▁Edge NG ram Tokenizer ▁. ▁DEFAULT _ MAX _ GRAM _ SIZE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Modify DB Parameter Group Request <tuple_pattern,left> ▁( ▁String ▁d B Parameter GroupName ▁, java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set DB Parameter GroupName <argument_list,left> ▁( ▁d B Parameter GroupName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Parameters <argument_list,left> ▁( ▁parameters ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Host ed Zone Limit Result ▁getHost ed Zone Limit <parameter_list,left> ▁( <parameter,left> ▁Get Host ed Zone Limit Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Host ed Zone Limit <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁o <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁>> ▁> ▁6 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁b <equals_value_clause,left> ▁= <binary_expression,left> ▁index ▁& ▁63 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁shift <equals_value_clause,left> ▁= <binary_expression,left> ▁b ▁<< ▁0 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ ▁o ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& <prefix_unary_expression,left> ▁~ <parenthesized_expression,left> ▁( <binary_expression,left> ▁1 L ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁value ▁<< ▁shift <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev Filter ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Pattern Search <argument_list,left> ▁( <invocation_expression,left> ▁pattern <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁term ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> ▁doc ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁? <string_literal,left> ▁" ▁" <string_literal,right> ▁: <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁doc ▁== ▁NO _ MORE _ DO CS <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <string_literal,left> ▁" ▁" <string_literal,right> ▁: <binary_expression,left> <binary_expression,left> ▁doc ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <parenthesized_expression,left> ▁( <conditional_expression,left> <binary_expression,left> ▁position ▁== ▁NO _ MORE _ POSITION S <binary_expression,right> ▁? <string_literal,left> ▁" ▁" <string_literal,right> ▁: ▁position <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <conditional_expression,right> <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁boolean ▁can Append Match <parameter_list,left> ▁( ▁) <parameter_list,right> ▁{ ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Head ▁head <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁head ▁!= <member_access_expression,left> ▁Last Head ▁. ▁INSTANCE <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  ▁{ ▁return ▁true <ERROR,right> ▁; <ERROR,left> ▁} ▁} ▁return <ERROR,right> ▁false ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁synchronized ▁int ▁lastIndexOf <parameter_list,left> ▁( <parameter,left> ▁String ▁sub String <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁lastIndexOf <member_access_expression,right> <argument_list,left> ▁( ▁sub String ▁, ▁start ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Network Acl Entry Result ▁delete Network Acl Entry <parameter_list,left> ▁( <parameter,left> ▁Delete Network Acl Entry Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Network Acl Entry <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Member To Group Result ▁associate Member To Group <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Member To Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Member To Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁int ▁committer <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁ptr <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁sz <equals_value_clause,left> ▁= <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁ptr ▁== ▁0 <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= ▁46 <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <binary_expression,left> ▁ptr ▁< ▁sz <binary_expression,right> ▁&& <binary_expression,left> <element_access_expression,left> ▁b <bracketed_argument_list,left> ▁[ ▁ptr ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= ▁48 <assignment_expression,right> ▁; <expression_statement,right> <while_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁ptr ▁< ▁sz <binary_expression,right> ▁&& <binary_expression,left> <element_access_expression,left> ▁b <bracketed_argument_list,left> ▁[ ▁ptr ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁= <invocation_expression,left> ▁next LF <argument_list,left> ▁( ▁b ▁, ▁ptr ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁match <argument_list,left> ▁( ▁b ▁, ▁ptr ▁, ▁committer ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getLineNumber <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁row ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Sub module Update Command ▁add Path <parameter_list,left> ▁( <parameter,left> ▁String ▁path <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁paths ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁path ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Push Template Result ▁getP ush Template <parameter_list,left> ▁( <parameter,left> ▁Get Push Template Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Push Template <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Vault Result ▁describe Vault <parameter_list,left> ▁( <parameter,left> ▁Describe Vault Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Vault <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe V pc Peer ing Connections Result ▁describe V pc Peer ing Connections <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁describe V pc Peer ing Connections <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Describe V pc Peer ing Connections Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁putLong <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Register Device Result ▁register Device <parameter_list,left> ▁( <parameter,left> ▁Register Device Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Register Device <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁Format ▁by Id <parameter_list,left> ▁( <parameter,left> ▁int ▁id <parameter,right> ▁) <parameter_list,right> ▁{ ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Format ▁format <variable_declaration,right> <ERROR,left> ▁: ▁. ▁( ▁) <ERROR,right> ▁) <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁format ▁. ▁getId <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁id <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <initializer_expression,left> ▁{ ▁return <;,left> <;,right> ▁} <initializer_expression,right> <assignment_expression,right> ▁} <initializer_expression,right> <ERROR,right> <throw_expression,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁id <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <throw_expression,right> ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Delete App Result ▁delete App <parameter_list,left> ▁( <parameter,left> ▁Delete App Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete App <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get B aid u Channel Result ▁getB aid u Channel <parameter_list,left> ▁( <parameter,left> ▁Get B aid u Channel Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get B aid u Channel <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <qualified_name,left> ▁F ST ▁. ▁Bytes Reader <qualified_name,right> ▁getBytes Reader <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁fst ▁. ▁getBytes Reader <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁boolean ▁isValid Scheme Char <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁char ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁c ▁>= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> ▁&& <binary_expression,left> ▁c ▁<= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁c ▁>= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> ▁&& <binary_expression,left> ▁c ▁<= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁index ▁> ▁0 <binary_expression,right> ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁c ▁>= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> ▁&& <binary_expression,left> ▁c ▁<= <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁|| <binary_expression,left> ▁c ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁c ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁c ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List App lied Schema Ar ns Result ▁list App lied Schema Ar ns <parameter_list,left> ▁( <parameter,left> ▁List App lied Schema Ar ns Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List App lied Schema Ar ns <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁name <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁name <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Value Eval <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁, <parameter,left> ▁Operation Evaluation Context ▁ec <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁< ▁1 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean ▁isA 1 style <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String ▁text <variable_declaration,right> ▁; <local_declaration_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Value Eval <variable_declarator,left> ▁ve <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁getSingle Value <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁ec ▁. ▁getRow Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁ec ▁. ▁getColumnIndex <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁text ▁= <invocation_expression,left> <member_access_expression,left> ▁Operand Resolver ▁. ▁coerce Value ToString <member_access_expression,right> <argument_list,left> ▁( ▁ve ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <switch_statement,left> ▁switch ▁( <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case ▁1 ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁isA 1 style ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁2 ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁isA 1 style ▁= <invocation_expression,left> ▁evaluate Boolean Arg <argument_list,left> ▁( <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁, ▁ec ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁VALUE _ INVALID <member_access_expression,right> ▁; <return_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁evaluate Ind irect <argument_list,left> ▁( ▁ec ▁, ▁text ▁, ▁isA 1 style ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁int ▁compareTo <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁bs <parameter,right> ▁, <parameter,left> ▁int ▁p <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int ▁cmp <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁cmp ▁= <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁compare UInt 32 <member_access_expression,right> <argument_list,left> ▁( ▁w 1 ▁, <element_access_expression,left> ▁bs <bracketed_argument_list,left> ▁[ ▁p ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁!= ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁cmp ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁cmp ▁= <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁compare UInt 32 <member_access_expression,right> <argument_list,left> ▁( ▁w 2 ▁, <element_access_expression,left> ▁bs <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁p ▁+ ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁!= ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁cmp ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁cmp ▁= <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁compare UInt 32 <member_access_expression,right> <argument_list,left> ▁( ▁w 3 ▁, <element_access_expression,left> ▁bs <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁p ▁+ ▁2 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁!= ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁cmp ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁cmp ▁= <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁compare UInt 32 <member_access_expression,right> <argument_list,left> ▁( ▁w 4 ▁, <element_access_expression,left> ▁bs <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁p ▁+ ▁3 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁cmp ▁!= ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁cmp ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁NB ▁. ▁compare UInt 32 <member_access_expression,right> <argument_list,left> ▁( ▁w 5 ▁, <element_access_expression,left> ▁bs <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁p ▁+ ▁4 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Name <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁names ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁workbook ▁. ▁remove Name <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Get Queue Attributes Request <tuple_pattern,left> ▁( ▁String ▁queue Url ▁, java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Queue Url <argument_list,left> ▁( ▁queue Url ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute Names <argument_list,left> ▁( ▁attribute Names ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁boolean <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁copyOf <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁boolean <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁original <parameter,right> ▁, <parameter,left> ▁int ▁newLength <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁newLength ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Negative Array Size Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁copyOf Range <argument_list,left> ▁( ▁original ▁, ▁0 ▁, ▁newLength ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁setEnabled <parameter_list,left> ▁( <parameter,left> ▁boolean ▁enabled <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ENABLED ▁= ▁enabled <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Log Pattern Result ▁delete Log Pattern <parameter_list,left> ▁( <parameter,left> ▁Delete Log Pattern Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Log Pattern <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁contains <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁text <parameter,right> ▁, <parameter,left> ▁int ▁off <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁map ▁. ▁containsKey <member_access_expression,right> <argument_list,left> ▁( ▁text ▁, ▁off ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getFirst Sheet Index From Ex tern Sheet Index <parameter_list,left> ▁( <parameter,left> ▁int ▁extern Sheet Number <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁link Table ▁. ▁getFirst Internal Sheet Index For Ext Index <member_access_expression,right> <argument_list,left> ▁( ▁extern Sheet Number ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁handles <parameter_list,left> ▁( <parameter,left> ▁String ▁commandLine <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁command ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ ▁1 <binary_expression,right> ▁< <invocation_expression,left> <member_access_expression,left> ▁commandLine ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁commandLine ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁command ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁commandLine ▁. ▁startsWith <member_access_expression,right> <argument_list,left> ▁( ▁command ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁register <parameter_list,left> ▁( <parameter,left> ▁Merge Strategy ▁imp <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁register <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁imp ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁imp ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁BASE _ RAM _ BYTES _ USED ▁+ <parenthesized_expression,left> ▁( <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁index ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁index ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁0 <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Host ed Zone <tuple_pattern,left> ▁( ▁String ▁id ▁, ▁String ▁name ▁, ▁String ▁caller Reference ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setId <argument_list,left> ▁( ▁id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setName <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Caller Reference <argument_list,left> ▁( ▁caller Reference ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Get Find ings Result ▁getF ind ings <parameter_list,left> ▁( <parameter,left> ▁Get Find ings Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Find ings <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Topics Detection Job Result ▁describe Topics Detection Job <parameter_list,left> ▁( <parameter,left> ▁Describe Topics Detection Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Topics Detection Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁process Match <parameter_list,left> ▁( <parameter,left> ▁Value Eval ▁eval <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁eval ▁instanceof ▁Numeric Value Eval ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁minimum Value ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁minimum Value ▁= ▁eval <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁currentValue <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Numeric Value Eval ▁) ▁eval <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁getNumber Value <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁oldValue <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Numeric Value Eval ▁) ▁minimum Value <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁getNumber Value <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁currentValue ▁< ▁oldValue <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁minimum Value ▁= ▁eval <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁sid ▁+ <invocation_expression,left> ▁getP tg Class <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ len _ ref _ sub expression ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁main <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁args <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁print Tree <equals_value_clause,left> ▁= ▁false <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁path <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁print Tree ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁path ▁= <element_access_expression,left> ▁args <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> ▁args ▁. ▁length <member_access_expression,right> ▁!= <parenthesized_expression,left> ▁( <conditional_expression,left> ▁print Tree ▁? ▁2 ▁: ▁1 <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁System ▁. ▁out <member_access_expression,right> ▁. ▁println <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁exit <member_access_expression,right> <argument_list,left> ▁( ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Directory <variable_declarator,left> ▁dir <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁FS Directory ▁. ▁open <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Paths ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁path ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Tax onomy Reader <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Directory Tax onomy Reader <argument_list,left> ▁( ▁dir ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁print Stats <argument_list,left> ▁( ▁r ▁, <member_access_expression,left> ▁System ▁. ▁out <member_access_expression,right> ▁, ▁print Tree ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁close <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁dir ▁. ▁close <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Byte Value <parameter_list,left> ▁( <parameter,left> ▁byte ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> ▁if ▁( <assignment_expression,left> <prefix_unary_expression,left> ▁! <ERROR,left> <parameter_list,left> ▁( <parameter,left> ▁fields Data ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ <throw_expression,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁fields Data ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getSimpleName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <throw_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> ▁fields Data <prefix_unary_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁Byte ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁initialize <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁initialize <argument_list,left> ▁( ▁DEFAULT _ SE ED ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Caching Double Value Source <tuple_pattern,left> ▁( ▁Double Values Source ▁source ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁source <member_access_expression,right> ▁= ▁source <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁cache ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashMap <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Attribute Definition <tuple_pattern,left> ▁( ▁String ▁attributeName ▁, ▁Scalar Attribute Type ▁attribute Type ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setAttribute Name <argument_list,left> ▁( ▁attributeName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute Type <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁attribute Type ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁join <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁parts <parameter,right> ▁, <parameter,left> ▁String ▁separator <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁StringUtils ▁. ▁join <member_access_expression,right> <argument_list,left> ▁( ▁parts ▁, ▁separator ▁, ▁separator ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Task Definition Fam ilies Result ▁list Task Definition Fam ilies <parameter_list,left> ▁( <parameter,left> ▁List Task Definition Fam ilies Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Task Definition Fam ilies <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Components Result ▁list Components <parameter_list,left> ▁( <parameter,left> ▁List Components Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Components <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Activ ate Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Match m aking Rule Set Result ▁create Match m aking Rule Set <parameter_list,left> ▁( <parameter,left> ▁Create Match m aking Rule Set Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Match m aking Rule Set <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Available Management C id r Ranges Result ▁list Available Management C id r Ranges <parameter_list,left> ▁( <parameter,left> ▁List Available Management C id r Ranges Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Available Management C id r Ranges <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁ObjectId Subclass Map <type_argument_list,left> ▁< ▁ObjectId ▁> <type_argument_list,right> <generic_name,right> ▁getBase Object Ids <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁base Object Ids ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return ▁base Object Ids ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new <generic_name,left> ▁ObjectId Subclass Map <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Push Template Result ▁delete Push Template <parameter_list,left> ▁( <parameter,left> ▁Delete Push Template Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Push Template <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Domain Entry Result ▁create Domain Entry <parameter_list,left> ▁( <parameter,left> ▁Create Domain Entry Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Domain Entry <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁int ▁getEncoded Size <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁Object <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <binary_expression,left> <member_access_expression,left> ▁values ▁. ▁length <member_access_expression,right> ▁* ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Object ▁value <variable_declaration,right> ▁: ▁) ▁{ <assignment_expression,left> ▁result ▁+= <invocation_expression,left> ▁getEncoded Size <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁result ▁; ▁} <ERROR,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Open NLP Tokenizer Factory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁sentence Model File ▁= <invocation_expression,left> ▁require <argument_list,left> ▁( ▁args ▁, ▁SE NT ENCE _ MODEL ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tokenizer Model File ▁= <invocation_expression,left> ▁require <argument_list,left> ▁( ▁args ▁, ▁TOKEN IZ ER _ MODEL ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁int ▁getInt <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁, <member_access_expression,left> ▁Size Of ▁. ▁INT <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Memory ▁. ▁peek Int <member_access_expression,right> <argument_list,left> ▁( ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁index <binary_expression,right> ▁, ▁order ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁List <type_argument_list,left> ▁< ▁Head ▁> <type_argument_list,right> <generic_name,right> ▁getNext Head s <parameter_list,left> ▁( <parameter,left> ▁char ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> ▁matches <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁new Head s ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <member_access_expression,left> ▁FileName Matcher ▁. ▁EMPTY _ HEAD _ LIST <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁putShort <parameter_list,left> ▁( <parameter,left> ▁short ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write Un shared <parameter_list,left> ▁( <parameter,left> ▁Object ▁object <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁writeObject <tuple_pattern,left> ▁( ▁object ▁, ▁true ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁offset By Code Points <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁int ▁codePoint Offset <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Character ▁. ▁offset By Code Points <member_access_expression,right> <argument_list,left> ▁( ▁value ▁, ▁0 ▁, ▁count ▁, ▁index ▁, ▁codePoint Offset ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁getUnique Alt <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁BitSet ▁> <type_argument_list,right> <generic_name,right> ▁alt sets <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁BitSet <variable_declarator,left> ▁all <equals_value_clause,left> ▁= <invocation_expression,left> ▁get Al ts <argument_list,left> ▁( ▁alt sets ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁all ▁. ▁cardinality <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁1 <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁all ▁. ▁next Set Bit <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return <member_access_expression,left> ▁AT N ▁. ▁INVALID _ ALT _ NUMBER <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Date ▁get When <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Date <argument_list,left> ▁( ▁when ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Rule Tag Token <tuple_pattern,left> ▁( ▁String ▁rule Name ▁, ▁int ▁bypass TokenType ▁, ▁String ▁label ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁rule Name ▁== ▁null <binary_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> ▁rule Name ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁rule Name <member_access_expression,right> ▁= ▁rule Name <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁bypass TokenType <member_access_expression,right> ▁= ▁bypass TokenType <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁label <member_access_expression,right> ▁= ▁label <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Disable Organization Admin Account Result ▁disable Organization Admin Account <parameter_list,left> ▁( <parameter,left> ▁Disable Organization Admin Account Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Disable Organization Admin Account <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Room Result ▁create Room <parameter_list,left> ▁( <parameter,left> ▁Create Room Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Room <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Replication Group ▁delete Replication Group <parameter_list,left> ▁( <parameter,left> ▁Delete Replication Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Replication Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁CharBuffer ▁decode <parameter_list,left> ▁( <parameter,left> ▁ByteBuffer ▁buffer <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁new Decoder <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁on Malformed Input <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Coding Error Action ▁. ▁REPLACE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁on Un mapp able Character <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Coding Error Action ▁. ▁REPLACE <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁decode <member_access_expression,right> <argument_list,left> ▁( ▁buffer ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Character Coding Exception ▁ex ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Error <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁ex ▁. ▁getMessage <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁ex ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Distribution <tuple_pattern,left> ▁( ▁String ▁id ▁, ▁String ▁status ▁, ▁String ▁domain Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setId <argument_list,left> ▁( ▁id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setStatus <argument_list,left> ▁( ▁status ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Domain Name <argument_list,left> ▁( ▁domain Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<ERROR,left> ▁public ▁final ▁double ▁[ <ERROR,left> ▁] <invocation_expression,left> ▁array <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> <initializer_expression,left> ▁{ ▁return <invocation_expression,left> ▁protected Array <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Date Window 19 04 Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ window ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete DB Snapshot Request <tuple_pattern,left> ▁( ▁String ▁d B Snapshot Identifier ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set DB Snapshot Identifier <argument_list,left> ▁( ▁d B Snapshot Identifier ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁final ▁Parser Extension ▁getExtension <parameter_list,left> ▁( <parameter,left> ▁String ▁key <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁extensions <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁key ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁inform <parameter_list,left> ▁( <parameter,left> ▁Resource Loader ▁loader <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁chunk er Model File ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Open N L PO ps Factory ▁. ▁get Chunk er Model <member_access_expression,right> <argument_list,left> ▁( ▁chunk er Model File ▁, ▁loader ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁IOException ▁e ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁e ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Complete Vault Lock Result ▁complete Vault Lock <parameter_list,left> ▁( <parameter,left> ▁Complete Vault Lock Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Complete Vault Lock <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁final ▁int ▁[ <ERROR,left> ▁] <invocation_expression,left> ▁getChar Interval s <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> <initializer_expression,left> ▁{ ▁return <invocation_expression,left> <member_access_expression,left> ▁points ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> 
<local_function_statement,left> ▁public ▁long ▁ram Bytes Used <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁values ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁super ▁. ▁ram Bytes Used <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <member_access_expression,left> ▁Long ▁. ▁BYTES <member_access_expression,right> <binary_expression,right> ▁+ <member_access_expression,left> ▁Ram Usage Estimator ▁. ▁NUM _ BYTES _ OBJECT _ REF <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Register Instances With LoadBalancer Result ▁register Instances With LoadBalancer <parameter_list,left> ▁( <parameter,left> ▁Register Instances With LoadBalancer Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Register Instances With LoadBalancer <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Describe Cluster User K ub econfig Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁P recision Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ precision ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getLeft Row G utter <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getTop Col G utter <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRow Level Max <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getCol Level Max <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Virtual Interface Result ▁delete Virtual Interface <parameter_list,left> ▁( <parameter,left> ▁Delete Virtual Interface Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Virtual Interface <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Entry ▁getEntry <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁) <parameter_list,right> ▁throws ▁FileNotFound Exception <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁excludes ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁FileNotFound Exception <argument_list,left> ▁( ▁name ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Entry <variable_declarator,left> ▁entry <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁directory ▁. ▁getEntry <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁wrap Entry <argument_list,left> ▁( ▁entry ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getBack up <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Voice Connector Orig ination Result ▁delete Voice Connector Orig ination <parameter_list,left> ▁( <parameter,left> ▁Delete Voice Connector Orig ination Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Voice Connector Orig ination <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Append able ▁append <parameter_list,left> ▁( <parameter,left> ▁char ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁write <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁long ▁generation From Segments FileName <parameter_list,left> ▁( <parameter,left> ▁String ▁fileName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁fileName ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁OLD _ SE G MENTS _ GEN ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁+ ▁OLD _ SE G MENTS _ GEN <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁fileName ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Index File Names ▁. ▁SE G MENTS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁0 ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁fileName ▁. ▁startsWith <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Index File Names ▁. ▁SE G MENTS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Long ▁. ▁parseLong <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁fileName ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁1 ▁+ <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Index File Names ▁. ▁SE G MENTS <member_access_expression,right> ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁, <member_access_expression,left> ▁Character ▁. ▁MAX _ RAD IX <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁+ ▁fileName <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁Tag Opt ▁from Option <parameter_list,left> ▁( <parameter,left> ▁String ▁o <parameter,right> ▁) <parameter_list,right> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁o ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁o ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁AUTO _ F OLLOW ▁; <return_statement,right> <if_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Tag Opt ▁tag opt <variable_declaration,right> ▁: ▁( ▁) ▁) <initializer_expression,left> ▁{ <invocation_expression,left> ▁if <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁tag opt ▁. ▁option <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁o ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,left> ▁return ▁; <ERROR,right> ▁} <initializer_expression,right> <ERROR,right> <throw_expression,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁invalid Tag Option <member_access_expression,right> ▁, ▁o ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <throw_expression,right> ▁; ▁} <ERROR,right> 
<local_function_statement,left> ▁public ▁Start Content Mod eration Result ▁start Content Mod eration <parameter_list,left> ▁( <parameter,left> ▁Start Content Mod eration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Start Content Mod eration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁quote Replacement <parameter_list,left> ▁( <parameter,left> ▁String ▁s <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁char <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁c ▁== <character_literal,left> ▁' ▁\\ ▁' <character_literal,right> <binary_expression,right> ▁|| <binary_expression,left> ▁c ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\\ ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁V ▁newValue <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁value ▁= ▁newValue <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Query Parser Token Manager <tuple_pattern,left> ▁( ▁Char Stream ▁stream ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁input _ stream ▁= ▁stream <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁long ▁value For <parameter_list,left> ▁( <parameter,left> ▁double ▁elapsed <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double ▁val <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁mod By ▁== ▁0 <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁val ▁= <binary_expression,left> ▁elapsed ▁/ ▁factor <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁else val ▁= <binary_expression,left> <binary_expression,left> ▁elapsed ▁/ ▁factor <binary_expression,right> ▁% ▁mod By <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁type ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁round <member_access_expression,right> <argument_list,left> ▁( ▁val ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁else <return_statement,left> ▁return <cast_expression,left> ▁( ▁long ▁) ▁val <cast_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Long Buffer ▁get <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁dst <parameter,right> ▁, <parameter,left> ▁int ▁dst Offset <parameter,right> ▁, <parameter,left> ▁int ▁long Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁limit <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁limit ▁* <member_access_expression,left> ▁Size Of ▁. ▁LONG <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁* <member_access_expression,left> ▁Size Of ▁. ▁LONG <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁byteBuffer ▁instanceof ▁Direct ByteBuffer ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Direct ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁dst ▁, ▁dst Offset ▁, ▁long Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Heap ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁dst ▁, ▁dst Offset ▁, ▁long Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁position <member_access_expression,right> ▁+= ▁long Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Error Listeners <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ listeners ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Common Token Stream <tuple_pattern,left> ▁( ▁Token Source ▁token Source ▁, ▁int ▁channel ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁token Source ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁channel <member_access_expression,right> ▁= ▁channel <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List Object Policies Result ▁list Object Policies <parameter_list,left> ▁( <parameter,left> ▁List Object Policies Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Object Policies <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Object To Pack <tuple_pattern,left> ▁( ▁Any ObjectId ▁src ▁, ▁int ▁type ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁src ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁flags ▁= <binary_expression,left> ▁type ▁<< ▁TYPE _ SHIFT <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁int ▁stem <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char ▁s <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁num V ow els <equals_value_clause,left> ▁= <invocation_expression,left> ▁num V ow els <argument_list,left> ▁( ▁s ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁aff ix es ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Aff ix <variable_declarator,left> ▁aff ix <equals_value_clause,left> ▁= <element_access_expression,left> ▁aff ix es <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁num V ow els ▁> <member_access_expression,left> ▁aff ix ▁. ▁vc <member_access_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁len ▁>= <binary_expression,left> <member_access_expression,left> <member_access_expression,left> ▁aff ix ▁. ▁aff ix <member_access_expression,right> ▁. ▁length <member_access_expression,right> ▁+ ▁3 <binary_expression,right> <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <member_access_expression,left> ▁aff ix ▁. ▁aff ix <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁len ▁-= <member_access_expression,left> <member_access_expression,left> ▁aff ix ▁. ▁aff ix <member_access_expression,right> ▁. ▁length <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <conditional_expression,left> <member_access_expression,left> ▁aff ix ▁. ▁pal atal izes <member_access_expression,right> ▁? <invocation_expression,left> ▁un pal atal ize <argument_list,left> ▁( ▁s ▁, ▁len ▁) <argument_list,right> <invocation_expression,right> ▁: ▁len <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁recover <parameter_list,left> ▁( <parameter,left> ▁Parser ▁recogn izer <parameter,right> ▁, <parameter,left> ▁Recognition Exception ▁e <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁last Error Index ▁== <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁getInputStream <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁last Error States ▁!= ▁null <binary_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁last Error States ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁getState <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁consume <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁last Error Index ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁getInputStream <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁last Error States ▁== ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁last Error States ▁= <object_creation_expression,left> ▁new ▁Interval Set <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁last Error States ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁recogn izer ▁. ▁getState <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Interval Set <variable_declarator,left> ▁follow Set <equals_value_clause,left> ▁= <invocation_expression,left> ▁getError Recovery Set <argument_list,left> ▁( ▁recogn izer ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁consume Until <argument_list,left> ▁( ▁recogn izer ▁, ▁follow Set ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to Formula String <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁value <equals_value_clause,left> ▁= ▁field _3_ string <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁len <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( <binary_expression,left> ▁len ▁+ ▁4 <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁FORM UL A _ DE LIMITER ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁len <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁char <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁c ▁== ▁FORM UL A _ DE LIMITER <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁FORM UL A _ DE LIMITER ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁FORM UL A _ DE LIMITER ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Un link Face Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Configuration Option Setting <tuple_pattern,left> ▁( ▁String ▁namespace ▁, ▁String ▁option Name ▁, ▁String ▁value ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Namespace <argument_list,left> ▁( ▁namespace ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setOption Name <argument_list,left> ▁( ▁option Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setValue <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁CharSequence ▁getF ully <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁key <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁tries ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁* ▁2 <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> <member_access_expression,left> ▁tries ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁CharSequence <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁tries ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getF ully <member_access_expression,right> <argument_list,left> ▁( ▁key ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁r ▁== ▁null <binary_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁1 <binary_expression,right> ▁&& <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁== ▁E OM <binary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁result ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁r ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Mount Target Security Groups Result ▁describe Mount Target Security Groups <parameter_list,left> ▁( <parameter,left> ▁Describe Mount Target Security Groups Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Mount Target Security Groups <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Api Mapping Result ▁getApi Mapping <parameter_list,left> ▁( <parameter,left> ▁Get Api Mapping Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Api Mapping <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁HttpRequest <tuple_pattern,left> ▁( ▁String ▁str Url ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁str Url ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Mem Func Pt g <tuple_pattern,left> ▁( ▁int ▁sub Expr Len ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ len _ ref _ sub expression ▁= ▁sub Expr Len <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<ERROR,left> ▁public ▁static <array_type,left> ▁Term Stats <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁getHigh Freq Terms <parameter_list,left> ▁( <parameter,left> ▁Index Reader ▁reader <parameter,right> ▁, <parameter,left> ▁int ▁num Terms <parameter,right> ▁, <parameter,left> ▁String ▁field <parameter,right> ▁, <parameter,left> <generic_name,left> ▁Comparator <type_argument_list,left> ▁< ▁Term Stats ▁> <type_argument_list,right> <generic_name,right> ▁comparator <parameter,right> ▁) <parameter_list,right> ▁throws ▁Exception ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Term Stats Queue <variable_declarator,left> ▁ti q <equals_value_clause,left> ▁= ▁null <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁field ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Terms <variable_declarator,left> ▁terms <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Multi Terms ▁. ▁get Terms <member_access_expression,right> <argument_list,left> ▁( ▁reader ▁, ▁field ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁terms ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁field <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Terms Enum <variable_declarator,left> ▁terms Enum <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁ti q ▁= <object_creation_expression,left> ▁new ▁Term Stats Queue <argument_list,left> ▁( ▁num Terms ▁, ▁comparator ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁ti q ▁. ▁fill <member_access_expression,right> <argument_list,left> ▁( ▁field ▁, ▁terms Enum ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁fields <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Field Infos ▁. ▁getIndex ed Fields <member_access_expression,right> <argument_list,left> ▁( ▁reader ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁fields ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁ti q ▁= <object_creation_expression,left> ▁new ▁Term Stats Queue <argument_list,left> ▁( ▁num Terms ▁, ▁comparator ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <variable_declaration,left> ▁String <variable_declarator,left> ▁fieldName <ERROR,left> ▁: ▁) ▁{ <ERROR,right> <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Multi Terms ▁. ▁get Terms <member_access_expression,right> <argument_list,left> ▁( ▁reader ▁, ▁fieldName ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁terms ▁!= ▁null <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁fill <member_access_expression,right> <argument_list,left> ▁( ▁fieldName ▁, <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} ▁} ▁} <invocation_expression,left> <assignment_expression,left> <element_access_expression,left> ▁Term Stats <bracketed_argument_list,left> ▁[ <ERROR,left> ▁] <assignment_expression,left> ▁result ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Term Stats <array_rank_specifier,left> ▁[ <invocation_expression,left> <member_access_expression,left> ▁ti q ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <ERROR,right> <declaration_expression,left> ▁int ▁count <declaration_expression,right>  <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ti q ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁while <ERROR,right> <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ti q ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁0 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <initializer_expression,left> ▁{ <postfix_unary_expression,left> <assignment_expression,left> <element_access_expression,left> ▁result <bracketed_argument_list,left> ▁[ ▁count ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁ti q ▁. ▁pop <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <;,left> <;,right> ▁-- <postfix_unary_expression,right> ▁; ▁} <initializer_expression,right> ▁return <ERROR,right> ▁result ▁; <ERROR,right> ▁} <block,right> <if_statement,right> <ERROR,right> 
<local_function_statement,left> ▁public ▁Delete Ap ns Vo ip Channel Result ▁delete Ap ns Vo ip Channel <parameter_list,left> ▁( <parameter,left> ▁Delete Ap ns Vo ip Channel Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Ap ns Vo ip Channel <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Faces Result ▁list Faces <parameter_list,left> ▁( <parameter,left> ▁List Faces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Faces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Shape Field Cache Distance Value Source <tuple_pattern,left> ▁( ▁Spatial Context ▁ctx ▁, ▁Shape Field Cache Provider <ERROR,left> ▁< ▁> <ERROR,right> ▁, ▁Point ▁from ▁, ▁double ▁multiplier ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ctx <member_access_expression,right> ▁= ▁ctx <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁from <member_access_expression,right> ▁= ▁from <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁provider <member_access_expression,right> ▁= ▁provider <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁multiplier <member_access_expression,right> ▁= ▁multiplier <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁char ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sequence ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Configuration Profile Result ▁update Configuration Profile <parameter_list,left> ▁( <parameter,left> ▁Update Configuration Profile Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Configuration Profile <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Lifecycle Hook s Result ▁describe Lifecycle Hook s <parameter_list,left> ▁( <parameter,left> ▁Describe Lifecycle Hook s Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Lifecycle Hook s <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Host Reser v ations Result ▁describe Host Reser v ations <parameter_list,left> ▁( <parameter,left> ▁Describe Host Reser v ations Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Host Reser v ations <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Pred iction Context ▁from Rule Context <parameter_list,left> ▁( <parameter,left> ▁AT N ▁at n <parameter,right> ▁, <parameter,left> ▁Rule Context ▁outer Context <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁outer Context ▁== ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁outer Context ▁= <member_access_expression,left> ▁Rule Context ▁. ▁EMPTY <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁outer Context ▁. ▁parent <member_access_expression,right> ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> ▁outer Context ▁== <member_access_expression,left> ▁Rule Context ▁. ▁EMPTY <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Pred iction Context ▁. ▁EMPTY <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Pred iction Context <variable_declarator,left> ▁parent <equals_value_clause,left> ▁= ▁EMPTY <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁parent ▁= <invocation_expression,left> <member_access_expression,left> ▁Pred iction Context ▁. ▁from Rule Context <member_access_expression,right> <argument_list,left> ▁( ▁at n ▁, <member_access_expression,left> ▁outer Context ▁. ▁parent <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁AT N State <variable_declarator,left> ▁state <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁at n ▁. ▁states <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁outer Context ▁. ▁invoking State <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Rule Transition <variable_declarator,left> ▁transition <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Rule Transition ▁) <invocation_expression,left> <member_access_expression,left> ▁state ▁. ▁transition <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Singleton Pred iction Context ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁parent ▁, <member_access_expression,left> <member_access_expression,left> ▁transition ▁. ▁follow State <member_access_expression,right> ▁. ▁state Number <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁int To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ gr bit 1 ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁byte To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ gr bit 2 ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁byte To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ c it m Show ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ is x di Sort ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ is x di Show ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁_ sub total Name ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getResult Path <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁r ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Change Sets Result ▁list Change Sets <parameter_list,left> ▁( <parameter,left> ▁List Change Sets Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Change Sets <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Allow Non Fast For wards <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁allow Non Fast For wards ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁F eat Record <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁future Header  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁F tr Header <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁future Header ▁. ▁set Record Type <member_access_expression,right> <argument_list,left> ▁( ▁sid ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Short Buffer ▁put <parameter_list,left> ▁( <parameter,left> ▁short ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setQuery <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁query <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁query <member_access_expression,right> ▁= ▁query <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁message <member_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁Message Impl <argument_list,left> ▁( <member_access_expression,left> ▁Query Parser Messages ▁. ▁INVALID _ SY NT AX _ CAN NOT _ PAR SE <member_access_expression,right> ▁, ▁query ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁St ash Apply Command ▁stash Apply <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁St ash Apply Command <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁name Set <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁unmodifiable Set <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁dictionary ▁. ▁values <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁getEffective Port <parameter_list,left> ▁( <parameter,left> ▁String ▁scheme <parameter,right> ▁, <parameter,left> ▁int ▁specified Port <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁specified Port ▁!= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁specified Port ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁. ▁equals IgnoreCase <member_access_expression,right> <argument_list,left> ▁( ▁scheme ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁80 ▁; <return_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁. ▁equals IgnoreCase <member_access_expression,right> <argument_list,left> ▁( ▁scheme ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁443 ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Assessment Templates Result ▁list Assessment Templates <parameter_list,left> ▁( <parameter,left> ▁List Assessment Templates Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Assessment Templates <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cluster ▁restore From Cluster Snapshot <parameter_list,left> ▁( <parameter,left> ▁Restore From Cluster Snapshot Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Restore From Cluster Snapshot <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁add Shape <parameter_list,left> ▁( <parameter,left> ▁H SSF Shape ▁shape <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shape ▁. ▁setP at ri arch <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁this ▁. ▁getP at ri arch <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shape ▁. ▁setParent <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁shapes ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁shape ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁this ▁== ▁o <binary_expression,right> ▁) <return_statement,left> ▁return ▁true ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁o ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <invocation_expression,left> <member_access_expression,left> ▁o ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Facet Entry <variable_declarator,left> ▁that <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Facet Entry ▁) ▁o <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁!= <member_access_expression,left> ▁that ▁. ▁count <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁that ▁. ▁value <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <return_statement,left> ▁return ▁false ▁; <return_statement,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁int ▁prev <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁ptr <parameter,right> ▁, <parameter,left> ▁char ▁chr A <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁ptr ▁== <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <expression_statement,left> <prefix_unary_expression,left> ▁-- ▁ptr <prefix_unary_expression,right> ▁; <expression_statement,right> <if_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> ▁ptr ▁>= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁b <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁ptr ▁-- <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== ▁chr A <binary_expression,right> ▁) <return_statement,left> ▁return ▁ptr ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <while_statement,right> <return_statement,left> ▁return ▁ptr ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁is Delta Representation <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁delta Base ▁!= ▁null <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Token ▁emit EOF <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁c pos <equals_value_clause,left> ▁= <invocation_expression,left> ▁getChar Position In Line <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁line <equals_value_clause,left> ▁= <invocation_expression,left> ▁getLine <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Token <variable_declarator,left> ▁eof <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ factory ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁_ token Factory Source Pair ▁, <member_access_expression,left> ▁Token ▁. ▁EOF <member_access_expression,right> ▁, ▁null ▁, <member_access_expression,left> ▁Token ▁. ▁DEFAULT _ CHANNEL <member_access_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁_ input ▁. ▁index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁_ input ▁. ▁index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁, ▁line ▁, ▁c pos ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁emit <argument_list,left> ▁( ▁eof ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁eof ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Update User Request <tuple_pattern,left> ▁( ▁String ▁userName ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set UserName <argument_list,left> ▁( ▁userName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Rev Filter ▁negate <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Not Rev Filter ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setTag ger <parameter_list,left> ▁( <parameter,left> ▁Person Ident ▁tag ger Ident <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁tag ger ▁= ▁tag ger Ident <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Buffer Size ▁automatic <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Runtime <variable_declarator,left> ▁rt <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Runtime ▁. ▁getRuntime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁max <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁rt ▁. ▁max Memory <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁total <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁rt ▁. ▁total Memory <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁free <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁rt ▁. ▁free Memory <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁total Available Bytes <equals_value_clause,left> ▁= <binary_expression,left> <binary_expression,left> ▁max ▁- ▁total <binary_expression,right> ▁+ ▁free <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁sort Buffer Byte Size <equals_value_clause,left> ▁= <binary_expression,left> ▁free ▁/ ▁2 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁min BufferSize Bytes <equals_value_clause,left> ▁= <binary_expression,left> ▁MIN _ BUFFER _ SIZE _ MB ▁* ▁MB <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁sort Buffer Byte Size ▁< ▁min BufferSize Bytes <binary_expression,right> ▁|| <binary_expression,left> ▁total Available Bytes ▁> <binary_expression,left> ▁10 ▁* ▁min BufferSize Bytes <binary_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁total Available Bytes ▁/ ▁2 <binary_expression,right> ▁> ▁min BufferSize Bytes <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁sort Buffer Byte Size ▁= <binary_expression,left> ▁total Available Bytes ▁/ ▁2 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁sort Buffer Byte Size ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁AB SOL UTE _ MIN _ S ORT _ BUFFER _ SIZE ▁, ▁sort Buffer Byte Size ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Buffer Size <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁long ▁) <member_access_expression,left> ▁Integer ▁. ▁MAX _ VALUE <member_access_expression,right> <cast_expression,right> ▁, ▁sort Buffer Byte Size ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁trim Trailing Whitespace <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁raw <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁ptr <equals_value_clause,left> ▁= <binary_expression,left> ▁end ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <binary_expression,left> <binary_expression,left> ▁start ▁<= ▁ptr <binary_expression,right> ▁&& <invocation_expression,left> ▁is Whitespace <argument_list,left> ▁( <element_access_expression,left> ▁raw <bracketed_argument_list,left> ▁[ ▁ptr ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <expression_statement,left> <postfix_unary_expression,left> ▁ptr ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <while_statement,right> <return_statement,left> ▁return <binary_expression,left> ▁ptr ▁+ ▁1 <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Top Margin Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ margin ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read Double <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Retrieve Environment Info Request <tuple_pattern,left> ▁( ▁Environment Info Type ▁info Type ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Info Type <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁info Type ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Player Sessions Result ▁create Player Sessions <parameter_list,left> ▁( <parameter,left> ▁Create Player Sessions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Player Sessions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Proxy Session Result ▁create Proxy Session <parameter_list,left> ▁( <parameter,left> ▁Create Proxy Session Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Proxy Session <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getObject Type <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁type ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getScheme <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁scheme ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁characters <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁ch <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁length <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁contents ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁ch ▁, ▁start ▁, ▁length ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Fetch Album Tag Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete Members Result ▁delete Members <parameter_list,left> ▁( <parameter,left> ▁Delete Members Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Members <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Contact Re ach ability Status Result ▁get Contact Re ach ability Status <parameter_list,left> ▁( <parameter,left> ▁Get Contact Re ach ability Status Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Contact Re ach ability Status <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> <variable_declaration,left> ▁@ Override ▁public <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁boolean ▁remove <parameter_list,left> ▁( <parameter,left> ▁Object ▁o <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Im pl ▁. ▁this <member_access_expression,right> ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁o ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁null <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁E ▁last <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁backing Map ▁. ▁last Key <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Streaming Distribution Result ▁create Streaming Distribution <parameter_list,left> ▁( <parameter,left> ▁Create Streaming Distribution Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Streaming Distribution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Absolute <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁absolute ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Disable Add On Result ▁disable Add On <parameter_list,left> ▁( <parameter,left> ▁Disable Add On Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Disable Add On <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Alias Result ▁describe Alias <parameter_list,left> ▁( <parameter,left> ▁Describe Alias Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Alias <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁next <parameter_list,left> ▁( <parameter,left> ▁int ▁delta <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <while_statement,left> ▁while ▁( <binary_expression,left> <prefix_unary_expression,left> ▁-- ▁delta <prefix_unary_expression,right> ▁>= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁current Sub tree ▁!= ▁null <binary_expression,right> ▁) <expression_statement,left> <assignment_expression,left> ▁ptr ▁+= <invocation_expression,left> <member_access_expression,left> ▁current Sub tree ▁. ▁getEntry Span <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁else ptr ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁eof <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <break_statement,left> ▁break ▁; <break_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁parse Entry <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Rev Filter ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Binary <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁a ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁clone <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Reader ▁create <parameter_list,left> ▁( <parameter,left> ▁Reader ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁P ers ian Char Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁option <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁option ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Object ▁item <variable_declaration,right> ▁: ▁this ▁) ▁{ <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <ERROR,left> <declaration_expression,left> ▁item ▁instanceof <declaration_expression,right> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <ERROR,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) ▁item <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} ▁else <initializer_expression,left> ▁{ <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁item ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> ▁} ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Signal ing Channel Result ▁describe Signal ing Channel <parameter_list,left> ▁( <parameter,left> ▁Describe Signal ing Channel Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Signal ing Channel <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Attach Static Ip Result ▁attach Static Ip <parameter_list,left> ▁( <parameter,left> ▁Attach Static Ip Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Attach Static Ip <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁64 ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell Reference <variable_declarator,left> ▁cr A <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Cell Reference <argument_list,left> ▁( ▁_ first Row Index ▁, ▁_ first ColumnIndex ▁, ▁false ▁, ▁false ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell Reference <variable_declarator,left> ▁cr B <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Cell Reference <argument_list,left> ▁( ▁_ last Row Index ▁, ▁_ last ColumnIndex ▁, ▁false ▁, ▁false ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁cr A ▁. ▁format AsString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁cr B ▁. ▁format AsString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁B loomFilter ing Post ings Format <tuple_pattern,left> ▁( ▁Post ings Format ▁delegate Post ings Format ▁, ▁B loom FilterFactory ▁b loom FilterFactory ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁B LO OM _ CODE C _ NAME ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁delegate Post ings Format <member_access_expression,right> ▁= ▁delegate Post ings Format <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁b loom FilterFactory <member_access_expression,right> ▁= ▁b loom FilterFactory <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List Templates Result ▁list Templates <parameter_list,left> ▁( <parameter,left> ▁List Templates Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Templates <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Timer Thread <tuple_pattern,left> ▁( ▁long ▁resolution ▁, ▁Counter ▁counter ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁THREAD _ NAME ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁resolution <member_access_expression,right> ▁= ▁resolution <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁counter <member_access_expression,right> ▁= ▁counter <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁this ▁. ▁setDaemon <member_access_expression,right> <argument_list,left> ▁( ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Drawing Record <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁record Data  <tuple_pattern,right> <equals_value_clause,left> ▁= ▁EMPTY _ BYTE _ ARRAY <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁List Directories Result ▁list Directories <parameter_list,left> ▁( <parameter,left> ▁List Directories Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Directories <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁j <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁j ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁j <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁byte ▁block <equals_value_clause,left> ▁= <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁7 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁6 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁5 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁3 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁2 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁block ▁>> ▁> ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> ▁block ▁& ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Group ing Search ▁disable Caching <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁max Cache RAM MB <member_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁max Docs To Cache <member_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁int ▁ideal ByteArray Size <parameter_list,left> ▁( <parameter,left> ▁int ▁need <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁4 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁32 <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <if_statement,left> ▁if ▁( <binary_expression,left> ▁need ▁<= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁1 ▁<< ▁i <binary_expression,right> ▁) <parenthesized_expression,right> ▁- ▁12 <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁1 ▁<< ▁i <binary_expression,right> ▁) <parenthesized_expression,right> ▁- ▁12 <binary_expression,right> ▁; <return_statement,right> <if_statement,right> <for_statement,right> <return_statement,left> ▁return ▁need ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Assessment Target Result ▁update Assessment Target <parameter_list,left> ▁( <parameter,left> ▁Update Assessment Target Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Assessment Target <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify Volume Result ▁modify Volume <parameter_list,left> ▁( <parameter,left> ▁Modify Volume Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Volume <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cell ▁merge <parameter_list,left> ▁( <parameter,left> ▁Cell ▁m <parameter,right> ▁, <parameter,left> ▁Cell ▁e <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁m ▁. ▁cmd <member_access_expression,right> ▁== <member_access_expression,left> ▁e ▁. ▁cmd <member_access_expression,right> <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁m ▁. ▁ref <member_access_expression,right> ▁== <member_access_expression,left> ▁e ▁. ▁ref <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁m ▁. ▁skip <member_access_expression,right> ▁== <member_access_expression,left> ▁e ▁. ▁skip <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Cell <argument_list,left> ▁( ▁m ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁c ▁. ▁cnt <member_access_expression,right> ▁+= <member_access_expression,left> ▁e ▁. ▁cnt <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁c ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return ▁null ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁read <parameter_list,left> ▁( <parameter,left> ▁int ▁length <parameter,right> ▁, <parameter,left> ▁long ▁position <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁position ▁>= <invocation_expression,left> ▁size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Index OutOfBounds Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁position <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁ByteBuffer ▁dst <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( ▁writable ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁dst ▁= <invocation_expression,left> <member_access_expression,left> ▁channel ▁. ▁map <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <member_access_expression,left> ▁FileChannel ▁. ▁Map Mode <member_access_expression,right> ▁. ▁READ _ WRITE <member_access_expression,right> ▁, ▁position ▁, ▁length ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffers To Clean ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁dst ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁channel ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( ▁position ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁dst ▁= <invocation_expression,left> <member_access_expression,left> ▁ByteBuffer ▁. ▁allocate <member_access_expression,right> <argument_list,left> ▁( ▁length ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁worked <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁IOUtils ▁. ▁readFully <member_access_expression,right> <argument_list,left> ▁( ▁channel ▁, ▁dst ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁worked ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Index OutOfBounds Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁position <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁dst ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁dst ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁respond Activity Task Completed <parameter_list,left> ▁( <parameter,left> ▁Res pond Activity Task Completed Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁execute Res pond Activity Task Completed <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁synchronized ▁final <variable_declaration,right>  <local_declaration_statement,right> <local_function_statement,left> ▁void ▁increment Progress By <parameter_list,left> ▁( <parameter,left> ▁int ▁diff <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setProgress <argument_list,left> ▁( <binary_expression,left> ▁mProgress ▁+ ▁diff <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Metadata Diff ▁compare Metadata <parameter_list,left> ▁( <parameter,left> ▁Dir CacheEntry ▁entry <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁is Ass ume Valid <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁EQUAL <member_access_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁is Update Needed <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁DI FFER _ BY _ METADATA <member_access_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> ▁is Mode Different <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getRaw Mode <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁DI FFER _ BY _ METADATA <member_access_expression,right> ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁type <equals_value_clause,left> ▁= <binary_expression,left> ▁mode ▁& <member_access_expression,left> ▁File Mode ▁. ▁TYPE _ MASK <member_access_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁type ▁== <member_access_expression,left> ▁File Mode ▁. ▁TYPE _ TREE <member_access_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁type ▁== <member_access_expression,left> ▁File Mode ▁. ▁TYPE _ G IT LINK <member_access_expression,right> <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁EQUAL <member_access_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁is Sm ud ged <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁&& <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getLength <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁!= <cast_expression,left> ▁( ▁int ▁) <invocation_expression,left> ▁getEntry Length <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁DI FFER _ BY _ METADATA <member_access_expression,right> ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Instant <variable_declarator,left> ▁cache Last Modified <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁getLast Modified Instant <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Instant <variable_declarator,left> ▁file Last Modified <equals_value_clause,left> ▁= <invocation_expression,left> ▁getEntry Last Modified Instant <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁timestamp Comparator ▁. ▁compare <member_access_expression,right> <argument_list,left> ▁( ▁cache Last Modified ▁, ▁file Last Modified ▁, <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getOptions <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getCheck Stat <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <member_access_expression,left> ▁Check Stat ▁. ▁MIN IMAL <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁!= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁DI FFER _ BY _ TIMESTAMP <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁entry ▁. ▁is Sm ud ged <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁SM UD G ED <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <member_access_expression,left> ▁Metadata Diff ▁. ▁EQUAL <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Number Record ▁convertTo Number Record <parameter_list,left> ▁( <parameter,left> ▁R K Record ▁r k <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Number Record <variable_declarator,left> ▁num <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Number Record <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁num ▁. ▁setColumn <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r k ▁. ▁getColumn <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁num ▁. ▁setRow <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r k ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁num ▁. ▁set XF Index <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r k ▁. ▁getX F Index <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁num ▁. ▁setValue <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁r k ▁. ▁getR K Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁num ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁CharBuffer ▁put <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁src Offset <parameter,right> ▁, <parameter,left> ▁int ▁char Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁limit <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁limit ▁* <member_access_expression,left> ▁Size Of ▁. ▁CHAR <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁* <member_access_expression,left> ▁Size Of ▁. ▁CHAR <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁byteBuffer ▁instanceof ▁Read Write Direct ByteBuffer ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Read Write Direct ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁src Offset ▁, ▁char Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Read Write Heap ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁src Offset ▁, ▁char Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁position <member_access_expression,right> ▁+= ▁char Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getCell s <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Iterator <type_argument_list,left> ▁< ▁Character ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁cells ▁. ▁keySet <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁iterator <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁size <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( ▁; <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁hasNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Character <variable_declarator,left> ▁c <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁i ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell <variable_declarator,left> ▁e <equals_value_clause,left> ▁= <invocation_expression,left> ▁at <argument_list,left> ▁( ▁c ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁e ▁. ▁cmd <member_access_expression,right> ▁>= ▁0 <binary_expression,right> ▁|| <binary_expression,left> <member_access_expression,left> ▁e ▁. ▁ref <member_access_expression,right> ▁>= ▁0 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <postfix_unary_expression,left> ▁size ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁size ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Be ider M orse FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Name Type <variable_declarator,left> ▁name Type <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Name Type ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Name Type ▁. ▁GENERIC <member_access_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Rule Type <variable_declarator,left> ▁rule Type <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁Rule Type ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Rule Type ▁. ▁AP PRO X <member_access_expression,right> ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁concat <equals_value_clause,left> ▁= <invocation_expression,left> ▁getBoolean <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁true ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁engine ▁= <object_creation_expression,left> ▁new ▁Ph on etic Engine <argument_list,left> ▁( ▁name Type ▁, ▁rule Type ▁, ▁concat ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Set <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁lang s <equals_value_clause,left> ▁= <invocation_expression,left> ▁getSet <argument_list,left> ▁( ▁args ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁language Set ▁= <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁null ▁== ▁lang s <binary_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁1 ▁== <invocation_expression,left> <member_access_expression,left> ▁lang s ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁lang s ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁null ▁: <invocation_expression,left> <member_access_expression,left> ▁Language Set ▁. ▁from <member_access_expression,right> <argument_list,left> ▁( ▁lang s ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁double ▁var p <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁v <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁r <equals_value_clause,left> ▁= <member_access_expression,left> ▁Double ▁. ▁NaN <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁v ▁!= ▁null <binary_expression,right> ▁&& <binary_expression,left> <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> ▁> ▁1 <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁r ▁= <binary_expression,left> <invocation_expression,left> ▁dev sq <argument_list,left> ▁( ▁v ▁) <argument_list,right> <invocation_expression,right> ▁/ <member_access_expression,left> ▁v ▁. ▁length <member_access_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁P ers ian Normal ization FilterFactory <tuple_pattern,left> ▁( ▁Map <<,left> <<,right> ▁, ▁String <>,left> <>,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁args ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁args ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁args <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static <array_type,left> ▁Weight ed Term <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁get Terms <parameter_list,left> ▁( <parameter,left> ▁Query ▁query <parameter,right> ▁, <parameter,left> ▁boolean ▁pro hib ited <parameter,right> ▁, <parameter,left> ▁String ▁fieldName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁HashSet <type_argument_list,left> ▁< ▁Weight ed Term ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁terms <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashSet <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Predicate <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁field Selector <equals_value_clause,left> ▁= <conditional_expression,left> <binary_expression,left> ▁fieldName ▁== ▁null <binary_expression,right> ▁? <member_access_expression,left> ▁f ▁-> ▁true <member_access_expression,right> ▁: <ERROR,left> <alias_qualified_name,left> ▁fieldName ▁:: ▁equals <alias_qualified_name,right> ▁; <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁query ▁. ▁visit <member_access_expression,right> <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Boost ed Term Extractor <argument_list,left> ▁( ▁1 ▁, ▁terms ▁, ▁pro hib ited ▁, ▁field Selector ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁terms ▁. ▁toArray <member_access_expression,right> <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁Weight ed Term <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Documentation Part Result ▁delete Documentation Part <parameter_list,left> ▁( <parameter,left> ▁Delete Documentation Part Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Documentation Part <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getX <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getY <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getWidth <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getHeight <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁short ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁backing Array <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁offset ▁+ ▁index <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁image ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Eval ▁evaluate <parameter_list,left> ▁( <parameter,left> ▁int ▁src Row Index <parameter,right> ▁, <parameter,left> ▁int ▁src ColumnIndex <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 0 <parameter,right> ▁, <parameter,left> ▁Value Eval ▁arg 1 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Area Eval <variable_declarator,left> ▁re A <equals_value_clause,left> ▁= <invocation_expression,left> ▁evaluate Ref <argument_list,left> ▁( ▁arg 0 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Area Eval <variable_declarator,left> ▁re B <equals_value_clause,left> ▁= <invocation_expression,left> ▁evaluate Ref <argument_list,left> ▁( ▁arg 1 ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Area Eval <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <invocation_expression,left> ▁resolve Range <argument_list,left> ▁( ▁re A ▁, ▁re B ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁result ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁Error Eval ▁. ▁NULL _ INTER SECTION <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Evaluation Exception ▁e ▁) <catch_declaration,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁e ▁. ▁getError Eval <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁weight By Span Query ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁find EndOffset <parameter_list,left> ▁( <parameter,left> ▁StringBuilder ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁start ▁> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁start ▁< ▁0 <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁start ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁bi ▁. ▁setText <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁start ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁bi ▁. ▁next <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ ▁start <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁final ▁public ▁S r nd Query ▁Primary Query <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁ParseException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁S r nd Query ▁q <variable_declaration,right> ▁; <local_declaration_statement,right> <switch_statement,left> ▁switch ▁( <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁jj _ ntk ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> ▁jj _ ntk <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁: ▁jj _ ntk <conditional_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case ▁L PAREN ▁: <case_switch_label,right> <expression_statement,left> <invocation_expression,left> ▁jj _ consume _ token <argument_list,left> ▁( ▁L PAREN ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁q ▁= <invocation_expression,left> ▁Fields Query <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁jj _ consume _ token <argument_list,left> ▁( ▁R PAREN ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁OR ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁AND ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁W ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁N ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁q ▁= <invocation_expression,left> ▁Prefix Operator Query <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case ▁TR UNC QU O TED ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁QU O TED ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁SU FFIX TERM ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁TR UN CT ER M ▁: <case_switch_label,right> <case_switch_label,left> ▁case ▁TER M ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁q ▁= <invocation_expression,left> ▁Simple Term <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁jj _ la 1 <bracketed_argument_list,left> ▁[ ▁5 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁jj _ gen <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁jj _ consume _ token <argument_list,left> ▁( <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ParseException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> <expression_statement,left> <invocation_expression,left> ▁Optional Weights <argument_list,left> ▁( ▁q ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁true ▁) <return_statement,left> ▁return ▁q ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Error <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Api Key Result ▁delete Api Key <parameter_list,left> ▁( <parameter,left> ▁Delete Api Key Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Api Key <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Insert Tags Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Delete User By Principal Id Result ▁delete User By Principal Id <parameter_list,left> ▁( <parameter,left> ▁Delete User By Principal Id Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete User By Principal Id <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Network Interfaces Result ▁describe Network Interfaces <parameter_list,left> ▁( <parameter,left> ▁Describe Network Interfaces Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Network Interfaces <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁serialize <parameter_list,left> ▁( <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁, <parameter,left> ▁E sch er Serialization Listener ▁listener <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁listener ▁. ▁before Record Serialize <member_access_expression,right> <argument_list,left> ▁( ▁offset ▁, <invocation_expression,left> ▁getRecord Id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁putShort <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, ▁offset ▁, <invocation_expression,left> ▁getOptions <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁putShort <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁offset ▁+ ▁2 <binary_expression,right> ▁, <invocation_expression,left> ▁getRecord Id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁putInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁offset ▁+ ▁4 <binary_expression,right> ▁, ▁8 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁putInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁offset ▁+ ▁8 <binary_expression,right> ▁, ▁field _1_ num Shapes ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁putInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁offset ▁+ ▁12 <binary_expression,right> ▁, ▁field _2_ last MS OS PID ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁listener ▁. ▁after Record Serialize <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁offset ▁+ ▁16 <binary_expression,right> ▁, <invocation_expression,left> ▁getRecord Id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> ▁getRecord Size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁this ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁getRecord Size <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Security Configuration Result ▁create Security Configuration <parameter_list,left> ▁( <parameter,left> ▁Create Security Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Security Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Client V pn Connections Result ▁describe Client V pn Connections <parameter_list,left> ▁( <parameter,left> ▁Describe Client V pn Connections Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Client V pn Connections <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁fill <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁array <parameter,right> ▁, <parameter,left> ▁double ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁array ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁array <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁hasNext <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁next Id ▁< <member_access_expression,left> ▁cells ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Post ings Enum ▁reset <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁int <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁post ings <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁post ings <member_access_expression,right> ▁= ▁post ings <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁upto ▁= <prefix_unary_expression,left> ▁- ▁2 <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁freq ▁= ▁0 <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁has All <parameter_list,left> ▁( <parameter,left> ▁Rev Flag Set ▁set <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁flags ▁& <member_access_expression,left> ▁set ▁. ▁mask <member_access_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> ▁== <member_access_expression,left> ▁set ▁. ▁mask <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Modify Account Result ▁modify Account <parameter_list,left> ▁( <parameter,left> ▁Modify Account Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Account <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Token ▁LT <parameter_list,left> ▁( <parameter,left> ▁int ▁k <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁lazy Init <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁k ▁== ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return ▁null ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁k ▁< ▁0 <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> ▁L B <argument_list,left> ▁( <prefix_unary_expression,left> ▁- ▁k <prefix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= <binary_expression,left> <binary_expression,left> ▁p ▁+ ▁k <binary_expression,right> ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁sync <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁i ▁>= <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁tokens ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Sheet <parameter_list,left> ▁( <parameter,left> ▁int ▁sheet Index <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁bound sheets ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁sheet Index <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁getB sp os <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁bound sheets ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁+ ▁sheet Index <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁bound sheets ▁. ▁remove <member_access_expression,right> <argument_list,left> ▁( ▁sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁fix Tab Id Record <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁sheet Num 1 Based <equals_value_clause,left> ▁= <binary_expression,left> ▁sheet Index ▁+ ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <invocation_expression,left> ▁getNum Names <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Name Record <variable_declarator,left> ▁nr <equals_value_clause,left> ▁= <invocation_expression,left> ▁getName Record <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁nr ▁. ▁getSh eet Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁sheet Num 1 Based <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁nr ▁. ▁set Sheet Number <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁nr ▁. ▁getSh eet Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁sheet Num 1 Based <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁nr ▁. ▁set Sheet Number <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁nr ▁. ▁getSh eet Number <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> ▁} <block,right> <for_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁link Table ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁link Table ▁. ▁remove Sheet <member_access_expression,right> <argument_list,left> ▁( ▁sheet Index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Name <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= <invocation_expression,left> ▁getName Index <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁remove Name <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁final ▁Object <parameter,right> ▁o ▁) <parameter_list,right> ▁{ ▁if ▁( <invocation_expression,left> <assignment_expression,left> <assignment_expression,left> <assignment_expression,left> <prefix_unary_expression,left> ▁! <ERROR,left> <parameter_list,left> ▁( <parameter,left> ▁o ▁instanceof <parameter,right> <),left> <),right> ▁) <parameter_list,right> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> <ERROR,right> ▁p <prefix_unary_expression,right> ▁= <cast_expression,left> ▁( ▁Property ▁) ▁o <cast_expression,right> <assignment_expression,right> <;,left> <;,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁p ▁. ▁getValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁long <ERROR,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁p ▁. ▁getID <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁id ▁!= ▁p Id <binary_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> ▁id ▁!= ▁0 <binary_expression,right> ▁&& <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁types Are Equal <argument_list,left> ▁( ▁type ▁, <invocation_expression,left> <member_access_expression,left> ▁p ▁. ▁getType <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <invocation_expression,left> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> ▁if <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁value ▁== ▁null <binary_expression,right> ▁&& <binary_expression,left> ▁p Value ▁== ▁null <binary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <assignment_expression,left> <invocation_expression,left> <initializer_expression,left> ▁{ ▁return ▁true ▁; ▁} <initializer_expression,right> ▁if <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> ▁value ▁== ▁null <binary_expression,right> ▁|| <binary_expression,left> ▁p Value ▁== ▁null <binary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <initializer_expression,left> ▁{ <ERROR,left> ▁false ▁; ▁} <assignment_expression,left> <generic_name,left> ▁Class <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right>  <assignment_expression,left> ▁value Class ▁= <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <assignment_expression,right> ▁; <invocation_expression,left> <assignment_expression,left> <generic_name,left> ▁Class <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right>  <assignment_expression,left> ▁p Value Class ▁= <invocation_expression,left> <member_access_expression,left> ▁p Value ▁. ▁getClass <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> <prefix_unary_expression,left> ▁! <parenthesized_expression,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁value Class ▁. ▁isAssignable From <member_access_expression,right> <argument_list,left> ▁( ▁p Value Class ▁) <argument_list,right> <invocation_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> ▁&& <prefix_unary_expression,left> ▁! <parenthesized_expression,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁p Value Class ▁. ▁isAssignable From <member_access_expression,right> <argument_list,left> ▁( ▁value Class ▁) <argument_list,right> <invocation_expression,right> ▁) <parenthesized_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <invocation_expression,left> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> ▁if <argument_list,left> ▁( <ERROR,left> <declaration_expression,left> ▁value ▁instanceof <declaration_expression,right> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <ERROR,right> ▁) <argument_list,right> <invocation_expression,right> <initializer_expression,left> ▁{ <ERROR,left> ▁byte ▁[ ▁] <assignment_expression,left> ▁this Val ▁= <cast_expression,left> ▁( <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) ▁value <cast_expression,right> <assignment_expression,right> ▁, <assignment_expression,left> ▁other Val ▁= <cast_expression,left> ▁( <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) ▁p Value <cast_expression,right> <assignment_expression,right> ▁; ▁int <invocation_expression,left> <assignment_expression,left> ▁len ▁= <invocation_expression,left> ▁un p added Length <argument_list,left> ▁( ▁this Val ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,left> ▁; ▁if <ERROR,right> <argument_list,left> ▁( <binary_expression,left> ▁len ▁!= <invocation_expression,left> ▁un p added Length <argument_list,left> ▁( ▁other Val ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,left> <invocation_expression,left> <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> ▁for <argument_list,left> ▁( <declaration_expression,left> ▁int ▁i <declaration_expression,right>  <argument_list,right> <invocation_expression,right> ▁= ▁0 <assignment_expression,right> ▁; ▁i ▁< ▁len ▁; ▁++ ▁) <initializer_expression,left> ▁{ <assignment_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> <element_access_expression,left> ▁this Val <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁!= <element_access_expression,left> ▁other Val <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right>  <initializer_expression,left> ▁{ ▁return ▁false ▁; ▁} <initializer_expression,right> <assignment_expression,right> ▁} <initializer_expression,right> ▁return <ERROR,right> ▁true ▁; ▁} <initializer_expression,right> ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁value ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁p Value ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <assignment_expression,right> <ERROR,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Get Repo Build List Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁GET <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Message Writer <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁buf  <tuple_pattern,right> <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁ByteArray OutputStream <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁enc ▁= <object_creation_expression,left> ▁new ▁OutputStream Writer <argument_list,left> ▁( <invocation_expression,left> ▁getRaw Stream <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁UTF _8 ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁append <parameter_list,left> ▁( <parameter,left> ▁Record Base ▁r <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ rec s ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( ▁r ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁close <parameter_list,left> ▁( ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁read <argument_list,left> ▁( ▁skip Buffer ▁) <argument_list,right> <invocation_expression,right> ▁!= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁actual Size ▁!= ▁expected Size <binary_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Cor rupt ObjectException <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁pack file Cor ruption Detected <member_access_expression,right> ▁, <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁wrong Dec omp ressed Length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁used <equals_value_clause,left> ▁= <binary_expression,left> ▁b Av ail ▁- <invocation_expression,left> <member_access_expression,left> ▁inf ▁. ▁getRem aining <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁0 ▁< ▁used <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁on Object Data <argument_list,left> ▁( ▁src ▁, ▁buf ▁, ▁p ▁, ▁used ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁use <argument_list,left> ▁( ▁used ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁inf ▁. ▁reset <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Model Package Result ▁describe Model Package <parameter_list,left> ▁( <parameter,left> ▁Describe Model Package Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Model Package <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁construct <parameter_list,left> ▁( <parameter,left> ▁Cell Value Record Interface ▁rec <parameter,right> ▁, <parameter,left> ▁Record Stream ▁rs <parameter,right> ▁, <parameter,left> ▁Shared Value Manager ▁sf h <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁rec ▁instanceof ▁Formula Record ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Formula Record <variable_declarator,left> ▁formula Rec <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Formula Record ▁) ▁rec <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String Record ▁cached Text <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> ▁Class <ERROR,left> ▁< ▁? <assignment_expression,left> <binary_expression,left> ▁extends ▁Record ▁> ▁next Class <binary_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁peek Next Class <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁next Class ▁== <member_access_expression,left> ▁String Record ▁. ▁class <member_access_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁cached Text ▁= <cast_expression,left> ▁( ▁String Record ▁) <invocation_expression,left> <member_access_expression,left> ▁rs ▁. ▁getNext <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁cached Text ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁insert Cell <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Formula Record Aggregate <argument_list,left> ▁( ▁formula Rec ▁, ▁cached Text ▁, ▁sf h ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁insert Cell <argument_list,left> ▁( ▁rec ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dec ompressor ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Def late Dec ompressor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update S 3 Resources Result ▁update S 3 Resources <parameter_list,left> ▁( <parameter,left> ▁Update S 3 Resources Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate S 3 Resources <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Group Query Node <tuple_pattern,left> ▁( ▁Query Node ▁query ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁query ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Query Node Error <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Message Impl <argument_list,left> ▁( <member_access_expression,left> ▁Query Parser Messages ▁. ▁PARAMETER _ VALUE _ NOT _ SUPPORTED <member_access_expression,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> ▁allocate <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Leaf <argument_list,left> ▁( ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( ▁query ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁CharSequence ▁to QueryString <parameter_list,left> ▁( <parameter,left> ▁Escape Query Syntax ▁esc aper <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁path <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getFirst Path Element <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Query Text ▁path element <variable_declaration,right> ▁: ▁( ▁1 ▁) ▁) ▁{ <assignment_expression,left> ▁CharSequence ▁value ▁= <invocation_expression,left> <member_access_expression,left> ▁esc aper ▁. ▁escape <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁path element ▁. ▁value <member_access_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁Locale ▁. ▁getDefault <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <member_access_expression,left> ▁Type ▁. ▁STRING <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁path ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Cell Comment <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁H SSF Comment <variable_declarator,left> ▁comment <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ sheet ▁. ▁find Cell Comment <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁_ record ▁. ▁getRow <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> <member_access_expression,left> ▁_ record ▁. ▁getColumn <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ comment ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁null ▁== ▁comment <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁_ sheet ▁. ▁getDraw ing Pat ri arch <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁remove Shape <member_access_expression,right> <argument_list,left> ▁( ▁comment ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁reset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁ar riving ▁= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁leaving ▁= <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Activ ate User Result ▁activate User <parameter_list,left> ▁( <parameter,left> ▁Activ ate User Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Activate User <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Charset Detected <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Unsupported Operation Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cluster ▁modify Snapshot Copy Retention Period <parameter_list,left> ▁( <parameter,left> ▁Modify Snapshot Copy Retention Period Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Modify Snapshot Copy Retention Period <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Cluster Subnet Group Result ▁delete Cluster Subnet Group <parameter_list,left> ▁( <parameter,left> ▁Delete Cluster Subnet Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Cluster Subnet Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁buffer <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁decode <argument_list,left> ▁( ▁buffer ▁, ▁0 ▁, <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getDefault Port <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Task Result ▁stop Task <parameter_list,left> ▁( <parameter,left> ▁Stop Task Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Task <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁seek Exact <parameter_list,left> ▁( <parameter,left> ▁BytesRef ▁target <parameter,right> ▁, <parameter,left> ▁Term State ▁other State <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁other State <variable_declaration,right> ▁!= <ERROR,right> <expression_statement,left> <binary_expression,left> ▁null ▁&& ▁other State <binary_expression,right> ▁instanceof ▁Block Term State ▁; <expression_statement,right> <expression_statement,left> <binary_expression,left> <postfix_unary_expression,left> ▁assert ▁! <postfix_unary_expression,right> ▁do Ord ▁|| <binary_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Block Term State ▁) ▁other State <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁ord <member_access_expression,right> ▁< ▁num Terms <binary_expression,right> <binary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁state ▁. ▁copyFrom <member_access_expression,right> <argument_list,left> ▁( ▁other State ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁seek Pending ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁index Is Current ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁term ▁. ▁copy Bytes <member_access_expression,right> <argument_list,left> ▁( ▁target ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Series To Chart Group Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ chart Group Index ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁write Unicode String Flag AndData <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁, <parameter,left> ▁String ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁is 16 Bit <equals_value_clause,left> ▁= <invocation_expression,left> ▁has Mult ib y te <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> ▁is 16 Bit ▁? ▁0 x 01 ▁: ▁0 x 00 <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁is 16 Bit ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁put Unicode LE <tuple_pattern,left> ▁( ▁value ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁put Compressed Unicode <tuple_pattern,left> ▁( ▁value ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Author ize SecurityGroup In gress Result ▁authorize SecurityGroup In gress <parameter_list,left> ▁( <parameter,left> ▁Author ize SecurityGroup In gress Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Author ize SecurityGroup In gress <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁addFile <parameter_list,left> ▁( <parameter,left> ▁String ▁file <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check File Names <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Collections ▁. ▁singleton <member_access_expression,right> <argument_list,left> ▁( ▁file ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁set Files ▁. ▁add <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁named For This Segment <argument_list,left> ▁( ▁file ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setSize <parameter_list,left> ▁( <parameter,left> ▁int ▁width <parameter,right> ▁, <parameter,left> ▁int ▁height <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁m Width ▁= ▁width <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁m Height ▁= ▁height <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁void ▁setP rec edence Filter Supp ressed <parameter_list,left> ▁( <parameter,left> ▁boolean ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( ▁value ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁reaches Into Outer Context <member_access_expression,right> ▁|= ▁0 x 4 0000000 <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁reaches Into Outer Context <member_access_expression,right> ▁&= <prefix_unary_expression,left> ▁~ ▁SUP PRESS _ PRE CE DEN CE _ FILTER <prefix_unary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Interval Set ▁LO OK <parameter_list,left> ▁( <parameter,left> ▁AT N State ▁s <parameter,right> ▁, <parameter,left> ▁Rule Context ▁ctx <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁LO OK <argument_list,left> ▁( ▁s ▁, ▁null ▁, ▁ctx ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getOption Flags <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRow Height <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Builder <tuple_pattern,left> ▁( ▁boolean ▁ded up ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ded up <member_access_expression,right> ▁= ▁ded up <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Hashtable <tuple_pattern,left> ▁( ▁int ▁capacity ▁, ▁float ▁load Factor ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁capacity ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁load Factor ▁<= ▁0 <binary_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> ▁Float ▁. ▁isNaN <member_access_expression,right> <argument_list,left> ▁( ▁load Factor ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁load Factor <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Object ▁get <parameter_list,left> ▁( <parameter,left> ▁CharSequence ▁key <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁bucket <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁normal Completion ▁. ▁getBucket <member_access_expression,right> <argument_list,left> ▁( ▁key ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <conditional_expression,left> <binary_expression,left> ▁bucket ▁== <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> <binary_expression,right> ▁? ▁null ▁: <invocation_expression,left> <member_access_expression,left> ▁Long ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁bucket ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Hyper Parameter T uning Jobs Result ▁list Hyper Parameter T uning Jobs <parameter_list,left> ▁( <parameter,left> ▁List Hyper Parameter T uning Jobs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Hyper Parameter T uning Jobs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Table Result ▁delete Table <parameter_list,left> ▁( <parameter,left> ▁String ▁tableName <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁delete Table <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <object_creation_expression,left> ▁new ▁Delete Table Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁. ▁with TableName <member_access_expression,right> <argument_list,left> ▁( ▁tableName ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁boolean ▁lessThan <parameter_list,left> ▁( <parameter,left> ▁Text Fragment ▁frag A <parameter,right> ▁, <parameter,left> ▁Text Fragment ▁frag B <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁frag A ▁. ▁getScore <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== <invocation_expression,left> <member_access_expression,left> ▁frag B ▁. ▁getScore <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <binary_expression,left> <member_access_expression,left> ▁frag A ▁. ▁frag Num <member_access_expression,right> ▁> <member_access_expression,left> ▁frag B ▁. ▁frag Num <member_access_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁else <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁frag A ▁. ▁getScore <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁< <invocation_expression,left> <member_access_expression,left> ▁frag B ▁. ▁getScore <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁free Before <parameter_list,left> ▁( <parameter,left> ▁int ▁pos <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁pos <variable_declaration,right> <ERROR,left> ▁>= ▁0 <ERROR,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁assert ▁pos <variable_declaration,right> <<=,left> <<=,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁new Count <equals_value_clause,left> ▁= <binary_expression,left> ▁next Pos ▁- ▁pos <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> <variable_declaration,left> ▁assert ▁new Count <variable_declaration,right> ▁<= ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁new Count <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁count <binary_expression,right> ▁; <expression_statement,right> <ERROR,left> <variable_declaration,left> ▁assert ▁new Count <variable_declaration,right> ▁<= ▁. ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁new Count <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁count ▁= ▁new Count <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update H IT Type Of H IT Result ▁update H IT Type Of H IT <parameter_list,left> ▁( <parameter,left> ▁Update H IT Type Of H IT Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate H IT Type Of H IT <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update Rec omm ender Configuration Result ▁update Rec omm ender Configuration <parameter_list,left> ▁( <parameter,left> ▁Update Rec omm ender Configuration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate Rec omm ender Configuration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁compareTo <parameter_list,left> ▁( <parameter,left> ▁BytesRef ▁other <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁compare Unsigned <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁bytes <member_access_expression,right> ▁, <member_access_expression,left> ▁this ▁. ▁offset <member_access_expression,right> ▁, <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁offset <member_access_expression,right> ▁+ <member_access_expression,left> ▁this ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁, <member_access_expression,left> ▁other ▁. ▁bytes <member_access_expression,right> ▁, <member_access_expression,left> ▁other ▁. ▁offset <member_access_expression,right> ▁, <binary_expression,left> <member_access_expression,left> ▁other ▁. ▁offset <member_access_expression,right> ▁+ <member_access_expression,left> ▁other ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁stem <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁char ▁s <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right>  <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁len ▁> ▁4 <binary_expression,right> ▁&& <binary_expression,left> <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁len ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁== <character_literal,left> ▁' ▁' <character_literal,right> <binary_expression,right> <binary_expression,right> ▁) <expression_statement,left> <postfix_unary_expression,left> ▁len ▁-- <postfix_unary_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁len ▁> ▁5 <binary_expression,right> ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁&& ▁use N yn ors k <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <binary_expression,left> ▁len ▁- ▁3 <binary_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁len ▁> ▁4 <binary_expression,right> ▁&& <parenthesized_expression,left> ▁( <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁|| <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <invocation_expression,left> ▁endsWith <argument_list,left> ▁( ▁s ▁, ▁len ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁&& ▁use N yn ors k <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <binary_expression,left> ▁len ▁- ▁2 <binary_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁len ▁> ▁3 <binary_expression,right> ▁) <switch_statement,left> ▁switch ▁( <element_access_expression,left> ▁s <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁len ▁- ▁1 <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁' <character_literal,right> ▁: <case_switch_label,right> <case_switch_label,left> ▁case <character_literal,left> ▁' ▁' <character_literal,right> ▁: <case_switch_label,right> <return_statement,left> ▁return <binary_expression,left> ▁len ▁- ▁1 <binary_expression,right> ▁; <return_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> <if_statement,right> <return_statement,left> ▁return ▁len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe DB Snapshots Result ▁describe DB Snapshots <parameter_list,left> ▁( <parameter,left> ▁Describe DB Snapshots Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe DB Snapshots <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁SortedSet DocValues Facet Field <tuple_pattern,left> ▁( ▁String ▁dim ▁, ▁String ▁label ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁TYPE ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Facet Field ▁. ▁verify Label <member_access_expression,right> <argument_list,left> ▁( ▁label ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Facet Field ▁. ▁verify Label <member_access_expression,right> <argument_list,left> ▁( ▁dim ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁dim <member_access_expression,right> ▁= ▁dim <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁label <member_access_expression,right> ▁= ▁label <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Documentation Part Result ▁create Documentation Part <parameter_list,left> ▁( <parameter,left> ▁Create Documentation Part Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Documentation Part <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getValue <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁value ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Short Buffer ▁as ReadOnly Buffer <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁duplicate <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Update DataSource Permissions Result ▁update DataSource Permissions <parameter_list,left> ▁( <parameter,left> ▁Update DataSource Permissions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁executeUpdate DataSource Permissions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> <qualified_name,left> ▁org ▁. ▁apache <qualified_name,right> ▁. ▁poi <qualified_name,right> ▁. ▁h ss f <qualified_name,right> ▁. ▁record <qualified_name,right> ▁. ▁Record <qualified_name,right> ▁create Single Record <parameter_list,left> ▁( <parameter,left> ▁Record InputStream ▁in <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁I _ Record Creator <variable_declarator,left> ▁constructor <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁_ record Cre ators ById ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( <argument,left> ▁in ▁. <invocation_expression,left> ▁getS id <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <argument,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁constructor ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Unknown Record <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁constructor ▁. ▁create <member_access_expression,right> <argument_list,left> ▁( ▁in ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getCount <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁m Tabs ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Application Reference DataSource Result ▁delete Application Reference DataSource <parameter_list,left> ▁( <parameter,left> ▁Delete Application Reference DataSource Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Application Reference DataSource <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Project Version Result ▁createProject Version <parameter_list,left> ▁( <parameter,left> ▁Create Project Version Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Project Version <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁IntBuffer ▁slice <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁ReadOnly Int Array Buffer <argument_list,left> ▁( <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁byte ▁get <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁position ▁== ▁limit <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Buffer Under flow Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁this ▁. ▁block <member_access_expression,right> ▁. ▁peek Byte <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁offset ▁+ <postfix_unary_expression,left> ▁position ▁++ <postfix_unary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Long Buffer ▁put <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁c <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Index <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁backing Array <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁offset ▁+ ▁index <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁c <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Stored Field <tuple_pattern,left> ▁( ▁String ▁name ▁, ▁float ▁value ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁name ▁, ▁TYPE ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁fields Data ▁= ▁value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Interval Set ▁getExpected Tokens Within Current Rule <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁AT N <variable_declarator,left> ▁at n <equals_value_clause,left> ▁= <member_access_expression,left> <invocation_expression,left> ▁get Interpreter <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁at n <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁AT N State <variable_declarator,left> ▁s <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁at n ▁. ▁states <member_access_expression,right> ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getState <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁at n ▁. ▁next Tokens <member_access_expression,right> <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> <binary_expression,left> <invocation_expression,left> ▁get ReadOnly <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁== ▁1 <binary_expression,right> ▁? <string_literal,left> ▁" ▁" <string_literal,right> ▁: <string_literal,left> ▁" ▁" <string_literal,right> <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Integer ▁. ▁toHexString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getPassword <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getUsername <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Sub module Init Command <tuple_pattern,left> ▁( ▁Repository ▁repo ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁repo ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁paths ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁ArrayList <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁include <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁, <parameter,left> ▁Any ObjectId ▁id <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁valid Ref Name <equals_value_clause,left> ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Repository ▁. ▁isValid Ref Name <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> <member_access_expression,left> ▁Constants ▁. ▁HEAD <member_access_expression,right> ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! ▁valid Ref Name <prefix_unary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁invalid Ref Name <member_access_expression,right> ▁, ▁name ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁include ▁. ▁containsKey <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Illegal StateException <argument_list,left> ▁( <binary_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁duplicate Ref <member_access_expression,right> ▁+ ▁name <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁include ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, <invocation_expression,left> <member_access_expression,left> ▁id ▁. ▁to ObjectId <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Cluster ▁enable Snapshot Copy <parameter_list,left> ▁( <parameter,left> ▁Enable Snapshot Copy Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Enable Snapshot Copy <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Value Fill er ▁getValue Fill er <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Value Fill er <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getP ane <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getActive Cell Row <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getActive Cell Col <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getActive Cell Ref <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁n Refs <equals_value_clause,left> ▁= <member_access_expression,left> ▁field _ 6_ refs ▁. ▁length <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁n Refs ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁Cell Range Address 8 Bit ▁field _ 6_ ref <variable_declaration,right> ▁: ▁) ▁{ <member_access_expression,left> ▁field _ 6_ ref ▁. ▁serialize <member_access_expression,right> ▁( ▁out ▁) <ERROR,right> ▁; ▁} <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁Counter ▁new Counter <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁new Counter <argument_list,left> ▁( ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁get <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁, <parameter,left> ▁boolean ▁df lt <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁vals <bracketed_argument_list,left> ▁[  ▁] <bracketed_argument_list,right> <equals_value_clause,left> ▁= <cast_expression,left> ▁( <array_type,left> ▁boolean <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁) <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁vals ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁s val <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁props ▁. ▁getProperty <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁df lt <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Boolean ▁. ▁valueOf <member_access_expression,right> <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> ▁. ▁booleanValue <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁k <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁indexOf <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁colName <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( ▁0 ▁, ▁k ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁s val ▁= <invocation_expression,left> <member_access_expression,left> ▁s val ▁. ▁substring <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁k ▁+ ▁1 <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁col For Val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁colName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁vals ▁= <invocation_expression,left> ▁prop To Boolean Array <argument_list,left> ▁( ▁s val ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁val By Round ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁name ▁, ▁vals ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <element_access_expression,left> ▁vals <bracketed_argument_list,left> ▁[ <binary_expression,left> ▁round Number ▁% <member_access_expression,left> ▁vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁pre Serialize <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁getTab pos <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Tab Id Record <variable_declarator,left> ▁t ir <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁Tab Id Record ▁) <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁records ▁. ▁getTab pos <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <member_access_expression,left> <member_access_expression,left> ▁t ir ▁. ▁_ tab ids <member_access_expression,right> ▁. ▁length <member_access_expression,right> ▁< <invocation_expression,left> <member_access_expression,left> ▁bound sheets ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁fix Tab Id Record <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Limit Token Count Analyzer <tuple_pattern,left> ▁( ▁Analyzer ▁delegate ▁, ▁int ▁max Token Count ▁, ▁boolean ▁consume All Tokens ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( <ERROR,left> ▁delegate ▁. <ERROR,right> <invocation_expression,left> ▁get Reuse Strategy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁delegate <member_access_expression,right> ▁= <ERROR,left> ▁delegate ▁; <ERROR,right> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁max Token Count <member_access_expression,right> ▁= ▁max Token Count <assignment_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁consume All Tokens <member_access_expression,right> ▁= ▁consume All Tokens <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁External Book Block <tuple_pattern,left> ▁( ▁int ▁numberOf Sh eets ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ external Book Record ▁= <invocation_expression,left> <member_access_expression,left> ▁S up Book Record ▁. ▁create Internal References <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁short ▁) ▁numberOf Sh eets <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ external Name Records ▁= <array_creation_expression,left> ▁new <array_type,left> ▁External Name Record <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ cr n Blocks ▁= <array_creation_expression,left> ▁new <array_type,left> ▁CR N Block <array_rank_specifier,left> ▁[ ▁0 ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get Prot ect <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Push Command ▁set Th in <parameter_list,left> ▁( <parameter,left> ▁boolean ▁thin <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Callable <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁thin <member_access_expression,right> ▁= ▁thin <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁compareTo <parameter_list,left> ▁( <parameter,left> ▁Search er Tracker ▁other <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Double ▁. ▁compare <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁other ▁. ▁record Time Sec <member_access_expression,right> ▁, ▁record Time Sec ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Reverse String Filter ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁in <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Reverse String Filter <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Block List <variable_declarator,left> <tuple_pattern,left> ▁( <ERROR,left> ▁) ▁{ <ERROR,right> ▁directory  <tuple_pattern,right> <equals_value_clause,left> ▁= <binary_expression,left> <member_access_expression,left> ▁Block List ▁. ▁< ▁T <member_access_expression,right> ▁> <invocation_expression,left> ▁new Directory <argument_list,left> ▁( ▁256 ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁directory <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <member_access_expression,left> ▁Block List ▁. ▁< ▁T <member_access_expression,right> ▁> <invocation_expression,left> ▁new Block <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁tail Block ▁= <element_access_expression,left> ▁directory <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Query Sc orer <tuple_pattern,left> ▁( ▁Weight ed Span Term <ERROR,left> ▁[ ▁] <ERROR,right> ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁field Weight ed Span Terms <member_access_expression,right> ▁= <object_creation_expression,left> ▁new <generic_name,left> ▁HashMap <type_argument_list,left> ▁< ▁> <type_argument_list,right> <generic_name,right> <argument_list,left> ▁( <member_access_expression,left> ▁weighted Terms ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁weighted Terms ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Weight ed Span Term <variable_declarator,left> ▁existing Term <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁field Weight ed Span Terms ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <element_access_expression,left> ▁weighted Terms <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁term <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁existing Term ▁== ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁|| <parenthesized_expression,left> ▁( <binary_expression,left> <member_access_expression,left> ▁existing Term ▁. ▁weight <member_access_expression,right> ▁< <member_access_expression,left> <element_access_expression,left> ▁weighted Terms <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁weight <member_access_expression,right> <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁field Weight ed Span Terms ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <element_access_expression,left> ▁weighted Terms <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁term <member_access_expression,right> ▁, <element_access_expression,left> ▁weighted Terms <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁max Term Weight ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁max Term Weight ▁, <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁weighted Terms <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁getWeight <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <assignment_expression,left> ▁skip Init Extractor ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁_ other <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_function_statement,left> ▁assert ▁never Equals <parameter_list,left> ▁( ▁_ other ▁) <parameter_list,right> ▁; <local_function_statement,right> <if_statement,left> ▁if ▁( ▁_ other ▁instanceof ▁Mer ged Group ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <generic_name,left> ▁Mer ged Group <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> <variable_declarator,left> ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( <generic_name,left> ▁Mer ged Group <type_argument_list,left> ▁< ▁? ▁> <type_argument_list,right> <generic_name,right> ▁) ▁_ other <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁group Value ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> ▁other ▁== ▁null <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁group Value ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁other ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁final ▁Charset ▁charset <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁cs ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Experiment Result ▁describe Experiment <parameter_list,left> ▁( <parameter,left> ▁Describe Experiment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Experiment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁E sch er Graphics <tuple_pattern,left> ▁( ▁H SSF Shape Group ▁es ch er Group ▁, ▁H SSF Workbook ▁workbook ▁, ▁Color ▁fore color ▁, ▁float ▁vertical Points Per Pixel ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁es ch er Group <member_access_expression,right> ▁= ▁es ch er Group <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁workbook <member_access_expression,right> ▁= ▁workbook <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁vertical Points Per Pixel <member_access_expression,right> ▁= ▁vertical Points Per Pixel <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁vertical Pixels Per Point <member_access_expression,right> ▁= <binary_expression,left> ▁1 ▁/ ▁vertical Points Per Pixel <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁font <member_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁Font <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁, ▁0 ▁, ▁10 ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁foreground <member_access_expression,right> ▁= ▁fore color <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁pattern <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁pattern Text ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Route Table Result ▁delete Route Table <parameter_list,left> ▁( <parameter,left> ▁Delete Route Table Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Route Table <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate V PC With Host ed Zone Result ▁associate V PC With Host ed Zone <parameter_list,left> ▁( <parameter,left> ▁Assoc iate V PC With Host ed Zone Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate V PC With Host ed Zone <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Put Integration Result ▁put Integration <parameter_list,left> ▁( <parameter,left> ▁Put Integration Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Put Integration <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Simple Entry <tuple_pattern,left> ▁( ▁K ▁the Key ▁, ▁V ▁the Value ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁key ▁= ▁the Key <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁value ▁= ▁the Value <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁decode <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁blocks <parameter,right> ▁, <parameter,left> ▁int ▁blocks Offset <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁, <parameter,left> ▁int ▁values Offset <parameter,right> ▁, <parameter,left> ▁int ▁iterations <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁iterations <binary_expression,right> ▁; <prefix_unary_expression,left> ▁++ ▁i <prefix_unary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 0 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 1 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 0 ▁<< ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁>> ▁> ▁4 <binary_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁byte 2 <equals_value_clause,left> ▁= <binary_expression,left> <element_access_expression,left> ▁blocks <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁blocks Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁& ▁0 xFF <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁values <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁values Offset ▁++ <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁byte 1 ▁& ▁15 <binary_expression,right> ▁) <parenthesized_expression,right> ▁<< ▁8 <binary_expression,right> ▁) <parenthesized_expression,right> ▁| ▁byte 2 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Dis associate Connection From L ag Result ▁dis associate Connection From L ag <parameter_list,left> ▁( <parameter,left> ▁Dis associate Connection From L ag Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Dis associate Connection From L ag <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁File Mode ▁getOld Mode <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁old Mode ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁@ Override ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁m ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Key Ph rases Detection Job Result ▁stop Key Ph rases Detection Job <parameter_list,left> ▁( <parameter,left> ▁Stop Key Ph rases Detection Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Key Ph rases Detection Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁getColumn <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Dom inant Language Detection Jobs Result ▁list Dom inant Language Detection Jobs <parameter_list,left> ▁( <parameter,left> ▁List Dom inant Language Detection Jobs Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Dom inant Language Detection Jobs <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁start <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁length <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁readerIndex <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁int ▁parse Hex Int 4 <parameter_list,left> ▁( <parameter,left> ▁final ▁byte <parameter,right> ▁digit ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁byte ▁r <equals_value_clause,left> ▁= <element_access_expression,left> ▁digits 16 <bracketed_argument_list,left> ▁[ ▁digit ▁] <bracketed_argument_list,right> <element_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁r ▁< ▁0 <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Array IndexOutOfBounds Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return ▁r ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Attribute <tuple_pattern,left> ▁( ▁String ▁name ▁, ▁String ▁value ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setName <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setValue <argument_list,left> ▁( ▁value ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Describe Stack Set Operation Result ▁describe Stack Set Operation <parameter_list,left> ▁( <parameter,left> ▁Describe Stack Set Operation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Stack Set Operation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁H SSF Cell ▁getCell <parameter_list,left> ▁( <parameter,left> ▁int ▁cell num <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getCell <argument_list,left> ▁( ▁cell num ▁, <invocation_expression,left> <member_access_expression,left> ▁book ▁. ▁getM issing Cell Policy <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁write Continue If Required <argument_list,left> ▁( <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ ul r Output ▁. ▁write <member_access_expression,right> <argument_list,left> ▁( ▁b ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Reset Image Attribute Request <tuple_pattern,left> ▁( ▁String ▁image Id ▁, ▁Reset Image AttributeName ▁attribute ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setImage Id <argument_list,left> ▁( ▁image Id ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttribute <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁attribute ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁discard Result Contents <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁result Contents ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ObjectId ▁getP eel ed ObjectId <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getLe af <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getP eel ed ObjectId <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁und ep rec ate Domain <parameter_list,left> ▁( <parameter,left> ▁Und ep rec ate Domain Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁execute Und ep rec ate Domain <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁sid ▁+ <invocation_expression,left> ▁getP tg Class <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁field _3_ string ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeByte <member_access_expression,right> <argument_list,left> ▁( <conditional_expression,left> ▁_ is 16 bit Unicode ▁? ▁0 x 01 ▁: ▁0 x 00 <conditional_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁_ is 16 bit Unicode ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁put Unicode LE <qualified_name,right> <tuple_pattern,left> ▁( ▁field _3_ string ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁StringUtil ▁. ▁put Compressed Unicode <qualified_name,right> <tuple_pattern,left> ▁( ▁field _3_ string ▁, ▁out ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Queue Result ▁delete Queue <parameter_list,left> ▁( <parameter,left> ▁String ▁queue Url <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁delete Queue <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <object_creation_expression,left> ▁new ▁Delete Queue Request <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁. ▁with Queue Url <member_access_expression,right> <argument_list,left> ▁( ▁queue Url ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set Check E of After Pack Footer <parameter_list,left> ▁( <parameter,left> ▁boolean ▁b <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁check E of After Pack Footer ▁= ▁b <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁swap <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁s Begin <equals_value_clause,left> ▁= ▁begin A <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁int ▁s End <equals_value_clause,left> ▁= ▁end A <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁begin A ▁= ▁begin B <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁end A ▁= ▁end B <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁begin B ▁= ▁s Begin <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁end B ▁= ▁s End <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁getPack ed Git WindowSize <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁packed Git WindowSize ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Put Metric Data Result ▁put Metric Data <parameter_list,left> ▁( <parameter,left> ▁Put Metric Data Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Put Metric Data <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get C el eb rity Rec ognition Result ▁getC el eb rity Rec ognition <parameter_list,left> ▁( <parameter,left> ▁Get C el eb rity Rec ognition Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get C el eb rity Rec ognition <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Create Queue Request <tuple_pattern,left> ▁( ▁String ▁queueName ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Queue Name <argument_list,left> ▁( ▁queueName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Area 3 DP x g <tuple_pattern,left> ▁( ▁int ▁external Workbook Number ▁, ▁Sheet Identifier ▁sheet Name ▁, ▁Area Reference ▁are are f ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁are are f ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁external Workbook Number <member_access_expression,right> ▁= ▁external Workbook Number <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁first Sheet Name <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sheet Name ▁. ▁getSh eet Identifier <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁sheet Name ▁instanceof ▁Sheet Range Identifier ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁last Sheet Name <member_access_expression,right> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Sheet Range Identifier ▁) ▁sheet Name <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁getLast Sheet Identifier <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁last Sheet Name <member_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁setB as eline <parameter_list,left> ▁( <parameter,left> ▁long ▁clock Time <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁t 0 ▁= ▁clock Time <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁timeout ▁= <binary_expression,left> ▁t 0 ▁+ ▁ticks Allowed <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Move Address To V pc Result ▁move Address To V pc <parameter_list,left> ▁( <parameter,left> ▁Move Address To V pc Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Move Address To V pc <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁coll <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁collection Model ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁coll ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Locale ▁. ▁ROOT <member_access_expression,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁coll ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁String ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁Locale ▁. ▁ROOT <member_access_expression,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <invocation_expression,left> ▁getName <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe L ags Result ▁describe L ags <parameter_list,left> ▁( <parameter,left> ▁Describe L ags Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe L ags <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Area Eval ▁offset <parameter_list,left> ▁( <parameter,left> ▁int ▁rel First Row I x <parameter,right> ▁, <parameter,left> ▁int ▁rel Last Row I x <parameter,right> ▁, <parameter,left> ▁int ▁rel First Col I x <parameter,right> ▁, <parameter,left> ▁int ▁rel Last Col I x <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁_ ref Eval ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ area Eval ▁. ▁offset <member_access_expression,right> <argument_list,left> ▁( ▁rel First Row I x ▁, ▁rel Last Row I x ▁, ▁rel First Col I x ▁, ▁rel Last Col I x ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ ref Eval ▁. ▁offset <member_access_expression,right> <argument_list,left> ▁( ▁rel First Row I x ▁, ▁rel Last Row I x ▁, ▁rel First Col I x ▁, ▁rel Last Col I x ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Short Buffer ▁put <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁short <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁, <parameter,left> ▁int ▁src Offset <parameter,right> ▁, <parameter,left> ▁int ▁short Count <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁limit <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁limit ▁* <member_access_expression,left> ▁Size Of ▁. ▁SHORT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁* <member_access_expression,left> ▁Size Of ▁. ▁SHORT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁byteBuffer ▁instanceof ▁Read Write Direct ByteBuffer ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Read Write Direct ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁src Offset ▁, ▁short Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <parenthesized_expression,left> ▁( <cast_expression,left> ▁( ▁Read Write Heap ByteBuffer ▁) ▁byteBuffer <cast_expression,right> ▁) <parenthesized_expression,right> ▁. ▁put <member_access_expression,right> <argument_list,left> ▁( ▁src ▁, ▁src Offset ▁, ▁short Count ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁position <member_access_expression,right> ▁+= ▁short Count <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁initialize <parameter_list,left> ▁( <parameter,left> ▁final ▁String <parameter,right> ▁cat ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁_ cat <member_access_expression,right> ▁= ▁cat <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁int ▁one Byte <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁write <member_access_expression,right> <argument_list,left> ▁( ▁one Byte ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁written ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Import Image Tasks Result ▁describe Import Image Tasks <parameter_list,left> ▁( <parameter,left> ▁Describe Import Image Tasks Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Import Image Tasks <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Column Info Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ first Col ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ last Col ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ col Width ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ xf Index ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ options ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <ERROR,left> ▁switch ▁( <ERROR,left> <argument,left> ▁in ▁. <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <argument,right> ▁) <ERROR,right> <initializer_expression,left> ▁{ <ERROR,left> ▁2 ▁: <assignment_expression,left> ▁field _ 6_ reserved ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁break ▁; ▁case ▁1 ▁: <assignment_expression,left> ▁field _ 6_ reserved ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readByte <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; ▁break ▁; ▁case ▁0 ▁: <assignment_expression,left> ▁field _ 6_ reserved ▁= ▁0 <assignment_expression,right> ▁; ▁break ▁; ▁default ▁: <ERROR,right> <throw_expression,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁remaining <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> <throw_expression,right> ▁; ▁} <initializer_expression,right> <ERROR,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Status <tuple_pattern,left> ▁( ▁Index Diff ▁diff ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁diff <member_access_expression,right> ▁= ▁diff <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁has Un committed Changes ▁= <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Added <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁|| <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Changed <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁|| <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁getRem oved <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁|| <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁getM issing <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁|| <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Modified <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> ▁|| <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁get Conflict ing <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁clean ▁= <binary_expression,left> <prefix_unary_expression,left> ▁! ▁has Un committed Changes <prefix_unary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁diff ▁. ▁getUn tracked <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁isEmpty <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Experiment Result ▁create Experiment <parameter_list,left> ▁( <parameter,left> ▁Create Experiment Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Experiment <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Unknown Record ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Float Buffer ▁slice <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁limit <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁limit ▁* <member_access_expression,left> ▁Size Of ▁. ▁FLOAT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁position <member_access_expression,right> <argument_list,left> ▁( <binary_expression,left> ▁position ▁* <member_access_expression,left> ▁Size Of ▁. ▁FLOAT <member_access_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁ByteBuffer <variable_declarator,left> ▁bb <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁slice <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁order <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁order <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Float Buffer <variable_declarator,left> ▁result <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Float To ByteBuffer Adapter <argument_list,left> ▁( ▁bb ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁byteBuffer ▁. ▁clear <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁result ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Snapshot Sched ules Result ▁describe Snapshot Sched ules <parameter_list,left> ▁( <parameter,left> ▁Describe Snapshot Sched ules Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Snapshot Sched ules <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁List Images Result ▁list Images <parameter_list,left> ▁( <parameter,left> ▁List Images Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute List Images <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Diff <tuple_pattern,left> ▁( ▁int ▁ins ▁, ▁int ▁del ▁, ▁int ▁rep ▁, ▁int ▁noop ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁INSERT ▁= ▁ins <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁DELETE ▁= ▁del <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁REPLACE ▁= ▁rep <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁NO OP ▁= ▁noop <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁to Formula String <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁operands <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁0 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <element_access_expression,left> ▁operands <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁void ▁setup Environment <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁String <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁workbook Names <parameter,right> ▁, <parameter,left> <array_type,left> ▁Fork ed Evaluator <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁evalu ators <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <array_type,left> ▁Work book Evaluator <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <variable_declarator,left> ▁wb E vals <equals_value_clause,left> ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Work book Evaluator <array_rank_specifier,left> ▁[ <member_access_expression,left> ▁evalu ators ▁. ▁length <member_access_expression,right> ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁wb E vals ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁wb E vals <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <member_access_expression,left> <element_access_expression,left> ▁evalu ators <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁_ eval uator <member_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Col lab or ating Work books Environment ▁. ▁setup <member_access_expression,right> <argument_list,left> ▁( ▁workbook Names ▁, ▁wb E vals ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁List Photo Tags Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Random S ampling Fac ets Collector <tuple_pattern,left> ▁( ▁int ▁sample Size ▁, ▁long ▁seed ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁sample Size <member_access_expression,right> ▁= ▁sample Size <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁random <member_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁XOR Shift 64 Random <argument_list,left> ▁( ▁seed ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁sampled Docs <member_access_expression,right> ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Al locate Static Ip Result ▁allocate Static Ip <parameter_list,left> ▁( <parameter,left> ▁Al locate Static Ip Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Alloc ate Static Ip <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁F eat Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁future Header ▁= <object_creation_expression,left> ▁new ▁F tr Header <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁is f _ shared Feature Type ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁reserved 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readByte <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁reserved 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁cre f <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁cb Feat Data ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readInt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁reserved 3 ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁cell Refs ▁= <array_creation_expression,left> ▁new <array_type,left> ▁Cell Range Address <array_rank_specifier,left> ▁[ ▁cre f ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁cell Refs ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁cell Refs <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁Cell Range Address <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <switch_statement,left> ▁switch ▁( ▁is f _ shared Feature Type ▁) <switch_body,left> ▁{ <switch_section,left> <case_switch_label,left> ▁case <member_access_expression,left> ▁F eat H dr Record ▁. ▁SHA RE DF E ATURE S _ IS F PRO TE CTION <member_access_expression,right> ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁shared Feature ▁= <object_creation_expression,left> ▁new ▁F eat Protection <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case <member_access_expression,left> ▁F eat H dr Record ▁. ▁SHA RE DF E ATURE S _ IS FF EC 2 <member_access_expression,right> ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁shared Feature ▁= <object_creation_expression,left> ▁new ▁F eat Formula Err 2 <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <case_switch_label,left> ▁case <member_access_expression,left> ▁F eat H dr Record ▁. ▁SHA RE DF E ATURE S _ IS F FACT OID <member_access_expression,right> ▁: <case_switch_label,right> <expression_statement,left> <assignment_expression,left> ▁shared Feature ▁= <object_creation_expression,left> ▁new ▁F eat Smart Tag <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <break_statement,left> ▁break ▁; <break_statement,right> <switch_section,right> <switch_section,left> <default_switch_label,left> ▁default ▁: <default_switch_label,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁logger ▁. ▁log <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁POI Logger ▁. ▁ERROR <member_access_expression,right> ▁, <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁is f _ shared Feature Type <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <switch_section,right> ▁} <switch_body,right> <switch_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_function_statement,left> ▁public ▁Rev Commit ▁try Fast Forward <parameter_list,left> ▁( <parameter,left> ▁Rev Commit ▁new Commit <parameter,right> ▁) <parameter_list,right>  <local_function_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁throws ▁IOException ▁, ▁Git API Exception <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁Ref <variable_declarator,left> ▁head <equals_value_clause,left> ▁= <invocation_expression,left> ▁getH ead <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁ObjectId <variable_declarator,left> ▁head Id <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁head ▁. ▁getObjectId <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁head Id ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Ref NotFound Exception <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁MessageFormat ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁J Git Text ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁ref Not Resolved <member_access_expression,right> ▁, <member_access_expression,left> ▁Constants ▁. ▁HEAD <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Rev Commit <variable_declarator,left> ▁head Commit <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁walk ▁. ▁lookup Commit <member_access_expression,right> <argument_list,left> ▁( ▁head Id ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁walk ▁. ▁is Merged Into <member_access_expression,right> <argument_list,left> ▁( ▁new Commit ▁, ▁head Commit ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return ▁new Commit ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁head Name <equals_value_clause,left> ▁= <invocation_expression,left> ▁getH ead Name <argument_list,left> ▁( ▁head ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁try Fast Forward <argument_list,left> ▁( ▁head Name ▁, ▁head Commit ▁, ▁new Commit ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create Snapshot Schedule Result ▁create Snapshot Schedule <parameter_list,left> ▁( <parameter,left> ▁Create Snapshot Schedule Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Snapshot Schedule <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Record ▁getNext <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <prefix_unary_expression,left> ▁! <invocation_expression,left> ▁hasNext <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁_ count Read ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁_ list ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( <postfix_unary_expression,left> ▁_ next Index ▁++ <postfix_unary_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Raw Parse Utils ▁. ▁decode <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁buf ▁. ▁toByteArray <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁List Tables Request <tuple_pattern,left> ▁( ▁String ▁exclusive Start TableName ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Exclusive Start TableName <argument_list,left> ▁( ▁exclusive Start TableName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Enable Alarm Actions Result ▁enable Alarm Actions <parameter_list,left> ▁( <parameter,left> ▁Enable Alarm Actions Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Enable Alarm Actions <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Builder ▁( ▁) <ERROR,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁boolean ▁equals <parameter_list,left> ▁( <parameter,left> ▁Object ▁obj <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁State ▁other <equals_value_clause,left> ▁= <cast_expression,left> ▁( ▁State ▁) ▁obj <cast_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> ▁is _ final ▁== <member_access_expression,left> ▁other ▁. ▁is _ final <member_access_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁labels <member_access_expression,right> ▁, <member_access_expression,left> ▁other ▁. ▁labels <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <invocation_expression,left> ▁reference Equals <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁states <member_access_expression,right> ▁, <member_access_expression,left> ▁other ▁. ▁states <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁TokenStream ▁create <parameter_list,left> ▁( <parameter,left> ▁TokenStream ▁input <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁English P oss ess ive Filter <argument_list,left> ▁( ▁input ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear Formatting <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ string ▁= <invocation_expression,left> ▁clone String If Required <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁_ string ▁. ▁clear Formatting <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁addTo S ST If Required <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁get <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> <array_type,left> ▁long <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁arr <parameter,right> ▁, <parameter,left> ▁int ▁off <parameter,right> ▁, <parameter,left> ▁int ▁len <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <ERROR,left> <variable_declaration,left> ▁assert ▁len <variable_declaration,right> ▁> ▁0 ▁: <ERROR,right> <expression_statement,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁len <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <expression_statement,right> <ERROR,left> <variable_declaration,left> ▁assert ▁index <variable_declaration,right> ▁>= <ERROR,right> <expression_statement,left> <binary_expression,left> ▁0 ▁&& <binary_expression,left> ▁index ▁< ▁value Count <binary_expression,right> <binary_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁len ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁len ▁, <binary_expression,left> ▁value Count ▁- ▁index <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁fill <member_access_expression,right> <argument_list,left> ▁( ▁arr ▁, ▁off ▁, <binary_expression,left> ▁off ▁+ ▁len <binary_expression,right> ▁, ▁0 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁len ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete Route Response Result ▁delete Route Response <parameter_list,left> ▁( <parameter,left> ▁Delete Route Response Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete Route Response <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁to Private String <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁format <argument_list,left> ▁( ▁true ▁, ▁false ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Pres ign ed Domain Url Result ▁create Pres ign ed Domain Url <parameter_list,left> ▁( <parameter,left> ▁Create Pres ign ed Domain Url Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Pres ign ed Domain Url <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁write <parameter_list,left> ▁( <parameter,left> ▁int ▁one Char <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁do Write <argument_list,left> ▁( <array_creation_expression,left> ▁new <array_type,left> ▁char <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> <initializer_expression,left> ▁{ <cast_expression,left> ▁( ▁char ▁) ▁one Char <cast_expression,right> ▁} <initializer_expression,right> <array_creation_expression,right> ▁, ▁0 ▁, ▁1 ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁S ST Record ▁getS ST Record <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁sst Record ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁term <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁field <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁value ToString <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁doc ID U pto <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁isS atur ated <parameter_list,left> ▁( <parameter,left> ▁F uzzy Set ▁b loomFilter <parameter,right> ▁, <parameter,left> ▁Field Info ▁field Info <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁b loomFilter ▁. ▁getS at uration <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁> ▁0.9 f <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Builder <tuple_pattern,left> ▁( ▁boolean ▁ignore Case ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁ignore Case <member_access_expression,right> ▁= ▁ignore Case <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁max Basic Queries <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ ▁queries Made <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Delete DataSource Result ▁delete DataSource <parameter_list,left> ▁( <parameter,left> ▁Delete DataSource Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Delete DataSource <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Reb oot Node Result ▁reboot Node <parameter_list,left> ▁( <parameter,left> ▁Reb oot Node Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Reb oot Node <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁process Child Records <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁convert Raw Bytes To E sch er Records <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create OrUpdate Tags Result ▁create OrUpdate Tags <parameter_list,left> ▁( <parameter,left> ▁Create OrUpdate Tags Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create OrUpdate Tags <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁File Snapshot ▁getS n ap Shot <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁snap Shot ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁InputStream ▁open Resource <parameter_list,left> ▁( <parameter,left> ▁String ▁resource <parameter,right> ▁) <parameter_list,right> ▁throws ▁IOException <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁InputStream ▁stream <equals_value_clause,left> ▁= <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁clazz ▁!= ▁null <binary_expression,right> ▁) <parenthesized_expression,right> ▁? <invocation_expression,left> <member_access_expression,left> ▁clazz ▁. ▁getResource AsStream <member_access_expression,right> <argument_list,left> ▁( ▁resource ▁) <argument_list,right> <invocation_expression,right> ▁: <invocation_expression,left> <member_access_expression,left> ▁loader ▁. ▁getResource AsStream <member_access_expression,right> <argument_list,left> ▁( ▁resource ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁stream ▁== ▁null <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IOException <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁resource <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> <if_statement,right> <return_statement,left> ▁return ▁stream ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁64 ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ sid ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <member_access_expression,left> ▁_ data ▁. ▁length <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁to Hex <member_access_expression,right> <argument_list,left> ▁( ▁_ data ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁nextIndex <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁index ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁CharSequence ▁to QueryString <parameter_list,left> ▁( <parameter,left> ▁Escape Query Syntax ▁esc aper <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> ▁isDefault Field <argument_list,left> ▁( <member_access_expression,left> ▁this ▁. ▁field <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁\" ▁" <string_literal,right> ▁+ <invocation_expression,left> ▁get Term Escape Quoted <argument_list,left> ▁( ▁esc aper ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <member_access_expression,left> ▁this ▁. ▁field <member_access_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> ▁get Term Escape Quoted <argument_list,left> ▁( ▁esc aper ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁\" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Calc Mode Record ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Output <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁output ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Network Interface Result ▁create Network Interface <parameter_list,left> ▁( <parameter,left> ▁Create Network Interface Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Network Interface <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ password ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Stop Dom inant Language Detection Job Result ▁stop Dom inant Language Detection Job <parameter_list,left> ▁( <parameter,left> ▁Stop Dom inant Language Detection Job Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Stop Dom inant Language Detection Job <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁E CS Metadata Service Credentials Fetcher ▁with Connection Timeout <parameter_list,left> ▁( <parameter,left> ▁int ▁milliseconds <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁connection Timeout In Milliseconds <member_access_expression,right> ▁= ▁milliseconds <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Gateway Group Result ▁getG ateway Group <parameter_list,left> ▁( <parameter,left> ▁Get Gateway Group Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Gateway Group <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Float Buffer ▁slice <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁ReadOnly Float Array Buffer <argument_list,left> ▁( <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁String ▁join <parameter_list,left> ▁( <parameter,left> <generic_name,left> ▁Collection <type_argument_list,left> ▁< ▁String ▁> <type_argument_list,right> <generic_name,right> ▁parts <parameter,right> ▁, <parameter,left> ▁String ▁separator <parameter,right> ▁, <parameter,left> ▁String ▁last Separator <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁lastIndex <equals_value_clause,left> ▁= <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁parts ▁. ▁size <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- ▁1 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <ERROR,left> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁String ▁part <variable_declaration,right> ▁: ▁) ▁{ <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁part ▁) <argument_list,right> <invocation_expression,right> <ERROR,right> ▁; <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁if <argument_list,left> ▁( <binary_expression,left> ▁i ▁== <binary_expression,left> ▁lastIndex ▁- ▁1 <binary_expression,right> <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <{,left> <{,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁last Separator ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,left> ▁} ▁else ▁if <parenthesized_expression,left> ▁( <binary_expression,left> ▁i ▁!= ▁lastIndex <binary_expression,right> ▁) <parenthesized_expression,right> <initializer_expression,left> ▁{ <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁separator ▁) <argument_list,right> <invocation_expression,right> ▁; ▁} <initializer_expression,right> <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁; ▁} ▁return <ERROR,right> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <ERROR,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> <binary_expression,left> <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁a ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁+ <invocation_expression,left> <member_access_expression,left> ▁b ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ <string_literal,left> ▁" ▁" <string_literal,right> <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁List Subscriptions By Topic Request <tuple_pattern,left> ▁( ▁String ▁topic Arn ▁, ▁String ▁nextToken ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Topic Arn <argument_list,left> ▁( ▁topic Arn ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setNext Token <argument_list,left> ▁( ▁nextToken ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁byte ▁readByte <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <element_access_expression,left> ▁bytes <bracketed_argument_list,left> ▁[ <postfix_unary_expression,left> ▁pos ▁-- <postfix_unary_expression,right> ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Term inate Client V pn Connections Result ▁terminate Client V pn Connections <parameter_list,left> ▁( <parameter,left> ▁Term inate Client V pn Connections Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Term inate Client V pn Connections <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Receive Message Request <tuple_pattern,left> ▁( ▁String ▁queue Url ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Queue Url <argument_list,left> ▁( ▁queue Url ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ bar Space ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _2_ category Space ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _3_ format Flags ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Object ▁common <parameter_list,left> ▁( <parameter,left> ▁Object ▁output 1 <parameter,right> ▁, <parameter,left> ▁Object ▁output 2 <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁outputs ▁. ▁common <member_access_expression,right> <argument_list,left> ▁( <cast_expression,left> ▁( ▁T ▁) ▁output 1 <cast_expression,right> ▁, <cast_expression,left> ▁( ▁T ▁) ▁output 2 <cast_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Variable Result ▁create Variable <parameter_list,left> ▁( <parameter,left> ▁Create Variable Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Variable <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁final ▁int ▁match <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁b <parameter,right> ▁, <parameter,left> ▁int ▁ptr <parameter,right> ▁, <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁src <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁ptr ▁+ <member_access_expression,left> ▁src ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁> <member_access_expression,left> ▁b ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> <if_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁src ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁, <postfix_unary_expression,left> ▁ptr ▁++ <postfix_unary_expression,right> ▁) <if_statement,left> ▁if ▁( <binary_expression,left> <element_access_expression,left> ▁b <bracketed_argument_list,left> ▁[ ▁ptr ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁!= <element_access_expression,left> ▁src <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return <prefix_unary_expression,left> ▁- ▁1 <prefix_unary_expression,right> ▁; <return_statement,right> <if_statement,right> <for_statement,right> <return_statement,left> ▁return ▁ptr ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁fill Fields <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁data <parameter,right> ▁, <parameter,left> ▁int ▁offset <parameter,right> ▁, <parameter,left> ▁E sch er Record Factory ▁record Factory <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁bytes Remaining <equals_value_clause,left> ▁= <invocation_expression,left> ▁read Header <argument_list,left> ▁( ▁data ▁, ▁offset ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁pos <equals_value_clause,left> ▁= <binary_expression,left> ▁offset ▁+ ▁8 <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁size <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _1_ rect X 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ rect Y 1 ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _3_ rect X 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _4_ rect Y 2 ▁= <invocation_expression,left> <member_access_expression,left> ▁L ittle Endian ▁. ▁getInt <member_access_expression,right> <argument_list,left> ▁( ▁data ▁, <binary_expression,left> ▁pos ▁+ ▁size <binary_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁size ▁+= ▁4 <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁bytes Remaining ▁-= ▁size <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁bytes Remaining ▁!= ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Record FormatException <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁bytes Remaining <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <binary_expression,left> <binary_expression,left> ▁8 ▁+ ▁size <binary_expression,right> ▁+ ▁bytes Remaining <binary_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create Cloud Front Origin Access Identity Result ▁create Cloud Front Origin Access Identity <parameter_list,left> ▁( <parameter,left> ▁Create Cloud Front Origin Access Identity Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create Cloud Front Origin Access Identity <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Namespace Aware <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁getFeature <argument_list,left> ▁( <member_access_expression,left> ▁XmlPullParser ▁. ▁FEATURE _ PROCESS _ NAMESPACE S <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setO verr id able <parameter_list,left> ▁( <parameter,left> ▁boolean ▁on <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁overr id able ▁= ▁on <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getClassName <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁className ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁synchronized ▁Directory Reader ▁getIndex Reader <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁index Reader ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁index Reader ▁. ▁inc Ref <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁index Reader ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁indexOf Key <parameter_list,left> ▁( <parameter,left> ▁int ▁key <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁binarySearch <argument_list,left> ▁( ▁m Keys ▁, ▁0 ▁, ▁m Size ▁, ▁key ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Bl ank Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ row ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁read U Short <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _2_ col ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁field _3_ xf ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁long ▁length <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁length ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Password Record <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁field _1_ password ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁HashMap <tuple_pattern,left> ▁( ▁int ▁capacity ▁, ▁float ▁load Factor ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁this <argument_list,left> ▁( ▁capacity ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁load Factor ▁<= ▁0 <binary_expression,right> ▁|| <invocation_expression,left> <member_access_expression,left> ▁Float ▁. ▁isNaN <member_access_expression,right> <argument_list,left> ▁( ▁load Factor ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( <binary_expression,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁+ ▁load Factor <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁run <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁long <variable_declarator,left> ▁last Re open Start NS <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁nanoTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <while_statement,left> ▁while ▁( <prefix_unary_expression,left> ▁! ▁finish <prefix_unary_expression,right> ▁) <block,left> ▁{ <while_statement,left> ▁while ▁( <prefix_unary_expression,left> ▁! ▁finish <prefix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁reopen Lock ▁. ▁lock <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <try_statement,left> ▁try <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁boolean <variable_declarator,left> ▁has Waiting <equals_value_clause,left> ▁= <binary_expression,left> ▁waiting Gen ▁> ▁searching Gen <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁next Re open Start NS <equals_value_clause,left> ▁= <binary_expression,left> ▁last Re open Start NS ▁+ <parenthesized_expression,left> ▁( <conditional_expression,left> ▁has Waiting ▁? ▁target Min Stale NS ▁: ▁target Max Stale NS <conditional_expression,right> ▁) <parenthesized_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁long ▁sleep NS <equals_value_clause,left> ▁= <binary_expression,left> ▁next Re open Start NS ▁- <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁nanoTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁sleep NS ▁> ▁0 <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁reopen Cond ▁. ▁await Nanos <member_access_expression,right> <argument_list,left> ▁( ▁sleep NS ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁Inter ruptedException ▁ie ▁) <catch_declaration,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Thread ▁. ▁currentThread <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁interrupt <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁; <return_statement,right> ▁} <block,right> <catch_clause,right> <finally_clause,left> ▁finally <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁reopen Lock ▁. ▁unlock <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <finally_clause,right> <try_statement,right> ▁} <block,right> <while_statement,right> <if_statement,left> ▁if ▁( ▁finish ▁) <block,left> ▁{ <break_statement,left> ▁break ▁; <break_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁last Re open Start NS ▁= <invocation_expression,left> <member_access_expression,left> ▁System ▁. ▁nanoTime <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁refresh Start Gen ▁= <invocation_expression,left> <member_access_expression,left> ▁writer ▁. ▁getMax Completed SequenceNumber <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <try_statement,left> ▁try <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁manager ▁. ▁maybe Refresh Blocking <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <catch_clause,left> ▁catch <catch_declaration,left> ▁( ▁IOException ▁ioe ▁) <catch_declaration,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Runtime Exception <argument_list,left> ▁( ▁ioe ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <catch_clause,right> <try_statement,right> ▁} <block,right> <while_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete Login Profile Request <tuple_pattern,left> ▁( ▁String ▁userName ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set UserName <argument_list,left> ▁( ▁userName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁E ▁poll First <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <conditional_expression,left> <parenthesized_expression,left> ▁( <binary_expression,left> ▁size ▁== ▁0 <binary_expression,right> ▁) <parenthesized_expression,right> ▁? ▁null ▁: <invocation_expression,left> ▁remove First Impl <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <conditional_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Create Photo Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁getName <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <string_literal,left> ▁" ▁" <string_literal,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁int ▁find EndOffset <parameter_list,left> ▁( <parameter,left> ▁StringBuilder ▁buffer <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> ▁start ▁> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <binary_expression,left> ▁start ▁< ▁0 <binary_expression,right> <binary_expression,right> ▁) <return_statement,left> ▁return ▁start ▁; <return_statement,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int ▁offset ▁, <variable_declarator,left> ▁count <equals_value_clause,left> ▁= ▁max Scan <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <for_statement,left> ▁for ▁( <assignment_expression,left> ▁offset ▁= ▁start <assignment_expression,right> ▁; <binary_expression,left> <binary_expression,left> ▁offset ▁< <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁length <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁&& <binary_expression,left> ▁count ▁> ▁0 <binary_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁count ▁-- <postfix_unary_expression,right> ▁) <block,left> ▁{ <if_statement,left> ▁if ▁( <invocation_expression,left> <member_access_expression,left> ▁boundary Chars ▁. ▁contains <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁charAt <member_access_expression,right> <argument_list,left> ▁( ▁offset ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <return_statement,left> ▁return ▁offset ▁; <return_statement,right> <if_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁offset ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <return_statement,left> ▁return ▁start ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setObject Checker <parameter_list,left> ▁( <parameter,left> ▁Object Checker ▁oc <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁obj Check ▁= ▁oc <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Base Ref <tuple_pattern,left> ▁( ▁Area Eval ▁ae ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ ref Eval ▁= ▁null <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ area Eval ▁= ▁ae <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ first Row Index ▁= <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ first ColumnIndex ▁= <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ height ▁= <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getLast Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Row <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁_ width ▁= <binary_expression,left> <binary_expression,left> <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getLast Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁- <invocation_expression,left> <member_access_expression,left> ▁ae ▁. ▁getFirst Column <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁+ ▁1 <binary_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Create V pc Endpoint Result ▁create V pc Endpoint <parameter_list,left> ▁( <parameter,left> ▁Create V pc Endpoint Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create V pc Endpoint <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁D eregister Workspace Directory Result ▁d eregister Workspace Directory <parameter_list,left> ▁( <parameter,left> ▁D eregister Workspace Directory Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute D eregister Workspace Directory <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Chart F RT Info Record <variable_declarator,left> <tuple_pattern,left> ▁( ▁Record InputStream ▁in ▁) <tuple_pattern,right> <{,left> <{,right> <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁gr bit F rt ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ver Origin ator ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readByte <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁ver Writer ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readByte <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁c CF RT ID <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁in ▁. ▁readShort <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <assignment_expression,left> ▁rg CF RT ID ▁= <array_creation_expression,left> ▁new <array_type,left> ▁CF RT ID <array_rank_specifier,left> ▁[ ▁c CF RT ID ▁] <array_rank_specifier,right> <array_type,right> <array_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< ▁c CF RT ID <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁rg CF RT ID <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁CF RT ID <argument_list,left> ▁( ▁in ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} ▁} <block,right> <for_statement,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁Mer ger ▁new Merger <parameter_list,left> ▁( <parameter,left> ▁Repository ▁db <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁One Side <argument_list,left> ▁( ▁db ▁, ▁tree Index ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Create DataSource From Red shift Result ▁create DataSource From Red shift <parameter_list,left> ▁( <parameter,left> ▁Create DataSource From Red shift Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Create DataSource From Red shift <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁clear D FA <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁d <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁d ▁< <member_access_expression,left> ▁decision To D FA ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁d ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁decision To D FA <bracketed_argument_list,left> ▁[ ▁d ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= <object_creation_expression,left> ▁new ▁D FA <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁at n ▁. ▁getDec ision State <member_access_expression,right> <argument_list,left> ▁( ▁d ▁) <argument_list,right> <invocation_expression,right> ▁, ▁d ▁) <argument_list,right> <object_creation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁remove Name <parameter_list,left> ▁( <parameter,left> ▁String ▁name <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁index <equals_value_clause,left> ▁= <invocation_expression,left> ▁getName Index <argument_list,left> ▁( ▁name ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> ▁remove Name <argument_list,left> ▁( ▁index ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getM argin <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Refresh All Record ▁clone <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> ▁copy <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Standard Query Node Processor Pipeline <tuple_pattern,left> ▁( ▁Query Config Handler ▁query Config ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁super <argument_list,left> ▁( ▁query Config ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Wildcard Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Multi Field Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁F uzzy Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Reg exp Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Match All Docs Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Open Range Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Point Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Point Range Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Term Range Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Allow Leading Wildcard Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Analyzer Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Ph rase S lop Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Boolean Query 2 Modifier Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁No Child Opt imization Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Remove Deleted Query Nodes Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Remove Empty Non Leaf Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Boolean Single Child Opt imization Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Default Phrase S lop Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Boost Query Node Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁Multi Term Rewrite Method Processor <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁format AsString <parameter_list,left> ▁( <parameter,left> ▁String ▁sheet Name <parameter,right> ▁, <parameter,left> ▁boolean ▁use Absolute Address <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁sheet Name ▁!= ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Sheet Name Formatter ▁. ▁format <member_access_expression,right> <argument_list,left> ▁( ▁sheet Name ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell Reference <variable_declarator,left> ▁cell Ref From <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Cell Reference <argument_list,left> ▁( <invocation_expression,left> ▁getFirst Row <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> ▁getFirst Column <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁use Absolute Address ▁, ▁use Absolute Address ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Cell Reference <variable_declarator,left> ▁cell Ref To <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁Cell Reference <argument_list,left> ▁( <invocation_expression,left> ▁getLast Row <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, <invocation_expression,left> ▁getLast Column <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁use Absolute Address ▁, ▁use Absolute Address ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁cell Ref From ▁. ▁format AsString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> <binary_expression,left> <prefix_unary_expression,left> ▁! <invocation_expression,left> <member_access_expression,left> ▁cell Ref From ▁. ▁equals <member_access_expression,right> <argument_list,left> ▁( ▁cell Ref To ▁) <argument_list,right> <invocation_expression,right> <prefix_unary_expression,right> ▁|| <invocation_expression,left> ▁is Full Column Range <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁|| <invocation_expression,left> ▁is Full Row Range <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁cell Ref To ▁. ▁format AsString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁put <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁byte ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁mode <parameter_list,left> ▁( <parameter,left> ▁int ▁m <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁_ mode ▁= ▁m <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Short Buffer ▁slice <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Read Write Short Array Buffer <argument_list,left> ▁( <invocation_expression,left> ▁remaining <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁, ▁backing Array ▁, <binary_expression,left> ▁offset ▁+ ▁position <binary_expression,right> ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁set <parameter_list,left> ▁( <parameter,left> ▁int ▁index <parameter,right> ▁, <parameter,left> ▁long ▁n <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁< ▁index <binary_expression,right> ▁) <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁Array IndexOutOfBounds Exception <argument_list,left> ▁( ▁index ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁count ▁== ▁index <binary_expression,right> ▁) <expression_statement,left> <invocation_expression,left> ▁add <argument_list,left> ▁( ▁n ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <if_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> <element_access_expression,left> ▁else entries <bracketed_argument_list,left> ▁[ ▁index ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁= ▁n <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ByteBuffer ▁put Float <parameter_list,left> ▁( <parameter,left> ▁float ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁ReadOnly BufferException <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <local_function_statement,right> 
<ERROR,left> ▁public ▁static ▁double ▁max <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁double <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁values <parameter,right> ▁) <parameter_list,right> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁double <variable_declarator,left> ▁max <equals_value_clause,left> ▁= <member_access_expression,left> ▁Double ▁. ▁NEGATIVE _ INFINITY <member_access_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> ▁for ▁( <ERROR,left> <variable_declaration,left> ▁double ▁value <variable_declaration,right> ▁: ▁) ▁{ <assignment_expression,left> ▁max ▁= <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁max <member_access_expression,right> <argument_list,left> ▁( ▁max ▁, ▁value ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> <ERROR,right> ▁; <ERROR,left> ▁} ▁return <ERROR,right> ▁max ▁; ▁} <ERROR,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Update Repo Web hook Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Uri Pattern <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Method <argument_list,left> ▁( <member_access_expression,left> ▁MethodType ▁. ▁POST <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete Attributes Request <tuple_pattern,left> ▁( ▁String ▁domain Name ▁, ▁String ▁itemName ▁, java <ERROR,left> ▁. ▁. ▁< ▁> <ERROR,right> ▁, ▁Update Condition ▁expected ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁set Domain Name <argument_list,left> ▁( ▁domain Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setItem Name <argument_list,left> ▁( ▁itemName ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁setAttributes <argument_list,left> ▁( ▁attributes ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Expected <argument_list,left> ▁( ▁expected ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <for_statement,left> ▁for ▁( <variable_declaration,left> ▁int <variable_declarator,left> ▁i <equals_value_clause,left> ▁= ▁0 <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <binary_expression,left> ▁i ▁< <member_access_expression,left> ▁_ field Infos ▁. ▁length <member_access_expression,right> <binary_expression,right> ▁; <postfix_unary_expression,left> ▁i ▁++ <postfix_unary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁i ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <element_access_expression,left> ▁_ field Infos <bracketed_argument_list,left> ▁[ ▁i ▁] <bracketed_argument_list,right> <element_access_expression,right> ▁. ▁append Debug Info <member_access_expression,right> <argument_list,left> ▁( ▁sb ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁\ n ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <for_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Successful <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁merge Result ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁merge Result ▁. ▁getM erge Status <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁is Successful <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁re base Result ▁!= ▁null <binary_expression,right> ▁) <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁re base Result ▁. ▁getStatus <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁is Successful <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> <if_statement,right> <if_statement,right> <return_statement,left> ▁return ▁true ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁setBytes Value <parameter_list,left> ▁( <parameter,left> <array_type,left> ▁byte <array_rank_specifier,left> ▁[ ▁] <array_rank_specifier,right> <array_type,right> ▁value <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setBytes Value <argument_list,left> ▁( <object_creation_expression,left> ▁new ▁BytesRef <argument_list,left> ▁( ▁value ▁) <argument_list,right> <object_creation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Connections Result ▁describe Connections <parameter_list,left> ▁( <parameter,left> ▁Describe Connections Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Connections <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <ERROR,left> ▁public ▁Delete Photos Request ▁( <ERROR,left> ▁) ▁{ ▁super <ERROR,right> ▁( ▁" ▁" ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <string_literal,left> ▁" ▁" <string_literal,right> ▁, <ERROR,right> <expression_statement,left> <string_literal,left> ▁" ▁" <string_literal,right> ▁) ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁set Protocol <argument_list,left> ▁( <member_access_expression,left> ▁Protocol Type ▁. ▁HTTPS <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁add <parameter_list,left> ▁( <parameter,left> ▁E ▁object <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> <qualified_name,left> ▁iterator ▁. ▁add <qualified_name,right> <tuple_pattern,left> ▁( ▁object ▁) <tuple_pattern,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁subList ▁. ▁size Changed <member_access_expression,right> <argument_list,left> ▁( ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <postfix_unary_expression,left> ▁end ▁++ <postfix_unary_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁static ▁ByteBuffer ▁allocate <parameter_list,left> ▁( <parameter,left> ▁int ▁capacity <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁capacity ▁< ▁0 <binary_expression,right> ▁) <block,left> ▁{ <throw_statement,left> ▁throw <object_creation_expression,left> ▁new ▁IllegalArgument Exception <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> ▁; <throw_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <object_creation_expression,left> ▁new ▁Read Write Heap ByteBuffer <argument_list,left> ▁( ▁capacity ▁) <argument_list,right> <object_creation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁S r nd Query ▁getSub Query <parameter_list,left> ▁( <parameter,left> ▁int ▁qn <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁queries ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁qn ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁float ▁current Score <parameter_list,left> ▁( <parameter,left> ▁int ▁docId <parameter,right> ▁, <parameter,left> ▁String ▁field <parameter,right> ▁, <parameter,left> ▁int ▁start <parameter,right> ▁, <parameter,left> ▁int ▁end <parameter,right> ▁, <parameter,left> ▁int ▁num Payload s Seen <parameter,right> ▁, <parameter,left> ▁float ▁current Score <parameter,right> ▁, <parameter,left> ▁float ▁current Payload Score <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁num Payload s Seen ▁== ▁0 <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁current Payload Score ▁; <return_statement,right> ▁} <block,right> ▁else <block,left> ▁{ <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁Math ▁. ▁min <member_access_expression,right> <argument_list,left> ▁( ▁current Payload Score ▁, ▁current Score ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁sb <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getColumn <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Hex Dump ▁. ▁short To Hex <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getX F Index <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁sb ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Describe Log Pattern Result ▁describe Log Pattern <parameter_list,left> ▁( <parameter,left> ▁Describe Log Pattern Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Des cribe Log Pattern <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Register Trans it Gateway Multicast Group Members Result ▁register Trans it Gateway Multicast Group Members <parameter_list,left> ▁( <parameter,left> ▁Register Trans it Gateway Multicast Group Members Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Register Trans it Gateway Multicast Group Members <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get PhoneNumber Settings Result ▁getPh one Number Settings <parameter_list,left> ▁( <parameter,left> ▁Get PhoneNumber Settings Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get PhoneNumber Settings <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁ObjectId ▁getData <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁data ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁is Direct <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Delete Server Certificate Request <tuple_pattern,left> ▁( ▁String ▁server Certificate Name ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁setServer Certificate Name <argument_list,left> ▁( ▁server Certificate Name ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁StringBuffer ▁append <parameter_list,left> ▁( <parameter,left> ▁double ▁d <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁Real ToString ▁. ▁getInstance <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append Double <member_access_expression,right> <argument_list,left> ▁( ▁this ▁, ▁d ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Evaluation Result ▁getE val uation <parameter_list,left> ▁( <parameter,left> ▁Get Evaluation Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Evaluation <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Linked Data Record ▁getData Name <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return ▁data Name ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁boolean ▁find <parameter_list,left> ▁( <parameter,left> ▁int ▁start <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁find Pos ▁= ▁start <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁find Pos ▁< ▁region Start <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁find Pos ▁= ▁region Start <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> ▁else <if_statement,left> ▁if ▁( <binary_expression,left> ▁find Pos ▁>= ▁region End <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁match Found ▁= ▁false <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁false ▁; <return_statement,right> ▁} <block,right> <if_statement,right> <if_statement,right> <expression_statement,left> <assignment_expression,left> ▁match Found ▁= <invocation_expression,left> ▁find Impl <argument_list,left> ▁( ▁address ▁, ▁input ▁, ▁find Pos ▁, ▁match Offsets ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <if_statement,left> ▁if ▁( ▁match Found ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁find Pos ▁= <element_access_expression,left> ▁match Offsets <bracketed_argument_list,left> ▁[ ▁1 ▁] <bracketed_argument_list,right> <element_access_expression,right> <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return ▁match Found ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Get Lifecycle Policy Preview Result ▁getL ifecycle Policy Preview <parameter_list,left> ▁( <parameter,left> ▁Get Lifecycle Policy Preview Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Get Lifecycle Policy Preview <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<compilation_unit,left> <local_declaration_statement,left> ▁public <variable_declaration,left> ▁Single Position Token Stream <tuple_pattern,left> ▁( ▁String ▁word ▁) <tuple_pattern,right> <variable_declaration,right>  <local_declaration_statement,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁term Att ▁= <invocation_expression,left> ▁addAttribute <argument_list,left> ▁( <member_access_expression,left> ▁Char Term Attribute ▁. ▁class <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁pos In cr Att ▁= <invocation_expression,left> ▁addAttribute <argument_list,left> ▁( <member_access_expression,left> ▁Position Increment Attribute ▁. ▁class <member_access_expression,right> ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁word <member_access_expression,right> ▁= ▁word <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> ▁returned ▁= ▁true <assignment_expression,right> ▁; <expression_statement,right> ▁} <block,right> <compilation_unit,right> 
<local_function_statement,left> ▁public ▁void ▁serialize <parameter_list,left> ▁( <parameter,left> ▁L ittle Endian Output ▁out <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁out ▁. ▁writeShort <member_access_expression,right> <argument_list,left> ▁( ▁field _1_ print _ grid lines ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁final <variable_declarator,left> ▁StringBuilder ▁s <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Constants ▁. ▁type String <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁getType <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁name <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( ▁commit Time ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <character_literal,left> ▁' ▁' <character_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁append Core Flags <argument_list,left> ▁( ▁s ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁s ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁L s Remote Command ▁set Remote <parameter_list,left> ▁( <parameter,left> ▁String ▁remote <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <invocation_expression,left> ▁check Callable <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <assignment_expression,left> <member_access_expression,left> ▁this ▁. ▁remote <member_access_expression,right> ▁= ▁remote <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return ▁this ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁void ▁collapse Row <parameter_list,left> ▁( <parameter,left> ▁int ▁row Number <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁startRow <equals_value_clause,left> ▁= <invocation_expression,left> ▁find Start Of Row Outline Group <argument_list,left> ▁( ▁row Number ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Row Record <variable_declarator,left> ▁row Record <equals_value_clause,left> ▁= <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁startRow ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁int <variable_declarator,left> ▁next Row I x <equals_value_clause,left> ▁= <invocation_expression,left> ▁write Hidden <argument_list,left> ▁( ▁row Record ▁, ▁startRow ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <local_declaration_statement,left> <variable_declaration,left> ▁Row Record <variable_declarator,left> ▁row <equals_value_clause,left> ▁= <invocation_expression,left> ▁getRow <argument_list,left> ▁( ▁next Row I x ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁row ▁== ▁null <binary_expression,right> ▁) <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁row ▁= <invocation_expression,left> ▁create Row <argument_list,left> ▁( ▁next Row I x ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> ▁insert Row <argument_list,left> ▁( ▁row ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <if_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁row ▁. ▁set Col apsed <member_access_expression,right> <argument_list,left> ▁( ▁true ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Assoc iate Skill Group With Room Result ▁associate Skill Group With Room <parameter_list,left> ▁( <parameter,left> ▁Assoc iate Skill Group With Room Request ▁request <parameter,right> ▁) <parameter_list,right> <block,left> ▁{ <expression_statement,left> <assignment_expression,left> ▁request ▁= <invocation_expression,left> ▁before Client Execution <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> <assignment_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> ▁execute Assoc iate Skill Group With Room <argument_list,left> ▁( ▁request ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁toString <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁StringBuilder <variable_declarator,left> ▁buffer <equals_value_clause,left> ▁= <object_creation_expression,left> ▁new ▁StringBuilder <argument_list,left> ▁( ▁) <argument_list,right> <object_creation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> <member_access_expression,left> ▁Arrays ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( <invocation_expression,left> ▁get Series Numbers <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁) <argument_list,right> <invocation_expression,right> ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <expression_statement,left> <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁append <member_access_expression,right> <argument_list,left> ▁( <string_literal,left> ▁" ▁\ n ▁" <string_literal,right> ▁) <argument_list,right> <invocation_expression,right> ▁; <expression_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> ▁buffer ▁. ▁toString <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁Query Config Handler ▁getQuery Config Handler <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <return_statement,left> ▁return <member_access_expression,left> ▁this ▁. ▁query Config <member_access_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
<local_function_statement,left> ▁public ▁String ▁getClass Arg <parameter_list,left> ▁( ▁) <parameter_list,right> <block,left> ▁{ <if_statement,left> ▁if ▁( <binary_expression,left> ▁null ▁!= ▁original Args <binary_expression,right> ▁) <block,left> ▁{ <local_declaration_statement,left> <variable_declaration,left> ▁String <variable_declarator,left> ▁className <equals_value_clause,left> ▁= <invocation_expression,left> <member_access_expression,left> ▁original Args ▁. ▁get <member_access_expression,right> <argument_list,left> ▁( ▁CLASS _ NAME ▁) <argument_list,right> <invocation_expression,right> <equals_value_clause,right> <variable_declarator,right> <variable_declaration,right> ▁; <local_declaration_statement,right> <if_statement,left> ▁if ▁( <binary_expression,left> ▁null ▁!= ▁className <binary_expression,right> ▁) <block,left> ▁{ <return_statement,left> ▁return ▁className ▁; <return_statement,right> ▁} <block,right> <if_statement,right> ▁} <block,right> <if_statement,right> <return_statement,left> ▁return <invocation_expression,left> <member_access_expression,left> <invocation_expression,left> ▁getClass <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁. ▁getName <member_access_expression,right> <argument_list,left> ▁( ▁) <argument_list,right> <invocation_expression,right> ▁; <return_statement,right> ▁} <block,right> <local_function_statement,right> 
